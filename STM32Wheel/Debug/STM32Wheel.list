
STM32Wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d30  08005d30  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d30  08005d30  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d30  08005d30  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000002c  08005d64  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005d64  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f819  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256b  00000000  00000000  0002f86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00031de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e8b  00000000  00000000  00033030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6cd  00000000  00000000  0004bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090491  00000000  00000000  00058588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  000e8a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b84 	.word	0x08005b84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08005b84 	.word	0x08005b84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 f9b4 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80c 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f850 	bl	800020c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // init device stack on configured roothub port
  tud_init(BOARD_TUD_RHPORT);
 800016c:	2000      	movs	r0, #0
 800016e:	f001 fc1b 	bl	80019a8 <tud_init>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000172:	2100      	movs	r1, #0
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f001 fce0 	bl	8001b3c <tud_task_ext>
}
 800017c:	bf00      	nop
  while (1)
  {

	// !your_application_code!

	tud_task();
 800017e:	e7f8      	b.n	8000172 <main+0x16>

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f005 fcf0 	bl	8005b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fac5 	bl	8000758 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d4:	f000 f877 	bl	80002c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fd32 	bl	8000c5c <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fe:	f000 f862 	bl	80002c6 <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	; 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_GPIO_Init+0x40>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <MX_GPIO_Init+0x40>)
 8000218:	f043 0320 	orr.w	r3, r3, #32
 800021c:	6193      	str	r3, [r2, #24]
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_GPIO_Init+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	f003 0320 	and.w	r3, r3, #32
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <MX_GPIO_Init+0x40>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000

08000250 <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0

}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	4603      	mov	r3, r0
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	460b      	mov	r3, r1
 8000296:	71bb      	strb	r3, [r7, #6]
 8000298:	4613      	mov	r3, r2
 800029a:	717b      	strb	r3, [r7, #5]
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	460b      	mov	r3, r1
 80002b6:	71bb      	strb	r3, [r7, #6]
 80002b8:	4613      	mov	r3, r2
 80002ba:	717b      	strb	r3, [r7, #5]
  (void) instance;

  // Hid report
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ca:	b672      	cpsid	i
}
 80002cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ce:	e7fe      	b.n	80002ce <Error_Handler+0x8>

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <NMI_Handler+0x4>

0800033a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037a:	f000 f8ed 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}

08000382 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
	...

08000390 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000394:	4b02      	ldr	r3, [pc, #8]	; (80003a0 <tud_descriptor_device_cb+0x10>)
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	08005bdc 	.word	0x08005bdc

080003a4 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80003ae:	4b03      	ldr	r3, [pc, #12]	; (80003bc <tud_hid_descriptor_report_cb+0x18>)
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	08005bf0 	.word	0x08005bf0

080003c0 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations

  // This example use the same configuration for both high and full speed mode
  return desc_configuration;
 80003ca:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <tud_descriptor_configuration_cb+0x18>)
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	08005ce0 	.word	0x08005ce0

080003dc <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4613      	mov	r3, r2
 80003ea:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d108      	bne.n	8000404 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <tud_descriptor_string_cb+0x9c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <tud_descriptor_string_cb+0xa0>)
 80003fc:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e027      	b.n	8000454 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	2b03      	cmp	r3, #3
 8000408:	d901      	bls.n	800040e <tud_descriptor_string_cb+0x32>
 800040a:	2300      	movs	r3, #0
 800040c:	e030      	b.n	8000470 <tud_descriptor_string_cb+0x94>

    const char* str = string_desc_arr[index];
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4a19      	ldr	r2, [pc, #100]	; (8000478 <tud_descriptor_string_cb+0x9c>)
 8000412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000416:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 8000418:	68b8      	ldr	r0, [r7, #8]
 800041a:	f7ff fe97 	bl	800014c <strlen>
 800041e:	4603      	mov	r3, r0
 8000420:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	2b1f      	cmp	r3, #31
 8000426:	d901      	bls.n	800042c <tud_descriptor_string_cb+0x50>
 8000428:	231f      	movs	r3, #31
 800042a:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 800042c:	2300      	movs	r3, #0
 800042e:	73bb      	strb	r3, [r7, #14]
 8000430:	e00c      	b.n	800044c <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	68ba      	ldr	r2, [r7, #8]
 8000436:	4413      	add	r3, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	7bbb      	ldrb	r3, [r7, #14]
 800043c:	3301      	adds	r3, #1
 800043e:	b291      	uxth	r1, r2
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <tud_descriptor_string_cb+0xa0>)
 8000442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8000446:	7bbb      	ldrb	r3, [r7, #14]
 8000448:	3301      	adds	r3, #1
 800044a:	73bb      	strb	r3, [r7, #14]
 800044c:	7bba      	ldrb	r2, [r7, #14]
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	429a      	cmp	r2, r3
 8000452:	d3ee      	bcc.n	8000432 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	b29b      	uxth	r3, r3
 8000458:	3301      	adds	r3, #1
 800045a:	b29b      	uxth	r3, r3
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	b29b      	uxth	r3, r3
 8000460:	b21b      	sxth	r3, r3
 8000462:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000466:	b21b      	sxth	r3, r3
 8000468:	b29a      	uxth	r2, r3
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <tud_descriptor_string_cb+0xa0>)
 800046c:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 800046e:	4b03      	ldr	r3, [pc, #12]	; (800047c <tud_descriptor_string_cb+0xa0>)
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000004 	.word	0x20000004
 800047c:	20000048 	.word	0x20000048

08000480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a6:	f7ff ff6c 	bl	8000382 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f005 fb31 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff fe55 	bl	800015c <main>
  bx lr
 80004b2:	4770      	bx	lr
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80004bc:	08005d38 	.word	0x08005d38
  ldr r2, =_sbss
 80004c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80004c4:	20000388 	.word	0x20000388

080004c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_2_IRQHandler>
	...

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_Init+0x28>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_Init+0x28>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004dc:	2003      	movs	r0, #3
 80004de:	f000 f907 	bl	80006f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e2:	200f      	movs	r0, #15
 80004e4:	f000 f808 	bl	80004f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e8:	f7ff fef2 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40022000 	.word	0x40022000

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_InitTick+0x54>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000512:	fbb2 f3f3 	udiv	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f911 	bl	800073e <HAL_SYSTICK_Config>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	e00e      	b.n	8000544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d80a      	bhi.n	8000542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f8e7 	bl	8000706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <HAL_InitTick+0x5c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000000 	.word	0x20000000
 8000550:	20000018 	.word	0x20000018
 8000554:	20000014 	.word	0x20000014

08000558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x20>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x20>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000018 	.word	0x20000018
 8000578:	20000088 	.word	0x20000088

0800057c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <HAL_GetTick+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000088 	.word	0x20000088

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff90 	bl	80005f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff49 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000718:	f7ff ff5e 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 800071c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff90 	bl	8000648 <NVIC_EncodePriority>
 8000728:	4602      	mov	r2, r0
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5f 	bl	80005f4 <__NVIC_SetPriority>
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffb0 	bl	80006ac <SysTick_Config>
 800074c:	4603      	mov	r3, r0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e272      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 8087 	beq.w	8000886 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000778:	4b92      	ldr	r3, [pc, #584]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b04      	cmp	r3, #4
 8000782:	d00c      	beq.n	800079e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000784:	4b8f      	ldr	r3, [pc, #572]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b08      	cmp	r3, #8
 800078e:	d112      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
 8000790:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079c:	d10b      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d06c      	beq.n	8000884 <HAL_RCC_OscConfig+0x12c>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d168      	bne.n	8000884 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e24c      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007be:	d106      	bne.n	80007ce <HAL_RCC_OscConfig+0x76>
 80007c0:	4b80      	ldr	r3, [pc, #512]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a7f      	ldr	r2, [pc, #508]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	e02e      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10c      	bne.n	80007f0 <HAL_RCC_OscConfig+0x98>
 80007d6:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a7a      	ldr	r2, [pc, #488]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	e01d      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f8:	d10c      	bne.n	8000814 <HAL_RCC_OscConfig+0xbc>
 80007fa:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a71      	ldr	r2, [pc, #452]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e00b      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a6a      	ldr	r2, [pc, #424]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800081a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a67      	ldr	r2, [pc, #412]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d013      	beq.n	800085c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000834:	f7ff fea2 	bl	800057c <HAL_GetTick>
 8000838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083a:	e008      	b.n	800084e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800083c:	f7ff fe9e 	bl	800057c <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d901      	bls.n	800084e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e200      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084e:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f0      	beq.n	800083c <HAL_RCC_OscConfig+0xe4>
 800085a:	e014      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800085c:	f7ff fe8e 	bl	800057c <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000862:	e008      	b.n	8000876 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fe8a 	bl	800057c <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b64      	cmp	r3, #100	; 0x64
 8000870:	d901      	bls.n	8000876 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e1ec      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f0      	bne.n	8000864 <HAL_RCC_OscConfig+0x10c>
 8000882:	e000      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d063      	beq.n	800095a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00b      	beq.n	80008b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d11c      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d116      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e1c0      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4939      	ldr	r1, [pc, #228]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008de:	4313      	orrs	r3, r2
 80008e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	e03a      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d020      	beq.n	800092e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fe43 	bl	800057c <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008fa:	f7ff fe3f 	bl	800057c <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e1a1      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4927      	ldr	r1, [pc, #156]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000928:	4313      	orrs	r3, r2
 800092a:	600b      	str	r3, [r1, #0]
 800092c:	e015      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000934:	f7ff fe22 	bl	800057c <HAL_GetTick>
 8000938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fe1e 	bl	800057c <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e180      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f0      	bne.n	800093c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	2b00      	cmp	r3, #0
 8000964:	d03a      	beq.n	80009dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d019      	beq.n	80009a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000974:	f7ff fe02 	bl	800057c <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fdfe 	bl	800057c <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e160      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f0      	beq.n	800097c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 faa6 	bl	8000eec <RCC_Delay>
 80009a0:	e01c      	b.n	80009dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a8:	f7ff fde8 	bl	800057c <HAL_GetTick>
 80009ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ae:	e00f      	b.n	80009d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b0:	f7ff fde4 	bl	800057c <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d908      	bls.n	80009d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e146      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	42420000 	.word	0x42420000
 80009cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d0:	4b92      	ldr	r3, [pc, #584]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e9      	bne.n	80009b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80a6 	beq.w	8000b36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10d      	bne.n	8000a16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b88      	ldr	r3, [pc, #544]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a87      	ldr	r2, [pc, #540]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b85      	ldr	r3, [pc, #532]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a12:	2301      	movs	r3, #1
 8000a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a16:	4b82      	ldr	r3, [pc, #520]	; (8000c20 <HAL_RCC_OscConfig+0x4c8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d118      	bne.n	8000a54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a22:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <HAL_RCC_OscConfig+0x4c8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a7e      	ldr	r2, [pc, #504]	; (8000c20 <HAL_RCC_OscConfig+0x4c8>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fda5 	bl	800057c <HAL_GetTick>
 8000a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a36:	f7ff fda1 	bl	800057c <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b64      	cmp	r3, #100	; 0x64
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e103      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	4b75      	ldr	r3, [pc, #468]	; (8000c20 <HAL_RCC_OscConfig+0x4c8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f0      	beq.n	8000a36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <HAL_RCC_OscConfig+0x312>
 8000a5c:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a6e      	ldr	r2, [pc, #440]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6213      	str	r3, [r2, #32]
 8000a68:	e02d      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10c      	bne.n	8000a8c <HAL_RCC_OscConfig+0x334>
 8000a72:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a69      	ldr	r2, [pc, #420]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a66      	ldr	r2, [pc, #408]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a84:	f023 0304 	bic.w	r3, r3, #4
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	e01c      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d10c      	bne.n	8000aae <HAL_RCC_OscConfig+0x356>
 8000a94:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6213      	str	r3, [r2, #32]
 8000aa0:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6213      	str	r3, [r2, #32]
 8000aac:	e00b      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000aae:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a57      	ldr	r2, [pc, #348]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d015      	beq.n	8000afa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ace:	f7ff fd55 	bl	800057c <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	e00a      	b.n	8000aec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fd51 	bl	800057c <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e0b1      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0ee      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x37e>
 8000af8:	e014      	b.n	8000b24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fd3f 	bl	800057c <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fd3b 	bl	800057c <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e09b      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1ee      	bne.n	8000b02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d105      	bne.n	8000b36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8087 	beq.w	8000c4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b40:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d061      	beq.n	8000c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d146      	bne.n	8000be2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_RCC_OscConfig+0x4cc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fd0f 	bl	800057c <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b62:	f7ff fd0b 	bl	800057c <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e06d      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f0      	bne.n	8000b62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d108      	bne.n	8000b9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	4921      	ldr	r1, [pc, #132]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a19      	ldr	r1, [r3, #32]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	430b      	orrs	r3, r1
 8000bae:	491b      	ldr	r1, [pc, #108]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_RCC_OscConfig+0x4cc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bba:	f7ff fcdf 	bl	800057c <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fcdb 	bl	800057c <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e03d      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x46a>
 8000be0:	e035      	b.n	8000c4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_RCC_OscConfig+0x4cc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fcc8 	bl	800057c <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fcc4 	bl	800057c <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e026      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_RCC_OscConfig+0x4c4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x498>
 8000c0e:	e01e      	b.n	8000c4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d107      	bne.n	8000c28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e019      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40007000 	.word	0x40007000
 8000c24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_RCC_OscConfig+0x500>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d106      	bne.n	8000c4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d001      	beq.n	8000c4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e0d0      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c70:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d910      	bls.n	8000ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7e:	4b67      	ldr	r3, [pc, #412]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 0207 	bic.w	r2, r3, #7
 8000c86:	4965      	ldr	r1, [pc, #404]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d001      	beq.n	8000ca0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e0b8      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d020      	beq.n	8000cee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a58      	ldr	r2, [pc, #352]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cdc:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	494d      	ldr	r1, [pc, #308]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d040      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d107      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d115      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e07f      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d107      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e073      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e06b      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f023 0203 	bic.w	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4936      	ldr	r1, [pc, #216]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d4c:	f7ff fc16 	bl	800057c <HAL_GetTick>
 8000d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d52:	e00a      	b.n	8000d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d54:	f7ff fc12 	bl	800057c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e053      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 020c 	and.w	r2, r3, #12
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d1eb      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d210      	bcs.n	8000dac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 0207 	bic.w	r2, r3, #7
 8000d92:	4922      	ldr	r1, [pc, #136]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_RCC_ClockConfig+0x1c0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e032      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4916      	ldr	r1, [pc, #88]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d009      	beq.n	8000dea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	490e      	ldr	r1, [pc, #56]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dea:	f000 f821 	bl	8000e30 <HAL_RCC_GetSysClockFreq>
 8000dee:	4602      	mov	r2, r0
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_RCC_ClockConfig+0x1c4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <HAL_RCC_ClockConfig+0x1c8>)
 8000dfc:	5ccb      	ldrb	r3, [r1, r3]
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_RCC_ClockConfig+0x1cc>)
 8000e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_RCC_ClockConfig+0x1d0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb74 	bl	80004f8 <HAL_InitTick>

  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	08005bcc 	.word	0x08005bcc
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000014 	.word	0x20000014

08000e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_RCC_GetSysClockFreq+0xac>)
 8000e38:	1d3c      	adds	r4, r7, #4
 8000e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e40:	f240 2301 	movw	r3, #513	; 0x201
 8000e44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d002      	beq.n	8000e70 <HAL_RCC_GetSysClockFreq+0x40>
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d003      	beq.n	8000e76 <HAL_RCC_GetSysClockFreq+0x46>
 8000e6e:	e02b      	b.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e72:	623b      	str	r3, [r7, #32]
      break;
 8000e74:	e02b      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	0c9b      	lsrs	r3, r3, #18
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3328      	adds	r3, #40	; 0x28
 8000e80:	443b      	add	r3, r7
 8000e82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e86:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d012      	beq.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	0c5b      	lsrs	r3, r3, #17
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	3328      	adds	r3, #40	; 0x28
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ea4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eaa:	fb03 f202 	mul.w	r2, r3, r2
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	e004      	b.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	623b      	str	r3, [r7, #32]
      break;
 8000ec6:	e002      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eca:	623b      	str	r3, [r7, #32]
      break;
 8000ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ece:	6a3b      	ldr	r3, [r7, #32]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc90      	pop	{r4, r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	08005bbc 	.word	0x08005bbc
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	007a1200 	.word	0x007a1200
 8000ee8:	003d0900 	.word	0x003d0900

08000eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <RCC_Delay+0x34>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <RCC_Delay+0x38>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f08:	bf00      	nop
  }
  while (Delay --);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	60fa      	str	r2, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f9      	bne.n	8000f08 <RCC_Delay+0x1c>
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000000 	.word	0x20000000
 8000f24:	10624dd3 	.word	0x10624dd3

08000f28 <get_index_by_itfnum>:

CFG_TUSB_MEM_SECTION tu_static hidd_interface_t _hidd_itf[CFG_TUD_HID];

/*------------- Helpers -------------*/
static inline uint8_t get_index_by_itfnum(uint8_t itf_num)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e00e      	b.n	8000f56 <get_index_by_itfnum+0x2e>
	{
		if ( itf_num == _hidd_itf[i].itf_num ) return i;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <get_index_by_itfnum+0x40>)
 8000f3c:	212c      	movs	r1, #44	; 0x2c
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d101      	bne.n	8000f50 <get_index_by_itfnum+0x28>
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	e006      	b.n	8000f5e <get_index_by_itfnum+0x36>
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ed      	beq.n	8000f38 <get_index_by_itfnum+0x10>
	}

	return 0xFF;
 8000f5c:	23ff      	movs	r3, #255	; 0xff
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	2000008c 	.word	0x2000008c

08000f6c <hidd_init>:

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f803 	bl	8000f7c <hidd_reset>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <hidd_reset>:

void hidd_reset(uint8_t rhport)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8000f86:	222c      	movs	r2, #44	; 0x2c
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <hidd_reset+0x1c>)
 8000f8c:	f004 fdf2 	bl	8005b74 <memset>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c

08000f9c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
 {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b092      	sub	sp, #72	; 0x48
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d001      	beq.n	8000fb8 <hidd_open+0x1c>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e0c6      	b.n	8001146 <hidd_open+0x1aa>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len =
      (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	b29b      	uxth	r3, r3
  uint16_t const drv_len =
 8000fc6:	3312      	adds	r3, #18
 8000fc8:	873b      	strh	r3, [r7, #56]	; 0x38
  TU_ASSERT(max_len >= drv_len, 0);
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d20a      	bcs.n	8000fe8 <hidd_open+0x4c>
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <hidd_open+0x1b4>)
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d000      	beq.n	8000fe4 <hidd_open+0x48>
 8000fe2:	be00      	bkpt	0x0000
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e0ae      	b.n	8001146 <hidd_open+0x1aa>

  // Find available interface
  hidd_interface_t * p_hid = NULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t hid_id;
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000ff2:	e018      	b.n	8001026 <hidd_open+0x8a>
  {
    if ( _hidd_itf[hid_id].ep_in == 0 )
 8000ff4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ff8:	4a56      	ldr	r2, [pc, #344]	; (8001154 <hidd_open+0x1b8>)
 8000ffa:	212c      	movs	r1, #44	; 0x2c
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	3301      	adds	r3, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d108      	bne.n	800101c <hidd_open+0x80>
    {
      p_hid = &_hidd_itf[hid_id];
 800100a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100e:	222c      	movs	r2, #44	; 0x2c
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <hidd_open+0x1b8>)
 8001016:	4413      	add	r3, r2
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800101a:	e008      	b.n	800102e <hidd_open+0x92>
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 800101c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001020:	3301      	adds	r3, #1
 8001022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001026:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0e2      	beq.n	8000ff4 <hidd_open+0x58>
    }
  }
  TU_ASSERT(p_hid, 0);
 800102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10a      	bne.n	800104a <hidd_open+0xae>
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <hidd_open+0x1b4>)
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d000      	beq.n	8001046 <hidd_open+0xaa>
 8001044:	be00      	bkpt	0x0000
 8001046:	2300      	movs	r3, #0
 8001048:	e07d      	b.n	8001146 <hidd_open+0x1aa>

  uint8_t const *p_desc = (uint8_t const *) desc_itf;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
 800104e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001050:	61bb      	str	r3, [r7, #24]
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
 8001062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001064:	61fb      	str	r3, [r7, #28]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 800106c:	2b21      	cmp	r3, #33	; 0x21
 800106e:	d00a      	beq.n	8001086 <hidd_open+0xea>
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <hidd_open+0x1b4>)
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d000      	beq.n	8001082 <hidd_open+0xe6>
 8001080:	be00      	bkpt	0x0000
 8001082:	2300      	movs	r3, #0
 8001084:	e05f      	b.n	8001146 <hidd_open+0x1aa>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *) p_desc;
 8001086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	7919      	ldrb	r1, [r3, #4]
 80010a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010a6:	3302      	adds	r3, #2
 80010a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010aa:	3201      	adds	r2, #1
 80010ac:	79f8      	ldrb	r0, [r7, #7]
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2303      	movs	r3, #3
 80010b4:	460a      	mov	r2, r1
 80010b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b8:	f001 fb24 	bl	8002704 <usbd_open_edpt_pair>
 80010bc:	4603      	mov	r3, r0
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <hidd_open+0x142>
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <hidd_open+0x1b4>)
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d000      	beq.n	80010da <hidd_open+0x13e>
 80010d8:	be00      	bkpt	0x0000
 80010da:	2300      	movs	r3, #0
 80010dc:	e033      	b.n	8001146 <hidd_open+0x1aa>

  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	799b      	ldrb	r3, [r3, #6]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d103      	bne.n	80010ee <hidd_open+0x152>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	79da      	ldrb	r2, [r3, #7]
 80010ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ec:	70da      	strb	r2, [r3, #3]

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	2201      	movs	r2, #1
 80010f2:	711a      	strb	r2, [r3, #4]
  p_hid->itf_num       = desc_itf->bInterfaceNumber;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	789a      	ldrb	r2, [r3, #2]
 80010f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fa:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const*) p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80010fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	3307      	adds	r3, #7
 8001102:	60bb      	str	r3, [r7, #8]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110a:	80da      	strh	r2, [r3, #6]

  // Prepare for output endpoint
  if (p_hid->ep_out)
 800110c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d017      	beq.n	8001144 <hidd_open+0x1a8>
  {
    if ( !usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)) )
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	7899      	ldrb	r1, [r3, #2]
 8001118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800111a:	f103 0218 	add.w	r2, r3, #24
 800111e:	79f8      	ldrb	r0, [r7, #7]
 8001120:	2310      	movs	r3, #16
 8001122:	f001 fb9b 	bl	800285c <usbd_edpt_xfer>
 8001126:	4603      	mov	r3, r0
 8001128:	f083 0301 	eor.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <hidd_open+0x1a8>
    {
      TU_LOG_FAILED();
      TU_BREAKPOINT();
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <hidd_open+0x1b4>)
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d000      	beq.n	8001144 <hidd_open+0x1a8>
 8001142:	be00      	bkpt	0x0000
    }
  }

  return drv_len;
 8001144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
}
 8001146:	4618      	mov	r0, r3
 8001148:	3740      	adds	r7, #64	; 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000edf0 	.word	0xe000edf0
 8001154:	2000008c 	.word	0x2000008c

08001158 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b092      	sub	sp, #72	; 0x48
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	603a      	str	r2, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	460b      	mov	r3, r1
 8001166:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <hidd_control_xfer_cb+0x22>
 8001176:	2300      	movs	r3, #0
 8001178:	e1b6      	b.n	80014e8 <hidd_control_xfer_cb+0x390>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t) request->wIndex);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	889b      	ldrh	r3, [r3, #4]
 800117e:	b29b      	uxth	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fed0 	bl	8000f28 <get_index_by_itfnum>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 800118e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <hidd_control_xfer_cb+0x42>
 8001196:	2300      	movs	r3, #0
 8001198:	e1a6      	b.n	80014e8 <hidd_control_xfer_cb+0x390>

  hidd_interface_t* p_hid = &_hidd_itf[hid_itf];
 800119a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800119e:	222c      	movs	r2, #44	; 0x2c
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4a99      	ldr	r2, [pc, #612]	; (800140c <hidd_control_xfer_cb+0x2b4>)
 80011a6:	4413      	add	r3, r2
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d146      	bne.n	8001246 <hidd_control_xfer_cb+0xee>
  {
    //------------- STD Request -------------//
    if ( stage == CONTROL_STAGE_SETUP )
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f040 8193 	bne.w	80014e6 <hidd_control_xfer_cb+0x38e>
    {
      uint8_t const desc_type  = tu_u16_high(request->wValue);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80011c8:	8b7b      	ldrh	r3, [r7, #26]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      //uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d11c      	bne.n	8001216 <hidd_control_xfer_cb+0xbe>
 80011dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011e0:	2b21      	cmp	r3, #33	; 0x21
 80011e2:	d118      	bne.n	8001216 <hidd_control_xfer_cb+0xbe>
      {
        TU_VERIFY(p_hid->hid_descriptor);
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <hidd_control_xfer_cb+0x98>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e17b      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
        TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	79f8      	ldrb	r0, [r7, #7]
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	f001 fcf4 	bl	8002bec <tud_control_xfer>
 8001204:	4603      	mov	r3, r0
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 816a 	beq.w	80014e6 <hidd_control_xfer_cb+0x38e>
 8001212:	2300      	movs	r3, #0
 8001214:	e168      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
      }
      else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	2b06      	cmp	r3, #6
 800121c:	d111      	bne.n	8001242 <hidd_control_xfer_cb+0xea>
 800121e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001222:	2b22      	cmp	r3, #34	; 0x22
 8001224:	d10d      	bne.n	8001242 <hidd_control_xfer_cb+0xea>
      {
        uint8_t const * desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8001226:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8ba 	bl	80003a4 <tud_hid_descriptor_report_cb>
 8001230:	61f8      	str	r0, [r7, #28]
        tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_report, p_hid->report_desc_len);
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	88db      	ldrh	r3, [r3, #6]
 8001236:	79f8      	ldrb	r0, [r7, #7]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	f001 fcd6 	bl	8002bec <tud_control_xfer>
      {
 8001240:	e151      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      }
      else
      {
        return false; // stall unsupported request
 8001242:	2300      	movs	r3, #0
 8001244:	e150      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
      }
    }
  }
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b20      	cmp	r3, #32
 8001252:	f040 813b 	bne.w	80014cc <hidd_control_xfer_cb+0x374>
  {
    //------------- Class Specific Request -------------//
    switch( request->bRequest )
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	3b01      	subs	r3, #1
 800125c:	2b0a      	cmp	r3, #10
 800125e:	f200 8133 	bhi.w	80014c8 <hidd_control_xfer_cb+0x370>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <hidd_control_xfer_cb+0x110>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001295 	.word	0x08001295
 800126c:	08001461 	.word	0x08001461
 8001270:	08001477 	.word	0x08001477
 8001274:	080014c9 	.word	0x080014c9
 8001278:	080014c9 	.word	0x080014c9
 800127c:	080014c9 	.word	0x080014c9
 8001280:	080014c9 	.word	0x080014c9
 8001284:	080014c9 	.word	0x080014c9
 8001288:	08001359 	.word	0x08001359
 800128c:	08001415 	.word	0x08001415
 8001290:	0800148d 	.word	0x0800148d
    {
      case HID_REQ_CONTROL_GET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	2b01      	cmp	r3, #1
 8001298:	f040 811a 	bne.w	80014d0 <hidd_control_xfer_cb+0x378>
        {
          uint8_t const report_type = tu_u16_high(request->wValue);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	827b      	strh	r3, [r7, #18]
 80012a4:	8a7b      	ldrh	r3, [r7, #18]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          uint8_t const report_id   = tu_u16_low(request->wValue);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	885b      	ldrh	r3, [r3, #2]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80012b8:	8abb      	ldrh	r3, [r7, #20]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

          uint8_t* report_buf = p_hid->epin_buf;
 80012c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c2:	3308      	adds	r3, #8
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	88db      	ldrh	r3, [r3, #6]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	833b      	strh	r3, [r7, #24]
 80012ce:	2310      	movs	r3, #16
 80012d0:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80012d2:	8b3a      	ldrh	r2, [r7, #24]
 80012d4:	8afb      	ldrh	r3, [r7, #22]
 80012d6:	4293      	cmp	r3, r2
 80012d8:	bf28      	it	cs
 80012da:	4613      	movcs	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	877b      	strh	r3, [r7, #58]	; 0x3a

          uint16_t xferlen = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	873b      	strh	r3, [r7, #56]	; 0x38

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1) )
 80012e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00e      	beq.n	800130a <hidd_control_xfer_cb+0x1b2>
 80012ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d90b      	bls.n	800130a <hidd_control_xfer_cb+0x1b2>
          {
            *report_buf++ = report_id;
 80012f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80012f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012fc:	701a      	strb	r2, [r3, #0]
            req_len--;
 80012fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001300:	3b01      	subs	r3, #1
 8001302:	877b      	strh	r3, [r7, #58]	; 0x3a

            xferlen++;
 8001304:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001306:	3301      	adds	r3, #1
 8001308:	873b      	strh	r3, [r7, #56]	; 0x38
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 800130a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800130e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001312:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 8001316:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131c:	f7fe ffb4 	bl	8000288 <tud_hid_get_report_cb>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001326:	4413      	add	r3, r2
 8001328:	873b      	strh	r3, [r7, #56]	; 0x38
          TU_ASSERT( xferlen > 0 );
 800132a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <hidd_control_xfer_cb+0x1ee>
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <hidd_control_xfer_cb+0x2b8>)
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d000      	beq.n	8001342 <hidd_control_xfer_cb+0x1ea>
 8001340:	be00      	bkpt	0x0000
 8001342:	2300      	movs	r3, #0
 8001344:	e0d0      	b.n	80014e8 <hidd_control_xfer_cb+0x390>

          tud_control_xfer(rhport, request, p_hid->epin_buf, xferlen);
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	f103 0208 	add.w	r2, r3, #8
 800134c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800134e:	79f8      	ldrb	r0, [r7, #7]
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	f001 fc4b 	bl	8002bec <tud_control_xfer>
        }
      break;
 8001356:	e0bb      	b.n	80014d0 <hidd_control_xfer_cb+0x378>

      case  HID_REQ_CONTROL_SET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d111      	bne.n	8001382 <hidd_control_xfer_cb+0x22a>
        {
          TU_VERIFY(request->wLength <= sizeof(p_hid->epout_buf));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	88db      	ldrh	r3, [r3, #6]
 8001362:	b29b      	uxth	r3, r3
 8001364:	2b10      	cmp	r3, #16
 8001366:	d901      	bls.n	800136c <hidd_control_xfer_cb+0x214>
 8001368:	2300      	movs	r3, #0
 800136a:	e0bd      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
          tud_control_xfer(rhport, request, p_hid->epout_buf, request->wLength);
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	f103 0218 	add.w	r2, r3, #24
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	88db      	ldrh	r3, [r3, #6]
 8001376:	b29b      	uxth	r3, r3
 8001378:	79f8      	ldrb	r0, [r7, #7]
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	f001 fc36 	bl	8002bec <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
      break;
 8001380:	e0a8      	b.n	80014d4 <hidd_control_xfer_cb+0x37c>
        else if ( stage == CONTROL_STAGE_ACK )
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b03      	cmp	r3, #3
 8001386:	f040 80a5 	bne.w	80014d4 <hidd_control_xfer_cb+0x37c>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	b29b      	uxth	r3, r3
 8001390:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8001392:	897b      	ldrh	r3, [r7, #10]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          uint8_t const report_id   = tu_u16_low(request->wValue);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          uint8_t const* report_buf = p_hid->epout_buf;
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	3318      	adds	r3, #24
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	88db      	ldrh	r3, [r3, #6]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	823b      	strh	r3, [r7, #16]
 80013bc:	2310      	movs	r3, #16
 80013be:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80013c0:	8a3a      	ldrh	r2, [r7, #16]
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	bf28      	it	cs
 80013c8:	4613      	movcs	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	867b      	strh	r3, [r7, #50]	; 0x32
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0]) )
 80013ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00e      	beq.n	80013f4 <hidd_control_xfer_cb+0x29c>
 80013d6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d90b      	bls.n	80013f4 <hidd_control_xfer_cb+0x29c>
 80013dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d105      	bne.n	80013f4 <hidd_control_xfer_cb+0x29c>
            report_buf++;
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	3301      	adds	r3, #1
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
            report_len--;
 80013ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013f0:	3b01      	subs	r3, #1
 80013f2:	867b      	strh	r3, [r7, #50]	; 0x32
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80013f4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80013f8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80013fc:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 8001400:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	f7fe ff4f 	bl	80002a8 <tud_hid_set_report_cb>
      break;
 800140a:	e063      	b.n	80014d4 <hidd_control_xfer_cb+0x37c>
 800140c:	2000008c 	.word	0x2000008c
 8001410:	e000edf0 	.word	0xe000edf0

      case HID_REQ_CONTROL_SET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d15e      	bne.n	80014d8 <hidd_control_xfer_cb+0x380>
        {
          p_hid->idle_rate = tu_u16_high(request->wValue);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b29b      	uxth	r3, r3
 8001420:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8001422:	893b      	ldrh	r3, [r7, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	715a      	strb	r2, [r3, #5]
          if ( tud_hid_set_idle_cb )
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <hidd_control_xfer_cb+0x398>)
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00f      	beq.n	8001454 <hidd_control_xfer_cb+0x2fc>
          {
            // stall request if callback return false
            TU_VERIFY( tud_hid_set_idle_cb( hid_itf, p_hid->idle_rate) );
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	795a      	ldrb	r2, [r3, #5]
 8001438:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f3af 8000 	nop.w
 8001444:	4603      	mov	r3, r0
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <hidd_control_xfer_cb+0x2fc>
 8001450:	2300      	movs	r3, #0
 8001452:	e049      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
          }

          tud_control_status(rhport, request);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb55 	bl	8002b08 <tud_control_status>
        }
      break;
 800145e:	e03b      	b.n	80014d8 <hidd_control_xfer_cb+0x380>

      case HID_REQ_CONTROL_GET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d13a      	bne.n	80014dc <hidd_control_xfer_cb+0x384>
        {
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	1d5a      	adds	r2, r3, #5
 800146a:	79f8      	ldrb	r0, [r7, #7]
 800146c:	2301      	movs	r3, #1
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	f001 fbbc 	bl	8002bec <tud_control_xfer>
        }
      break;
 8001474:	e032      	b.n	80014dc <hidd_control_xfer_cb+0x384>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d131      	bne.n	80014e0 <hidd_control_xfer_cb+0x388>
        {
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 800147c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147e:	1d1a      	adds	r2, r3, #4
 8001480:	79f8      	ldrb	r0, [r7, #7]
 8001482:	2301      	movs	r3, #1
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	f001 fbb1 	bl	8002bec <tud_control_xfer>
        }
      break;
 800148a:	e029      	b.n	80014e0 <hidd_control_xfer_cb+0x388>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d105      	bne.n	800149e <hidd_control_xfer_cb+0x346>
        {
          tud_control_status(rhport, request);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fb36 	bl	8002b08 <tud_control_status>
          if (tud_hid_set_protocol_cb)
          {
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
          }
        }
      break;
 800149c:	e022      	b.n	80014e4 <hidd_control_xfer_cb+0x38c>
        else if ( stage == CONTROL_STAGE_ACK )
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d11f      	bne.n	80014e4 <hidd_control_xfer_cb+0x38c>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	885b      	ldrh	r3, [r3, #2]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	711a      	strb	r2, [r3, #4]
          if (tud_hid_set_protocol_cb)
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <hidd_control_xfer_cb+0x39c>)
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <hidd_control_xfer_cb+0x38c>
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	791a      	ldrb	r2, [r3, #4]
 80014ba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f3af 8000 	nop.w
      break;
 80014c6:	e00d      	b.n	80014e4 <hidd_control_xfer_cb+0x38c>

      default: return false; // stall unsupported request
 80014c8:	2300      	movs	r3, #0
 80014ca:	e00d      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
    }
  }else
  {
    return false; // stall unsupported request
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00b      	b.n	80014e8 <hidd_control_xfer_cb+0x390>
      break;
 80014d0:	bf00      	nop
 80014d2:	e008      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      break;
 80014d4:	bf00      	nop
 80014d6:	e006      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      break;
 80014d8:	bf00      	nop
 80014da:	e004      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      break;
 80014dc:	bf00      	nop
 80014de:	e002      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      break;
 80014e0:	bf00      	nop
 80014e2:	e000      	b.n	80014e6 <hidd_control_xfer_cb+0x38e>
      break;
 80014e4:	bf00      	nop
  }

  return true;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3740      	adds	r7, #64	; 0x40
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
	...

080014f8 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	460b      	mov	r3, r1
 8001506:	71bb      	strb	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t instance = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	75fb      	strb	r3, [r7, #23]
  hidd_interface_t * p_hid = _hidd_itf;
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <hidd_xfer_cb+0xf0>)
 8001512:	613b      	str	r3, [r7, #16]

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e013      	b.n	8001542 <hidd_xfer_cb+0x4a>
  {
    p_hid = &_hidd_itf[instance];
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	222c      	movs	r2, #44	; 0x2c
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <hidd_xfer_cb+0xf0>)
 8001524:	4413      	add	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
    if ( (ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in) ) break;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	79ba      	ldrb	r2, [r7, #6]
 800152e:	429a      	cmp	r2, r3
 8001530:	d00a      	beq.n	8001548 <hidd_xfer_cb+0x50>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	429a      	cmp	r2, r3
 800153a:	d005      	beq.n	8001548 <hidd_xfer_cb+0x50>
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	3301      	adds	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0e8      	beq.n	800151a <hidd_xfer_cb+0x22>
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <hidd_xfer_cb+0x6c>
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <hidd_xfer_cb+0xf4>)
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d000      	beq.n	8001560 <hidd_xfer_cb+0x68>
 800155e:	be00      	bkpt	0x0000
 8001560:	2300      	movs	r3, #0
 8001562:	e03d      	b.n	80015e0 <hidd_xfer_cb+0xe8>

  // Sent report successfully
  if (ep_addr == p_hid->ep_in)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	79ba      	ldrb	r2, [r7, #6]
 800156a:	429a      	cmp	r2, r3
 800156c:	d10c      	bne.n	8001588 <hidd_xfer_cb+0x90>
  {
    if (tud_hid_report_complete_cb)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <hidd_xfer_cb+0xf8>)
 8001570:	2b00      	cmp	r3, #0
 8001572:	d034      	beq.n	80015de <hidd_xfer_cb+0xe6>
    {
      tud_hid_report_complete_cb(instance, p_hid->epin_buf, (uint16_t) xferred_bytes);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f103 0108 	add.w	r1, r3, #8
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	4618      	mov	r0, r3
 8001582:	f3af 8000 	nop.w
 8001586:	e02a      	b.n	80015de <hidd_xfer_cb+0xe6>
    }
  }
  // Received report
  else if (ep_addr == p_hid->ep_out)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	79ba      	ldrb	r2, [r7, #6]
 800158e:	429a      	cmp	r2, r3
 8001590:	d125      	bne.n	80015de <hidd_xfer_cb+0xe6>
  {
    tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, (uint16_t) xferred_bytes);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f103 0218 	add.w	r2, r3, #24
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	7df8      	ldrb	r0, [r7, #23]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	f7fe fe7f 	bl	80002a8 <tud_hid_set_report_cb>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	7899      	ldrb	r1, [r3, #2]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f103 0218 	add.w	r2, r3, #24
 80015b4:	79f8      	ldrb	r0, [r7, #7]
 80015b6:	2310      	movs	r3, #16
 80015b8:	f001 f950 	bl	800285c <usbd_edpt_xfer>
 80015bc:	4603      	mov	r3, r0
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00a      	beq.n	80015de <hidd_xfer_cb+0xe6>
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <hidd_xfer_cb+0xf4>)
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d000      	beq.n	80015da <hidd_xfer_cb+0xe2>
 80015d8:	be00      	bkpt	0x0000
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <hidd_xfer_cb+0xe8>
  }

  return true;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000008c 	.word	0x2000008c
 80015ec:	e000edf0 	.word	0xe000edf0
 80015f0:	00000000 	.word	0x00000000

080015f4 <_ff_pull>:
  }
}

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	88fa      	ldrh	r2, [r7, #6]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	88c9      	ldrh	r1, [r1, #6]
 800160c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8001610:	b289      	uxth	r1, r1
 8001612:	fb01 f202 	mul.w	r2, r1, r2
 8001616:	1899      	adds	r1, r3, r2
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	88db      	ldrh	r3, [r3, #6]
 800161c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	68b8      	ldr	r0, [r7, #8]
 8001626:	f004 fa97 	bl	8005b58 <memcpy>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	80bb      	strh	r3, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8001644:	88ba      	ldrh	r2, [r7, #4]
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	4413      	add	r3, r2
 800164a:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800164c:	88ba      	ldrh	r2, [r7, #4]
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	429a      	cmp	r2, r3
 8001652:	d804      	bhi.n	800165e <advance_index+0x2c>
 8001654:	89fa      	ldrh	r2, [r7, #14]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	429a      	cmp	r2, r3
 800165c:	db08      	blt.n	8001670 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	425b      	negs	r3, r3
 8001666:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8001668:	89fa      	ldrh	r2, [r7, #14]
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8001670:	89fb      	ldrh	r3, [r7, #14]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	460b      	mov	r3, r1
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	4613      	mov	r3, r2
 8001690:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	847b      	strh	r3, [r7, #34]	; 0x22
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	843b      	strh	r3, [r7, #32]
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80016a0:	8c3a      	ldrh	r2, [r7, #32]
 80016a2:	8bfb      	ldrh	r3, [r7, #30]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d304      	bcc.n	80016b2 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80016a8:	8c3a      	ldrh	r2, [r7, #32]
 80016aa:	8bfb      	ldrh	r3, [r7, #30]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	e008      	b.n	80016c4 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80016b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	8c39      	ldrh	r1, [r7, #32]
 80016ba:	8bfb      	ldrh	r3, [r7, #30]
 80016bc:	1acb      	subs	r3, r1, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80016c4:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80016c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <_tu_fifo_peek+0x54>
 80016cc:	2300      	movs	r3, #0
 80016ce:	e037      	b.n	8001740 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	889b      	ldrh	r3, [r3, #4]
 80016d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d91b      	bls.n	8001712 <_tu_fifo_peek+0x96>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	8afa      	ldrh	r2, [r7, #22]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d305      	bcc.n	80016f8 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	889b      	ldrh	r3, [r3, #4]
 80016f0:	8afa      	ldrh	r2, [r7, #22]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	82bb      	strh	r3, [r7, #20]
 80016f6:	e004      	b.n	8001702 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	889a      	ldrh	r2, [r3, #4]
 80016fc:	8afb      	ldrh	r3, [r7, #22]
 80016fe:	4413      	add	r3, r2
 8001700:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	8aba      	ldrh	r2, [r7, #20]
 8001706:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8001708:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800170a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	889b      	ldrh	r3, [r3, #4]
 8001716:	827b      	strh	r3, [r7, #18]
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800171c:	e003      	b.n	8001726 <_tu_fifo_peek+0xaa>
 800171e:	8a3a      	ldrh	r2, [r7, #16]
 8001720:	8a7b      	ldrh	r3, [r7, #18]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	823b      	strh	r3, [r7, #16]
 8001726:	8a7a      	ldrh	r2, [r7, #18]
 8001728:	8a3b      	ldrh	r3, [r7, #16]
 800172a:	429a      	cmp	r2, r3
 800172c:	d9f7      	bls.n	800171e <_tu_fifo_peek+0xa2>
  return idx;
 800172e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8001730:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8001732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001734:	461a      	mov	r2, r3
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff ff5b 	bl	80015f4 <_ff_pull>

  return true;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	891b      	ldrh	r3, [r3, #8]
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	895b      	ldrh	r3, [r3, #10]
 800175c:	b29b      	uxth	r3, r3
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff8b 	bl	800167c <_tu_fifo_peek>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8898      	ldrh	r0, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	895b      	ldrh	r3, [r3, #10]
 8001772:	b29b      	uxth	r3, r3
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	b292      	uxth	r2, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff ff5a 	bl	8001632 <advance_index>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	8898      	ldrh	r0, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	895b      	ldrh	r3, [r3, #10]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff ff32 	bl	8001632 <advance_index>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	815a      	strh	r2, [r3, #10]
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 80017de:	b480      	push	{r7}
 80017e0:	b08b      	sub	sp, #44	; 0x2c
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  // Operate on temporary values in case they change in between
  uint16_t wr_idx = f->wr_idx;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	891b      	ldrh	r3, [r3, #8]
 80017ec:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t rd_idx = f->rd_idx;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	895b      	ldrh	r3, [r3, #10]
 80017f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	83bb      	strh	r3, [r7, #28]
 80017fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017fc:	837b      	strh	r3, [r7, #26]
 80017fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001800:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8001802:	8b7a      	ldrh	r2, [r7, #26]
 8001804:	8b3b      	ldrh	r3, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	d304      	bcc.n	8001814 <tu_fifo_get_read_info+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800180a:	8b7a      	ldrh	r2, [r7, #26]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	e008      	b.n	8001826 <tu_fifo_get_read_info+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8001814:	8bbb      	ldrh	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	8b79      	ldrh	r1, [r7, #26]
 800181c:	8b3b      	ldrh	r3, [r7, #24]
 800181e:	1acb      	subs	r3, r1, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8001826:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800182e:	429a      	cmp	r2, r3
 8001830:	d91b      	bls.n	800186a <tu_fifo_get_read_info+0x8c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001838:	827b      	strh	r3, [r7, #18]
  if ( wr_idx >= f->depth )
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	8a7a      	ldrh	r2, [r7, #18]
 8001840:	429a      	cmp	r2, r3
 8001842:	d305      	bcc.n	8001850 <tu_fifo_get_read_info+0x72>
    rd_idx = wr_idx - f->depth;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	889b      	ldrh	r3, [r3, #4]
 8001848:	8a7a      	ldrh	r2, [r7, #18]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	823b      	strh	r3, [r7, #16]
 800184e:	e004      	b.n	800185a <tu_fifo_get_read_info+0x7c>
    rd_idx = wr_idx + f->depth;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	889a      	ldrh	r2, [r3, #4]
 8001854:	8a7b      	ldrh	r3, [r7, #18]
 8001856:	4413      	add	r3, r2
 8001858:	823b      	strh	r3, [r7, #16]
  f->rd_idx = rd_idx;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	8a3a      	ldrh	r2, [r7, #16]
 800185e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8001860:	8a3b      	ldrh	r3, [r7, #16]
  {
    _ff_lock(f->mutex_rd);
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8001862:	84fb      	strh	r3, [r7, #38]	; 0x26
    _ff_unlock(f->mutex_rd);

    cnt = f->depth;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  // Check if fifo is empty
  if (cnt == 0)
 800186a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10c      	bne.n	800188a <tu_fifo_get_read_info+0xac>
  {
    info->len_lin  = 0;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
    return;
 8001888:	e045      	b.n	8001916 <tu_fifo_get_read_info+0x138>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	817b      	strh	r3, [r7, #10]
 8001890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001892:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 8001894:	e003      	b.n	800189e <tu_fifo_get_read_info+0xc0>
 8001896:	893a      	ldrh	r2, [r7, #8]
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	813b      	strh	r3, [r7, #8]
 800189e:	897a      	ldrh	r2, [r7, #10]
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d9f7      	bls.n	8001896 <tu_fifo_get_read_info+0xb8>
  return idx;
 80018a6:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80018a8:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	81fb      	strh	r3, [r7, #14]
 80018b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b2:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 80018b4:	e003      	b.n	80018be <tu_fifo_get_read_info+0xe0>
 80018b6:	89ba      	ldrh	r2, [r7, #12]
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	81bb      	strh	r3, [r7, #12]
 80018be:	89fa      	ldrh	r2, [r7, #14]
 80018c0:	89bb      	ldrh	r3, [r7, #12]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d9f7      	bls.n	80018b6 <tu_fifo_get_read_info+0xd8>
  return idx;
 80018c6:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80018c8:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start reading from
  info->ptr_lin = &f->buffer[rd_ptr];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	8bfb      	ldrh	r3, [r7, #30]
 80018d0:	441a      	add	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	605a      	str	r2, [r3, #4]

  // Check if there is a wrap around necessary
  if (wr_ptr > rd_ptr)
 80018d6:	8c3a      	ldrh	r2, [r7, #32]
 80018d8:	8bfb      	ldrh	r3, [r7, #30]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d909      	bls.n	80018f2 <tu_fifo_get_read_info+0x114>
  {
    // Non wrapping case
    info->len_lin  = cnt;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018e2:	801a      	strh	r2, [r3, #0]

    info->len_wrap = 0;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e011      	b.n	8001916 <tu_fifo_get_read_info+0x138>
  }
  else
  {
    info->len_lin  = f->depth - rd_ptr;   // Also the case if FIFO was full
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	889a      	ldrh	r2, [r3, #4]
 80018f6:	8bfb      	ldrh	r3, [r7, #30]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	801a      	strh	r2, [r3, #0]

    info->len_wrap = cnt - info->len_lin;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	b29a      	uxth	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	609a      	str	r2, [r3, #8]
  }
}
 8001916:	372c      	adds	r7, #44	; 0x2c
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <get_driver+0x58>)
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <get_driver+0x5c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	429a      	cmp	r2, r3
 8001938:	d208      	bcs.n	800194c <get_driver+0x2c>
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <get_driver+0x60>)
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	e010      	b.n	800196e <get_driver+0x4e>
    drvid -= _app_driver_count;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <get_driver+0x5c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <get_driver+0x4c>
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <get_driver+0x64>)
 8001968:	4413      	add	r3, r2
 800196a:	e000      	b.n	800196e <get_driver+0x4e>

  return NULL;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	00000000 	.word	0x00000000
 800197c:	200000f0 	.word	0x200000f0
 8001980:	200000ec 	.word	0x200000ec
 8001984:	08005d08 	.word	0x08005d08

08001988 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <tud_inited+0x1c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000019 	.word	0x20000019

080019a8 <tud_init>:

bool tud_init (uint8_t rhport)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 80019b2:	f7ff ffe9 	bl	8001988 <tud_inited>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <tud_init+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e053      	b.n	8001a68 <tud_init+0xc0>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80019c0:	2233      	movs	r2, #51	; 0x33
 80019c2:	2100      	movs	r1, #0
 80019c4:	482a      	ldr	r0, [pc, #168]	; (8001a70 <tud_init+0xc8>)
 80019c6:	f004 f8d5 	bl	8005b74 <memset>
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <tud_init+0xcc>)
 80019cc:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fedc 	bl	8001790 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80019d8:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80019da:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <tud_init+0xd0>)
 80019dc:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <tud_init+0xd0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <tud_init+0x54>
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <tud_init+0xd4>)
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d000      	beq.n	80019f8 <tud_init+0x50>
 80019f6:	be00      	bkpt	0x0000
 80019f8:	2300      	movs	r3, #0
 80019fa:	e035      	b.n	8001a68 <tud_init+0xc0>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <tud_init+0xd8>)
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8001a02:	4820      	ldr	r0, [pc, #128]	; (8001a84 <tud_init+0xdc>)
 8001a04:	f3af 8000 	nop.w
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <tud_init+0xe0>)
 8001a0c:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	77fb      	strb	r3, [r7, #31]
 8001a12:	e018      	b.n	8001a46 <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff82 	bl	8001920 <get_driver>
 8001a1c:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <tud_init+0x92>
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <tud_init+0xd4>)
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d000      	beq.n	8001a36 <tud_init+0x8e>
 8001a34:	be00      	bkpt	0x0000
 8001a36:	2300      	movs	r3, #0
 8001a38:	e016      	b.n	8001a68 <tud_init+0xc0>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	3301      	adds	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <tud_init+0xdc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	7ffa      	ldrb	r2, [r7, #31]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d9e1      	bls.n	8001a14 <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <tud_init+0xe4>)
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fa63 	bl	8002f24 <dcd_init>
  dcd_int_enable(rhport);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fadd 	bl	8003020 <dcd_int_enable>

  return true;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200000b8 	.word	0x200000b8
 8001a74:	2000001c 	.word	0x2000001c
 8001a78:	200001b4 	.word	0x200001b4
 8001a7c:	e000edf0 	.word	0xe000edf0
 8001a80:	00000000 	.word	0x00000000
 8001a84:	200000f0 	.word	0x200000f0
 8001a88:	200000ec 	.word	0x200000ec
 8001a8c:	20000019 	.word	0x20000019

08001a90 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
 8001a9e:	e019      	b.n	8001ad4 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff3c 	bl	8001920 <get_driver>
 8001aa8:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <configuration_reset+0x34>
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <configuration_reset+0x78>)
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01e      	beq.n	8001afe <configuration_reset+0x6e>
 8001ac0:	be00      	bkpt	0x0000
 8001ac2:	e01c      	b.n	8001afe <configuration_reset+0x6e>
    driver->reset(rhport);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4610      	mov	r0, r2
 8001acc:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	75fb      	strb	r3, [r7, #23]
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <configuration_reset+0x7c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	7dfa      	ldrb	r2, [r7, #23]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d9e0      	bls.n	8001aa0 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8001ade:	2233      	movs	r2, #51	; 0x33
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <configuration_reset+0x80>)
 8001ae4:	f004 f846 	bl	8005b74 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8001ae8:	2210      	movs	r2, #16
 8001aea:	21ff      	movs	r1, #255	; 0xff
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <configuration_reset+0x84>)
 8001aee:	f004 f841 	bl	8005b74 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8001af2:	2210      	movs	r2, #16
 8001af4:	21ff      	movs	r1, #255	; 0xff
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <configuration_reset+0x88>)
 8001af8:	f004 f83c 	bl	8005b74 <memset>
 8001afc:	e000      	b.n	8001b00 <configuration_reset+0x70>
    TU_ASSERT(driver, );
 8001afe:	bf00      	nop
}
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000edf0 	.word	0xe000edf0
 8001b0c:	200000f0 	.word	0x200000f0
 8001b10:	200000b8 	.word	0x200000b8
 8001b14:	200000bb 	.word	0x200000bb
 8001b18:	200000cb 	.word	0x200000cb

08001b1c <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ffb1 	bl	8001a90 <configuration_reset>
  usbd_control_reset();
 8001b2e:	f001 f8cd 	bl	8002ccc <usbd_control_reset>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b091      	sub	sp, #68	; 0x44
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8001b48:	f7ff ff1e 	bl	8001988 <tud_inited>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 812e 	bne.w	8001db6 <tud_task_ext+0x27a>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8001b5a:	4b9b      	ldr	r3, [pc, #620]	; (8001dc8 <tud_task_ext+0x28c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2000      	movs	r0, #0
 8001b74:	4798      	blx	r3
}
 8001b76:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fde2 	bl	8001748 <tu_fifo_read>
 8001b84:	4603      	mov	r3, r0
 8001b86:	77fb      	strb	r3, [r7, #31]
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2001      	movs	r0, #1
 8001b92:	4798      	blx	r3
}
 8001b94:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 810b 	bne.w	8001dba <tud_task_ext+0x27e>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8001ba4:	7a7b      	ldrb	r3, [r7, #9]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	2b07      	cmp	r3, #7
 8001baa:	f200 80ee 	bhi.w	8001d8a <tud_task_ext+0x24e>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <tud_task_ext+0x78>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bd5 	.word	0x08001bd5
 8001bb8:	08001be5 	.word	0x08001be5
 8001bbc:	08001d8b 	.word	0x08001d8b
 8001bc0:	08001d31 	.word	0x08001d31
 8001bc4:	08001d61 	.word	0x08001d61
 8001bc8:	08001bfb 	.word	0x08001bfb
 8001bcc:	08001c71 	.word	0x08001c71
 8001bd0:	08001d7b 	.word	0x08001d7b
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8001bd4:	7a3b      	ldrb	r3, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffa0 	bl	8001b1c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8001bdc:	7b3a      	ldrb	r2, [r7, #12]
 8001bde:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <tud_task_ext+0x290>)
 8001be0:	709a      	strb	r2, [r3, #2]
      break;
 8001be2:	e0e7      	b.n	8001db4 <tud_task_ext+0x278>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 8001be4:	7a3b      	ldrb	r3, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff98 	bl	8001b1c <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8001bec:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <tud_task_ext+0x294>)
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80d5 	beq.w	8001d9e <tud_task_ext+0x262>
 8001bf4:	f7fe fb32 	bl	800025c <tud_umount_cb>
      break;
 8001bf8:	e0d1      	b.n	8001d9e <tud_task_ext+0x262>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8001bfa:	4a74      	ldr	r2, [pc, #464]	; (8001dcc <tud_task_ext+0x290>)
 8001bfc:	7813      	ldrb	r3, [r2, #0]
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8001c04:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <tud_task_ext+0x290>)
 8001c06:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 8001c0a:	f36f 0300 	bfc	r3, #0, #1
 8001c0e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8001c12:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <tud_task_ext+0x290>)
 8001c14:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 8001c18:	f36f 0382 	bfc	r3, #2, #1
 8001c1c:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <tud_task_ext+0x290>)
 8001c22:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001c26:	f36f 0300 	bfc	r3, #0, #1
 8001c2a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8001c2e:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <tud_task_ext+0x290>)
 8001c30:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001c34:	f36f 0382 	bfc	r3, #2, #1
 8001c38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8001c3c:	7a3a      	ldrb	r2, [r7, #8]
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	3304      	adds	r3, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f000 f8e2 	bl	8001e10 <process_control_request>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a4 	beq.w	8001da2 <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8001c5a:	7a3b      	ldrb	r3, [r7, #8]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fa90 	bl	8005184 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8001c64:	7a3b      	ldrb	r3, [r7, #8]
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fa8b 	bl	8005184 <dcd_edpt_stall>
        }
      break;
 8001c6e:	e098      	b.n	8001da2 <tud_task_ext+0x266>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8001c70:	7b3b      	ldrb	r3, [r7, #12]
 8001c72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c7a:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8001c7c:	7dbb      	ldrb	r3, [r7, #22]
 8001c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c82:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8001c84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c8c:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	09db      	lsrs	r3, r3, #7
 8001c92:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8001c94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8001c98:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001c9c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ca0:	494a      	ldr	r1, [pc, #296]	; (8001dcc <tud_task_ext+0x290>)
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	440a      	add	r2, r1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f103 0220 	add.w	r2, r3, #32
 8001cac:	78d3      	ldrb	r3, [r2, #3]
 8001cae:	f36f 0300 	bfc	r3, #0, #1
 8001cb2:	70d3      	strb	r3, [r2, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8001cb4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001cb8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001cbc:	4943      	ldr	r1, [pc, #268]	; (8001dcc <tud_task_ext+0x290>)
 8001cbe:	0052      	lsls	r2, r2, #1
 8001cc0:	440a      	add	r2, r1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f103 0220 	add.w	r2, r3, #32
 8001cc8:	78d3      	ldrb	r3, [r2, #3]
 8001cca:	f36f 0382 	bfc	r3, #2, #1
 8001cce:	70d3      	strb	r3, [r2, #3]

        if ( 0 == epnum )
 8001cd0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <tud_task_ext+0x1ac>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8001cd8:	7a38      	ldrb	r0, [r7, #8]
 8001cda:	7b7a      	ldrb	r2, [r7, #13]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001ce2:	f001 f827 	bl	8002d34 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8001ce6:	e065      	b.n	8001db4 <tud_task_ext+0x278>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8001ce8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001cec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001cf0:	4936      	ldr	r1, [pc, #216]	; (8001dcc <tud_task_ext+0x290>)
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	440a      	add	r2, r1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3313      	adds	r3, #19
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fe0f 	bl	8001920 <get_driver>
 8001d02:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <tud_task_ext+0x1e2>
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <tud_task_ext+0x298>)
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d051      	beq.n	8001dbe <tud_task_ext+0x282>
 8001d1a:	be00      	bkpt	0x0000
 8001d1c:	e04f      	b.n	8001dbe <tud_task_ext+0x282>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	691c      	ldr	r4, [r3, #16]
 8001d22:	7a38      	ldrb	r0, [r7, #8]
 8001d24:	7b7a      	ldrb	r2, [r7, #13]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001d2c:	47a0      	blx	r4
      break;
 8001d2e:	e041      	b.n	8001db4 <tud_task_ext+0x278>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <tud_task_ext+0x290>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d033      	beq.n	8001da6 <tud_task_ext+0x26a>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <tud_task_ext+0x29c>)
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d030      	beq.n	8001da6 <tud_task_ext+0x26a>
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <tud_task_ext+0x290>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fa85 	bl	8000268 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8001d5e:	e022      	b.n	8001da6 <tud_task_ext+0x26a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <tud_task_ext+0x290>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01d      	beq.n	8001daa <tud_task_ext+0x26e>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <tud_task_ext+0x2a0>)
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01a      	beq.n	8001daa <tud_task_ext+0x26e>
 8001d74:	f7fe fa82 	bl	800027c <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8001d78:	e017      	b.n	8001daa <tud_task_ext+0x26e>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d016      	beq.n	8001dae <tud_task_ext+0x272>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4610      	mov	r0, r2
 8001d86:	4798      	blx	r3
      break;
 8001d88:	e011      	b.n	8001dae <tud_task_ext+0x272>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <tud_task_ext+0x298>)
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <tud_task_ext+0x276>
 8001d9a:	be00      	bkpt	0x0000
      break;
 8001d9c:	e009      	b.n	8001db2 <tud_task_ext+0x276>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e6db      	b.n	8001b5a <tud_task_ext+0x1e>
      break;
 8001da2:	bf00      	nop
 8001da4:	e6d9      	b.n	8001b5a <tud_task_ext+0x1e>
      break;
 8001da6:	bf00      	nop
 8001da8:	e6d7      	b.n	8001b5a <tud_task_ext+0x1e>
      break;
 8001daa:	bf00      	nop
 8001dac:	e6d5      	b.n	8001b5a <tud_task_ext+0x1e>
      break;
 8001dae:	bf00      	nop
 8001db0:	e6d3      	b.n	8001b5a <tud_task_ext+0x1e>
      break;
 8001db2:	bf00      	nop
  {
 8001db4:	e6d1      	b.n	8001b5a <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 8001db6:	bf00      	nop
 8001db8:	e002      	b.n	8001dc0 <tud_task_ext+0x284>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <tud_task_ext+0x284>
          TU_ASSERT(driver, );
 8001dbe:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8001dc0:	3744      	adds	r7, #68	; 0x44
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200001b4 	.word	0x200001b4
 8001dcc:	200000b8 	.word	0x200000b8
 8001dd0:	0800025d 	.word	0x0800025d
 8001dd4:	e000edf0 	.word	0xe000edf0
 8001dd8:	08000269 	.word	0x08000269
 8001ddc:	0800027d 	.word	0x0800027d

08001de0 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 ff76 	bl	8002ce4 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	7bf8      	ldrb	r0, [r7, #15]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	2101      	movs	r1, #1
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b094      	sub	sp, #80	; 0x50
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 ff61 	bl	8002ce4 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b60      	cmp	r3, #96	; 0x60
 8001e2e:	d10a      	bne.n	8001e46 <process_control_request+0x36>
 8001e30:	4ba4      	ldr	r3, [pc, #656]	; (80020c4 <process_control_request+0x2b4>)
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d000      	beq.n	8001e42 <process_control_request+0x32>
 8001e40:	be00      	bkpt	0x0000
 8001e42:	2300      	movs	r3, #0
 8001e44:	e247      	b.n	80022d6 <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d10f      	bne.n	8001e74 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8001e54:	4b9c      	ldr	r3, [pc, #624]	; (80020c8 <process_control_request+0x2b8>)
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <process_control_request+0x4e>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e23b      	b.n	80022d6 <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8001e5e:	489a      	ldr	r0, [pc, #616]	; (80020c8 <process_control_request+0x2b8>)
 8001e60:	f000 ff40 	bl	8002ce4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f3af 8000 	nop.w
 8001e70:	4603      	mov	r3, r0
 8001e72:	e230      	b.n	80022d6 <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f000 8177 	beq.w	8002172 <process_control_request+0x362>
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	f300 821a 	bgt.w	80022be <process_control_request+0x4ae>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <process_control_request+0x86>
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	f000 811e 	beq.w	80020d0 <process_control_request+0x2c0>
 8001e94:	e213      	b.n	80022be <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d123      	bne.n	8001eec <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	889b      	ldrh	r3, [r3, #4]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001eac:	8afb      	ldrh	r3, [r7, #22]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8001eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d901      	bls.n	8001ec0 <process_control_request+0xb0>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e20a      	b.n	80022d6 <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec4:	4a81      	ldr	r2, [pc, #516]	; (80020cc <process_control_request+0x2bc>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	78db      	ldrb	r3, [r3, #3]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fd28 	bl	8001920 <get_driver>
 8001ed0:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <process_control_request+0xcc>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e1fc      	b.n	80022d6 <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff7c 	bl	8001de0 <invoke_class_control>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	e1f4      	b.n	80022d6 <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <process_control_request+0x2b4>)
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d000      	beq.n	8001f0c <process_control_request+0xfc>
 8001f0a:	be00      	bkpt	0x0000
        return false;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e1e2      	b.n	80022d6 <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	f200 80c8 	bhi.w	80020aa <process_control_request+0x29a>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <process_control_request+0x110>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08002075 	.word	0x08002075
 8001f24:	08002051 	.word	0x08002051
 8001f28:	080020ab 	.word	0x080020ab
 8001f2c:	0800202d 	.word	0x0800202d
 8001f30:	080020ab 	.word	0x080020ab
 8001f34:	08001f49 	.word	0x08001f49
 8001f38:	08002013 	.word	0x08002013
 8001f3c:	080020ab 	.word	0x080020ab
 8001f40:	08001f6d 	.word	0x08001f6d
 8001f44:	08001f85 	.word	0x08001f85
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	f000 fed9 	bl	8002d00 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 f88a 	bl	8003074 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8001f60:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <process_control_request+0x2bc>)
 8001f62:	7813      	ldrb	r3, [r2, #0]
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	7013      	strb	r3, [r2, #0]
        break;
 8001f6a:	e0aa      	b.n	80020c2 <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8001f6c:	4b57      	ldr	r3, [pc, #348]	; (80020cc <process_control_request+0x2bc>)
 8001f6e:	785b      	ldrb	r3, [r3, #1]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8001f74:	f107 020f 	add.w	r2, r7, #15
 8001f78:	79f8      	ldrb	r0, [r7, #7]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	f000 fe35 	bl	8002bec <tud_control_xfer>
        }
        break;
 8001f82:	e09e      	b.n	80020c2 <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <process_control_request+0x2bc>)
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d030      	beq.n	8001ffe <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <process_control_request+0x2bc>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00f      	beq.n	8001fc6 <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fdab 	bl	8004b04 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <process_control_request+0x2bc>)
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fd69 	bl	8001a90 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8001fbe:	4a43      	ldr	r2, [pc, #268]	; (80020cc <process_control_request+0x2bc>)
 8001fc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fc4:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8001fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d017      	beq.n	8001ffe <process_control_request+0x1ee>
 8001fce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f986 	bl	80022e8 <process_set_config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <process_control_request+0x1ee>
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <process_control_request+0x2b4>)
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d000      	beq.n	8001ffa <process_control_request+0x1ea>
 8001ff8:	be00      	bkpt	0x0000
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e16b      	b.n	80022d6 <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <process_control_request+0x2bc>)
 8002000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002004:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	6839      	ldr	r1, [r7, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fd7c 	bl	8002b08 <tud_control_status>
        }
        break;
 8002010:	e057      	b.n	80020c2 <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fa72 	bl	8002500 <process_get_descriptor>
 800201c:	4603      	mov	r3, r0
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d04b      	beq.n	80020c0 <process_control_request+0x2b0>
 8002028:	2300      	movs	r3, #0
 800202a:	e154      	b.n	80022d6 <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	885b      	ldrh	r3, [r3, #2]
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <process_control_request+0x22a>
 8002036:	2300      	movs	r3, #0
 8002038:	e14d      	b.n	80022d6 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <process_control_request+0x2bc>)
 800203c:	7813      	ldrb	r3, [r2, #0]
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	6839      	ldr	r1, [r7, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fd5d 	bl	8002b08 <tud_control_status>
        break;
 800204e:	e038      	b.n	80020c2 <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	885b      	ldrh	r3, [r3, #2]
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <process_control_request+0x24e>
 800205a:	2300      	movs	r3, #0
 800205c:	e13b      	b.n	80022d6 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <process_control_request+0x2bc>)
 8002060:	7813      	ldrb	r3, [r2, #0]
 8002062:	f36f 03c3 	bfc	r3, #3, #1
 8002066:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fd4b 	bl	8002b08 <tud_control_status>
        break;
 8002072:	e026      	b.n	80020c2 <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <process_control_request+0x2bc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	b29b      	uxth	r3, r3
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <process_control_request+0x2bc>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	b29b      	uxth	r3, r3
 8002094:	4313      	orrs	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	79f8      	ldrb	r0, [r7, #7]
 80020a0:	2302      	movs	r3, #2
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	f000 fda2 	bl	8002bec <tud_control_xfer>
        }
        break;
 80020a8:	e00b      	b.n	80020c2 <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <process_control_request+0x2b4>)
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d000      	beq.n	80020bc <process_control_request+0x2ac>
 80020ba:	be00      	bkpt	0x0000
 80020bc:	2300      	movs	r3, #0
 80020be:	e10a      	b.n	80022d6 <process_control_request+0x4c6>
        break;
 80020c0:	bf00      	nop
      }
    break;
 80020c2:	e107      	b.n	80022d4 <process_control_request+0x4c4>
 80020c4:	e000edf0 	.word	0xe000edf0
 80020c8:	00000000 	.word	0x00000000
 80020cc:	200000b8 	.word	0x200000b8

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	82bb      	strh	r3, [r7, #20]
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80020e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d901      	bls.n	80020ec <process_control_request+0x2dc>
 80020e8:	2300      	movs	r3, #0
 80020ea:	e0f4      	b.n	80022d6 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80020ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020f0:	4a7b      	ldr	r2, [pc, #492]	; (80022e0 <process_control_request+0x4d0>)
 80020f2:	4413      	add	r3, r2
 80020f4:	78db      	ldrb	r3, [r3, #3]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fc12 	bl	8001920 <get_driver>
 80020fc:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <process_control_request+0x2f8>
 8002104:	2300      	movs	r3, #0
 8002106:	e0e6      	b.n	80022d6 <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe66 	bl	8001de0 <invoke_class_control>
 8002114:	4603      	mov	r3, r0
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d026      	beq.n	800216e <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <process_control_request+0x322>
 800212e:	2300      	movs	r3, #0
 8002130:	e0d1      	b.n	80022d6 <process_control_request+0x4c6>

        switch(p_request->bRequest)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	3b0a      	subs	r3, #10
 8002138:	2b01      	cmp	r3, #1
 800213a:	d816      	bhi.n	800216a <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800213c:	2000      	movs	r0, #0
 800213e:	f000 fdd1 	bl	8002ce4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d109      	bne.n	800215e <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800214e:	f107 020b 	add.w	r2, r7, #11
 8002152:	79f8      	ldrb	r0, [r7, #7]
 8002154:	2301      	movs	r3, #1
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	f000 fd48 	bl	8002bec <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 800215c:	e008      	b.n	8002170 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fcd0 	bl	8002b08 <tud_control_status>
          break;
 8002168:	e002      	b.n	8002170 <process_control_request+0x360>

          default: return false;
 800216a:	2300      	movs	r3, #0
 800216c:	e0b3      	b.n	80022d6 <process_control_request+0x4c6>
        }
      }
 800216e:	bf00      	nop
    }
    break;
 8002170:	e0b0      	b.n	80022d4 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	889b      	ldrh	r3, [r3, #4]
 8002176:	b29b      	uxth	r3, r3
 8002178:	823b      	strh	r3, [r7, #16]
 800217a:	8a3b      	ldrh	r3, [r7, #16]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002182:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002186:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8002188:	7cbb      	ldrb	r3, [r7, #18]
 800218a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218e:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8002190:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002194:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002198:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	09db      	lsrs	r3, r3, #7
 800219e:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80021a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80021a4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80021a8:	2b07      	cmp	r3, #7
 80021aa:	d90a      	bls.n	80021c2 <process_control_request+0x3b2>
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <process_control_request+0x4d4>)
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d000      	beq.n	80021be <process_control_request+0x3ae>
 80021bc:	be00      	bkpt	0x0000
 80021be:	2300      	movs	r3, #0
 80021c0:	e089      	b.n	80022d6 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80021c2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80021c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ca:	4945      	ldr	r1, [pc, #276]	; (80022e0 <process_control_request+0x4d0>)
 80021cc:	0052      	lsls	r2, r2, #1
 80021ce:	440a      	add	r2, r1
 80021d0:	4413      	add	r3, r2
 80021d2:	3313      	adds	r3, #19
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fba2 	bl	8001920 <get_driver>
 80021dc:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00c      	beq.n	8002206 <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80021ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <process_control_request+0x3e6>
 80021f2:	2300      	movs	r3, #0
 80021f4:	e06f      	b.n	80022d6 <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fdef 	bl	8001de0 <invoke_class_control>
 8002202:	4603      	mov	r3, r0
 8002204:	e067      	b.n	80022d6 <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d018      	beq.n	8002240 <process_control_request+0x430>
 800220e:	2b03      	cmp	r3, #3
 8002210:	dc48      	bgt.n	80022a4 <process_control_request+0x494>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <process_control_request+0x40c>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d012      	beq.n	8002240 <process_control_request+0x430>
 800221a:	e043      	b.n	80022a4 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800221c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fc27 	bl	8002a78 <usbd_edpt_stalled>
 800222a:	4603      	mov	r3, r0
 800222c:	b29b      	uxth	r3, r3
 800222e:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8002230:	f107 0208 	add.w	r2, r7, #8
 8002234:	79f8      	ldrb	r0, [r7, #7]
 8002236:	2302      	movs	r3, #2
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	f000 fcd7 	bl	8002bec <tud_control_xfer>
          }
          break;
 800223e:	e03d      	b.n	80022bc <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d112      	bne.n	8002270 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8002252:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fbc0 	bl	80029e0 <usbd_edpt_clear_stall>
 8002260:	e006      	b.n	8002270 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8002262:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fb6c 	bl	8002948 <usbd_edpt_stall>
              }
            }

            if (driver)
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d021      	beq.n	80022ba <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fdaf 	bl	8001de0 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8002282:	2000      	movs	r0, #0
 8002284:	f000 fd2e 	bl	8002ce4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <process_control_request+0x4d0>)
 800228a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d110      	bne.n	80022ba <process_control_request+0x4aa>
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fc33 	bl	8002b08 <tud_control_status>
            }
          }
          break;
 80022a2:	e00a      	b.n	80022ba <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <process_control_request+0x4d4>)
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
 80022a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d000      	beq.n	80022b6 <process_control_request+0x4a6>
 80022b4:	be00      	bkpt	0x0000
 80022b6:	2300      	movs	r3, #0
 80022b8:	e00d      	b.n	80022d6 <process_control_request+0x4c6>
          break;
 80022ba:	bf00      	nop
        }
      }
    }
    break;
 80022bc:	e00a      	b.n	80022d4 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <process_control_request+0x4d4>)
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <process_control_request+0x4c0>
 80022ce:	be00      	bkpt	0x0000
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <process_control_request+0x4c6>
  }

  return true;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3750      	adds	r7, #80	; 0x50
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200000b8 	.word	0x200000b8
 80022e4:	e000edf0 	.word	0xe000edf0

080022e8 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	; 0x50
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	460a      	mov	r2, r1
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f85e 	bl	80003c0 <tud_descriptor_configuration_cb>
 8002304:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <process_set_config+0x2c>
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d00a      	beq.n	800232a <process_set_config+0x42>
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <process_set_config+0x204>)
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d000      	beq.n	8002326 <process_set_config+0x3e>
 8002324:	be00      	bkpt	0x0000
 8002326:	2300      	movs	r3, #0
 8002328:	e0db      	b.n	80024e2 <process_set_config+0x1fa>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800232a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232c:	79db      	ldrb	r3, [r3, #7]
 800232e:	115b      	asrs	r3, r3, #5
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	b2d9      	uxtb	r1, r3
 8002336:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <process_set_config+0x208>)
 8002338:	7813      	ldrb	r3, [r2, #0]
 800233a:	f361 1304 	bfi	r3, r1, #4, #1
 800233e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	79db      	ldrb	r3, [r3, #7]
 8002344:	119b      	asrs	r3, r3, #6
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	b2d9      	uxtb	r1, r3
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <process_set_config+0x208>)
 800234e:	7813      	ldrb	r3, [r2, #0]
 8002350:	f361 1345 	bfi	r3, r1, #5, #1
 8002354:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8002356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002358:	3309      	adds	r3, #9
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	885b      	ldrh	r3, [r3, #2]
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002366:	4413      	add	r3, r2
 8002368:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 800236a:	e0af      	b.n	80024cc <process_set_config+0x1e4>
  {
    uint8_t assoc_itf_count = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002374:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800237c:	2b0b      	cmp	r3, #11
 800237e:	d10f      	bne.n	80023a0 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	78db      	ldrb	r3, [r3, #3]
 8002388:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a2:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d00a      	beq.n	80023c4 <process_set_config+0xdc>
 80023ae:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <process_set_config+0x204>)
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d000      	beq.n	80023c0 <process_set_config+0xd8>
 80023be:	be00      	bkpt	0x0000
 80023c0:	2300      	movs	r3, #0
 80023c2:	e08e      	b.n	80024e2 <process_set_config+0x1fa>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80023c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80023d6:	e062      	b.n	800249e <process_set_config+0x1b6>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80023d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fa9f 	bl	8001920 <get_driver>
 80023e2:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <process_set_config+0x118>
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <process_set_config+0x204>)
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d000      	beq.n	80023fc <process_set_config+0x114>
 80023fa:	be00      	bkpt	0x0000
 80023fc:	2300      	movs	r3, #0
 80023fe:	e070      	b.n	80024e2 <process_set_config+0x1fa>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002406:	79f8      	ldrb	r0, [r7, #7]
 8002408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240a:	4798      	blx	r3
 800240c:	4603      	mov	r3, r0
 800240e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8002410:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002412:	2b08      	cmp	r3, #8
 8002414:	d93e      	bls.n	8002494 <process_set_config+0x1ac>
 8002416:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800241a:	429a      	cmp	r2, r3
 800241c:	d83a      	bhi.n	8002494 <process_set_config+0x1ac>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002424:	e024      	b.n	8002470 <process_set_config+0x188>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	789a      	ldrb	r2, [r3, #2]
 800242a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800242e:	4413      	add	r3, r2
 8002430:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8002434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002438:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <process_set_config+0x208>)
 800243a:	4413      	add	r3, r2
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	2bff      	cmp	r3, #255	; 0xff
 8002440:	d00a      	beq.n	8002458 <process_set_config+0x170>
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <process_set_config+0x204>)
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d000      	beq.n	8002454 <process_set_config+0x16c>
 8002452:	be00      	bkpt	0x0000
 8002454:	2300      	movs	r3, #0
 8002456:	e044      	b.n	80024e2 <process_set_config+0x1fa>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8002458:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <process_set_config+0x208>)
 800245e:	4413      	add	r3, r2
 8002460:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002464:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002466:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800246a:	3301      	adds	r3, #1
 800246c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002470:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002474:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002478:	429a      	cmp	r2, r3
 800247a:	d3d4      	bcc.n	8002426 <process_set_config+0x13e>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800247c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002480:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002484:	481b      	ldr	r0, [pc, #108]	; (80024f4 <process_set_config+0x20c>)
 8002486:	f003 faff 	bl	8005a88 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800248a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800248c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800248e:	4413      	add	r3, r2
 8002490:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8002492:	e00a      	b.n	80024aa <process_set_config+0x1c2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8002494:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002498:	3301      	adds	r3, #1
 800249a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <process_set_config+0x210>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d996      	bls.n	80023d8 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <process_set_config+0x210>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d90a      	bls.n	80024cc <process_set_config+0x1e4>
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <process_set_config+0x204>)
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d000      	beq.n	80024c8 <process_set_config+0x1e0>
 80024c6:	be00      	bkpt	0x0000
 80024c8:	2300      	movs	r3, #0
 80024ca:	e00a      	b.n	80024e2 <process_set_config+0x1fa>
  while( p_desc < desc_end )
 80024cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f4ff af4b 	bcc.w	800236c <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <process_set_config+0x214>)
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <process_set_config+0x1f8>
 80024dc:	f7fd feb8 	bl	8000250 <tud_mount_cb>

  return true;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3750      	adds	r7, #80	; 0x50
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000edf0 	.word	0xe000edf0
 80024f0:	200000b8 	.word	0x200000b8
 80024f4:	200000cb 	.word	0x200000cb
 80024f8:	200000f0 	.word	0x200000f0
 80024fc:	08000251 	.word	0x08000251

08002500 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b094      	sub	sp, #80	; 0x50
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	885b      	ldrh	r3, [r3, #2]
 8002510:	b29b      	uxth	r3, r3
 8002512:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8002514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	885b      	ldrh	r3, [r3, #2]
 8002524:	b29b      	uxth	r3, r3
 8002526:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8002530:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002534:	3b01      	subs	r3, #1
 8002536:	2b0e      	cmp	r3, #14
 8002538:	f200 80bc 	bhi.w	80026b4 <process_get_descriptor+0x1b4>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <process_get_descriptor+0x44>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002581 	.word	0x08002581
 8002548:	080025e5 	.word	0x080025e5
 800254c:	0800264d 	.word	0x0800264d
 8002550:	080026b5 	.word	0x080026b5
 8002554:	080026b5 	.word	0x080026b5
 8002558:	08002683 	.word	0x08002683
 800255c:	080025e5 	.word	0x080025e5
 8002560:	080026b5 	.word	0x080026b5
 8002564:	080026b5 	.word	0x080026b5
 8002568:	080026b5 	.word	0x080026b5
 800256c:	080026b5 	.word	0x080026b5
 8002570:	080026b5 	.word	0x080026b5
 8002574:	080026b5 	.word	0x080026b5
 8002578:	080026b5 	.word	0x080026b5
 800257c:	08002597 	.word	0x08002597
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8002580:	f7fd ff06 	bl	8000390 <tud_descriptor_device_cb>
 8002584:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8002586:	79f8      	ldrb	r0, [r7, #7]
 8002588:	2312      	movs	r3, #18
 800258a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	f000 fb2d 	bl	8002bec <tud_control_xfer>
 8002592:	4603      	mov	r3, r0
 8002594:	e08f      	b.n	80026b6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <process_get_descriptor+0x1c0>)
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <process_get_descriptor+0xa0>
 800259c:	2300      	movs	r3, #0
 800259e:	e08a      	b.n	80026b6 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80025a0:	f3af 8000 	nop.w
 80025a4:	4603      	mov	r3, r0
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 80025a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <process_get_descriptor+0xc4>
 80025ae:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <process_get_descriptor+0x1c4>)
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d000      	beq.n	80025c0 <process_get_descriptor+0xc0>
 80025be:	be00      	bkpt	0x0000
 80025c0:	2300      	movs	r3, #0
 80025c2:	e078      	b.n	80026b6 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	3302      	adds	r3, #2
 80025c8:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80025d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025d8:	79f8      	ldrb	r0, [r7, #7]
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	f000 fb06 	bl	8002bec <tud_control_xfer>
 80025e0:	4603      	mov	r3, r0
 80025e2:	e068      	b.n	80026b6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80025e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d107      	bne.n	80025fc <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80025ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fee5 	bl	80003c0 <tud_descriptor_configuration_cb>
 80025f6:	4603      	mov	r3, r0
 80025f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025fa:	e00b      	b.n	8002614 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80025fc:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <process_get_descriptor+0x1c8>)
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <process_get_descriptor+0x106>
 8002602:	2300      	movs	r3, #0
 8002604:	e057      	b.n	80026b6 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8002606:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800260a:	4618      	mov	r0, r3
 800260c:	f3af 8000 	nop.w
 8002610:	4603      	mov	r3, r0
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <process_get_descriptor+0x130>
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <process_get_descriptor+0x1c4>)
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d000      	beq.n	800262c <process_get_descriptor+0x12c>
 800262a:	be00      	bkpt	0x0000
 800262c:	2300      	movs	r3, #0
 800262e:	e042      	b.n	80026b6 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	3302      	adds	r3, #2
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800263c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800263e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002640:	79f8      	ldrb	r0, [r7, #7]
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	f000 fad2 	bl	8002bec <tud_control_xfer>
 8002648:	4603      	mov	r3, r0
 800264a:	e034      	b.n	80026b6 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	889b      	ldrh	r3, [r3, #4]
 8002650:	b29a      	uxth	r2, r3
 8002652:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd febf 	bl	80003dc <tud_descriptor_string_cb>
 800265e:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <process_get_descriptor+0x16a>
 8002666:	2300      	movs	r3, #0
 8002668:	e025      	b.n	80026b6 <process_get_descriptor+0x1b6>
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	61bb      	str	r3, [r7, #24]
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8002672:	b29b      	uxth	r3, r3
 8002674:	79f8      	ldrb	r0, [r7, #7]
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	f000 fab7 	bl	8002bec <tud_control_xfer>
 800267e:	4603      	mov	r3, r0
 8002680:	e019      	b.n	80026b6 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <process_get_descriptor+0x1cc>)
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <process_get_descriptor+0x18c>
 8002688:	2300      	movs	r3, #0
 800268a:	e014      	b.n	80026b6 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800268c:	f3af 8000 	nop.w
 8002690:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <process_get_descriptor+0x19c>
 8002698:	2300      	movs	r3, #0
 800269a:	e00c      	b.n	80026b6 <process_get_descriptor+0x1b6>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	79f8      	ldrb	r0, [r7, #7]
 80026a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	f000 fa9e 	bl	8002bec <tud_control_xfer>
 80026b0:	4603      	mov	r3, r0
 80026b2:	e000      	b.n	80026b6 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 80026b4:	2300      	movs	r3, #0
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3750      	adds	r7, #80	; 0x50
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	00000000 	.word	0x00000000
 80026c4:	e000edf0 	.word	0xe000edf0
	...

080026d0 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <usbd_int_set+0x30>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fc9b 	bl	8003020 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80026ea:	e004      	b.n	80026f6 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <usbd_int_set+0x30>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fcad 	bl	8003050 <dcd_int_disable>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000019 	.word	0x20000019

08002704 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	4611      	mov	r1, r2
 800270e:	461a      	mov	r2, r3
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	460b      	mov	r3, r1
 8002716:	71bb      	strb	r3, [r7, #6]
 8002718:	4613      	mov	r3, r2
 800271a:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	e04d      	b.n	80027be <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	2b05      	cmp	r3, #5
 800272c:	d108      	bne.n	8002740 <usbd_open_edpt_pair+0x3c>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	78db      	ldrb	r3, [r3, #3]
 8002732:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	797b      	ldrb	r3, [r7, #5]
 800273c:	4293      	cmp	r3, r2
 800273e:	d00a      	beq.n	8002756 <usbd_open_edpt_pair+0x52>
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <usbd_open_edpt_pair+0xcc>)
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d000      	beq.n	8002752 <usbd_open_edpt_pair+0x4e>
 8002750:	be00      	bkpt	0x0000
 8002752:	2300      	movs	r3, #0
 8002754:	e038      	b.n	80027c8 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f83a 	bl	80027d4 <usbd_edpt_open>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <usbd_open_edpt_pair+0x7e>
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <usbd_open_edpt_pair+0xcc>)
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d000      	beq.n	800277e <usbd_open_edpt_pair+0x7a>
 800277c:	be00      	bkpt	0x0000
 800277e:	2300      	movs	r3, #0
 8002780:	e022      	b.n	80027c8 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	789b      	ldrb	r3, [r3, #2]
 8002786:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	09db      	lsrs	r3, r3, #7
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d104      	bne.n	800279c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	789a      	ldrb	r2, [r3, #2]
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e003      	b.n	80027a4 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	789a      	ldrb	r2, [r3, #2]
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80027b6:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	79bb      	ldrb	r3, [r7, #6]
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	429a      	cmp	r2, r3
 80027c4:	dbad      	blt.n	8002722 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	e000edf0 	.word	0xe000edf0

080027d4 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <usbd_edpt_open+0x7c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b07      	cmp	r3, #7
 80027f6:	d90a      	bls.n	800280e <usbd_edpt_open+0x3a>
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <usbd_edpt_open+0x80>)
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d000      	beq.n	800280a <usbd_edpt_open+0x36>
 8002808:	be00      	bkpt	0x0000
 800280a:	2300      	movs	r3, #0
 800280c:	e01c      	b.n	8002848 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <usbd_edpt_open+0x84>)
 8002810:	789b      	ldrb	r3, [r3, #2]
 8002812:	4619      	mov	r1, r3
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	f003 f8bb 	bl	8005990 <tu_edpt_validate>
 800281a:	4603      	mov	r3, r0
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <usbd_edpt_open+0x68>
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <usbd_edpt_open+0x80>)
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d000      	beq.n	8002838 <usbd_edpt_open+0x64>
 8002836:	be00      	bkpt	0x0000
 8002838:	2300      	movs	r3, #0
 800283a:	e005      	b.n	8002848 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 ff17 	bl	8003674 <dcd_edpt_open>
 8002846:	4603      	mov	r3, r0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000019 	.word	0x20000019
 8002854:	e000edf0 	.word	0xe000edf0
 8002858:	200000b8 	.word	0x200000b8

0800285c <usbd_edpt_xfer>:

  return tu_edpt_release(ep_state, _usbd_mutex);
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	603a      	str	r2, [r7, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	460b      	mov	r3, r1
 800286c:	71bb      	strb	r3, [r7, #6]
 800286e:	4613      	mov	r3, r2
 8002870:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <usbd_edpt_xfer+0xe0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	72bb      	strb	r3, [r7, #10]
 800287c:	7abb      	ldrb	r3, [r7, #10]
 800287e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002882:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8002884:	75fb      	strb	r3, [r7, #23]
 8002886:	79bb      	ldrb	r3, [r7, #6]
 8002888:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	09db      	lsrs	r3, r3, #7
 800288e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8002890:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8002892:	7dfa      	ldrb	r2, [r7, #23]
 8002894:	7dbb      	ldrb	r3, [r7, #22]
 8002896:	492a      	ldr	r1, [pc, #168]	; (8002940 <usbd_edpt_xfer+0xe4>)
 8002898:	0052      	lsls	r2, r2, #1
 800289a:	440a      	add	r2, r1
 800289c:	4413      	add	r3, r2
 800289e:	3320      	adds	r3, #32
 80028a0:	78db      	ldrb	r3, [r3, #3]
 80028a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <usbd_edpt_xfer+0x66>
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <usbd_edpt_xfer+0xe8>)
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d000      	beq.n	80028be <usbd_edpt_xfer+0x62>
 80028bc:	be00      	bkpt	0x0000
 80028be:	2300      	movs	r3, #0
 80028c0:	e038      	b.n	8002934 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 80028c2:	7dfa      	ldrb	r2, [r7, #23]
 80028c4:	7dbb      	ldrb	r3, [r7, #22]
 80028c6:	491e      	ldr	r1, [pc, #120]	; (8002940 <usbd_edpt_xfer+0xe4>)
 80028c8:	0052      	lsls	r2, r2, #1
 80028ca:	440a      	add	r2, r1
 80028cc:	4413      	add	r3, r2
 80028ce:	f103 0220 	add.w	r2, r3, #32
 80028d2:	78d3      	ldrb	r3, [r2, #3]
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	70d3      	strb	r3, [r2, #3]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80028da:	88bb      	ldrh	r3, [r7, #4]
 80028dc:	79b9      	ldrb	r1, [r7, #6]
 80028de:	79f8      	ldrb	r0, [r7, #7]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f002 fa53 	bl	8004d8c <dcd_edpt_xfer>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <usbd_edpt_xfer+0x94>
  {
    return true;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e021      	b.n	8002934 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80028f0:	7dfa      	ldrb	r2, [r7, #23]
 80028f2:	7dbb      	ldrb	r3, [r7, #22]
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <usbd_edpt_xfer+0xe4>)
 80028f6:	0052      	lsls	r2, r2, #1
 80028f8:	440a      	add	r2, r1
 80028fa:	4413      	add	r3, r2
 80028fc:	f103 0220 	add.w	r2, r3, #32
 8002900:	78d3      	ldrb	r3, [r2, #3]
 8002902:	f36f 0300 	bfc	r3, #0, #1
 8002906:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8002908:	7dfa      	ldrb	r2, [r7, #23]
 800290a:	7dbb      	ldrb	r3, [r7, #22]
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <usbd_edpt_xfer+0xe4>)
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	440a      	add	r2, r1
 8002912:	4413      	add	r3, r2
 8002914:	f103 0220 	add.w	r2, r3, #32
 8002918:	78d3      	ldrb	r3, [r2, #3]
 800291a:	f36f 0382 	bfc	r3, #2, #1
 800291e:	70d3      	strb	r3, [r2, #3]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <usbd_edpt_xfer+0xe8>)
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d000      	beq.n	8002932 <usbd_edpt_xfer+0xd6>
 8002930:	be00      	bkpt	0x0000
    return false;
 8002932:	2300      	movs	r3, #0
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000019 	.word	0x20000019
 8002940:	200000b8 	.word	0x200000b8
 8002944:	e000edf0 	.word	0xe000edf0

08002948 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	460a      	mov	r2, r1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	4613      	mov	r3, r2
 8002956:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8002958:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <usbd_edpt_stall+0x90>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	79bb      	ldrb	r3, [r7, #6]
 8002960:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8002962:	7b3b      	ldrb	r3, [r7, #12]
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	79bb      	ldrb	r3, [r7, #6]
 800296e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8002970:	7b7b      	ldrb	r3, [r7, #13]
 8002972:	09db      	lsrs	r3, r3, #7
 8002974:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8002976:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	7bbb      	ldrb	r3, [r7, #14]
 800297c:	4917      	ldr	r1, [pc, #92]	; (80029dc <usbd_edpt_stall+0x94>)
 800297e:	0052      	lsls	r2, r2, #1
 8002980:	440a      	add	r2, r1
 8002982:	4413      	add	r3, r2
 8002984:	3320      	adds	r3, #32
 8002986:	78db      	ldrb	r3, [r3, #3]
 8002988:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11d      	bne.n	80029ce <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8002992:	79ba      	ldrb	r2, [r7, #6]
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fbf3 	bl	8005184 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	490e      	ldr	r1, [pc, #56]	; (80029dc <usbd_edpt_stall+0x94>)
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	440a      	add	r2, r1
 80029a8:	4413      	add	r3, r2
 80029aa:	f103 0220 	add.w	r2, r3, #32
 80029ae:	78d3      	ldrb	r3, [r2, #3]
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	4908      	ldr	r1, [pc, #32]	; (80029dc <usbd_edpt_stall+0x94>)
 80029bc:	0052      	lsls	r2, r2, #1
 80029be:	440a      	add	r2, r1
 80029c0:	4413      	add	r3, r2
 80029c2:	f103 0220 	add.w	r2, r3, #32
 80029c6:	78d3      	ldrb	r3, [r2, #3]
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	70d3      	strb	r3, [r2, #3]
  }
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000019 	.word	0x20000019
 80029dc:	200000b8 	.word	0x200000b8

080029e0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	460a      	mov	r2, r1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <usbd_edpt_clear_stall+0x90>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	79bb      	ldrb	r3, [r7, #6]
 80029f8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80029fa:	7b3b      	ldrb	r3, [r7, #12]
 80029fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a00:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	79bb      	ldrb	r3, [r7, #6]
 8002a06:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8002a08:	7b7b      	ldrb	r3, [r7, #13]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8002a0e:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	4917      	ldr	r1, [pc, #92]	; (8002a74 <usbd_edpt_clear_stall+0x94>)
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	440a      	add	r2, r1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3320      	adds	r3, #32
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01d      	beq.n	8002a66 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8002a2a:	79ba      	ldrb	r2, [r7, #6]
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fc87 	bl	8005344 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	490e      	ldr	r1, [pc, #56]	; (8002a74 <usbd_edpt_clear_stall+0x94>)
 8002a3c:	0052      	lsls	r2, r2, #1
 8002a3e:	440a      	add	r2, r1
 8002a40:	4413      	add	r3, r2
 8002a42:	f103 0220 	add.w	r2, r3, #32
 8002a46:	78d3      	ldrb	r3, [r2, #3]
 8002a48:	f36f 0341 	bfc	r3, #1, #1
 8002a4c:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <usbd_edpt_clear_stall+0x94>)
 8002a54:	0052      	lsls	r2, r2, #1
 8002a56:	440a      	add	r2, r1
 8002a58:	4413      	add	r3, r2
 8002a5a:	f103 0220 	add.w	r2, r3, #32
 8002a5e:	78d3      	ldrb	r3, [r2, #3]
 8002a60:	f36f 0300 	bfc	r3, #0, #1
 8002a64:	70d3      	strb	r3, [r2, #3]
  }
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000019 	.word	0x20000019
 8002a74:	200000b8 	.word	0x200000b8

08002a78 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460a      	mov	r2, r1
 8002a82:	71fb      	strb	r3, [r7, #7]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71bb      	strb	r3, [r7, #6]
 8002a88:	79bb      	ldrb	r3, [r7, #6]
 8002a8a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a92:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8002a9a:	7b7b      	ldrb	r3, [r7, #13]
 8002a9c:	09db      	lsrs	r3, r3, #7
 8002a9e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8002aa0:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	4909      	ldr	r1, [pc, #36]	; (8002acc <usbd_edpt_stalled+0x54>)
 8002aa8:	0052      	lsls	r2, r2, #1
 8002aaa:	440a      	add	r2, r1
 8002aac:	4413      	add	r3, r2
 8002aae:	3320      	adds	r3, #32
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	200000b8 	.word	0x200000b8

08002ad0 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_status_stage_xact+0x1e>
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <_status_stage_xact+0x20>
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8002af2:	7bf9      	ldrb	r1, [r7, #15]
 8002af4:	79f8      	ldrb	r0, [r7, #7]
 8002af6:	2300      	movs	r3, #0
 8002af8:	2200      	movs	r2, #0
 8002afa:	f7ff feaf 	bl	800285c <usbd_edpt_xfer>
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <tud_control_status+0x3c>)
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6810      	ldr	r0, [r2, #0]
 8002b1a:	6851      	ldr	r1, [r2, #4]
 8002b1c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <tud_control_status+0x3c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <tud_control_status+0x3c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <tud_control_status+0x3c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ffcb 	bl	8002ad0 <_status_stage_xact>
 8002b3a:	4603      	mov	r3, r0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200001b8 	.word	0x200001b8

08002b48 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <_data_stage_xact+0x9c>)
 8002b54:	899a      	ldrh	r2, [r3, #12]
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <_data_stage_xact+0x9c>)
 8002b58:	89db      	ldrh	r3, [r3, #14]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	837b      	strh	r3, [r7, #26]
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002b64:	8b7a      	ldrh	r2, [r7, #26]
 8002b66:	8b3b      	ldrh	r3, [r7, #24]
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf28      	it	cs
 8002b6c:	4613      	movcs	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <_data_stage_xact+0x9c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01e      	beq.n	8002bc2 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8002b88:	8bbb      	ldrh	r3, [r7, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d019      	beq.n	8002bc2 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <_data_stage_xact+0x9c>)
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	8bbb      	ldrh	r3, [r7, #28]
 8002b94:	4914      	ldr	r1, [pc, #80]	; (8002be8 <_data_stage_xact+0xa0>)
 8002b96:	6179      	str	r1, [r7, #20]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	6139      	str	r1, [r7, #16]
 8002b9c:	60fa      	str	r2, [r7, #12]
 8002b9e:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d202      	bcs.n	8002bae <_data_stage_xact+0x66>
    return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	e005      	b.n	8002bba <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f002 ffd0 	bl	8005b58 <memcpy>
  return 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <_data_stage_xact+0x7a>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e00b      	b.n	8002bda <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8002bc2:	8bbb      	ldrh	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <_data_stage_xact+0x84>
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <_data_stage_xact+0xa0>)
 8002bca:	e000      	b.n	8002bce <_data_stage_xact+0x86>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	8bbb      	ldrh	r3, [r7, #28]
 8002bd0:	7ff9      	ldrb	r1, [r7, #31]
 8002bd2:	79f8      	ldrb	r0, [r7, #7]
 8002bd4:	f7ff fe42 	bl	800285c <usbd_edpt_xfer>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200001b8 	.word	0x200001b8
 8002be8:	200001cc 	.word	0x200001cc

08002bec <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8002c00:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <tud_control_xfer+0xd8>)
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	6810      	ldr	r0, [r2, #0]
 8002c06:	6851      	ldr	r1, [r2, #4]
 8002c08:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <tud_control_xfer+0xd8>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <tud_control_xfer+0xd8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	88db      	ldrh	r3, [r3, #6]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	89bb      	ldrh	r3, [r7, #12]
 8002c1e:	827b      	strh	r3, [r7, #18]
 8002c20:	4613      	mov	r3, r2
 8002c22:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002c24:	8a7a      	ldrh	r2, [r7, #18]
 8002c26:	8a3b      	ldrh	r3, [r7, #16]
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf28      	it	cs
 8002c2c:	4613      	movcs	r3, r2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <tud_control_xfer+0xd8>)
 8002c32:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	88db      	ldrh	r3, [r3, #6]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d026      	beq.n	8002c8c <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <tud_control_xfer+0xd8>)
 8002c40:	899b      	ldrh	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <tud_control_xfer+0x76>
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <tud_control_xfer+0xdc>)
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d000      	beq.n	8002c5e <tud_control_xfer+0x72>
 8002c5c:	be00      	bkpt	0x0000
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e02b      	b.n	8002cba <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff6f 	bl	8002b48 <_data_stage_xact>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d020      	beq.n	8002cb8 <tud_control_xfer+0xcc>
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <tud_control_xfer+0xdc>)
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d000      	beq.n	8002c88 <tud_control_xfer+0x9c>
 8002c86:	be00      	bkpt	0x0000
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e016      	b.n	8002cba <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff1d 	bl	8002ad0 <_status_stage_xact>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f083 0301 	eor.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <tud_control_xfer+0xcc>
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <tud_control_xfer+0xdc>)
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d000      	beq.n	8002cb4 <tud_control_xfer+0xc8>
 8002cb2:	be00      	bkpt	0x0000
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <tud_control_xfer+0xce>
  }

  return true;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200001b8 	.word	0x200001b8
 8002cc8:	e000edf0 	.word	0xe000edf0

08002ccc <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8002cd0:	2214      	movs	r2, #20
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <usbd_control_reset+0x14>)
 8002cd6:	f002 ff4d 	bl	8005b74 <memset>
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200001b8 	.word	0x200001b8

08002ce4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <usbd_control_set_complete_callback+0x18>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6113      	str	r3, [r2, #16]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	200001b8 	.word	0x200001b8

08002d00 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <usbd_control_set_request+0x30>)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6810      	ldr	r0, [r2, #0]
 8002d0e:	6851      	ldr	r1, [r2, #4]
 8002d10:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <usbd_control_set_request+0x30>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <usbd_control_set_request+0x30>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <usbd_control_set_request+0x30>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	819a      	strh	r2, [r3, #12]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	200001b8 	.word	0x200001b8

08002d34 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	460b      	mov	r3, r1
 8002d42:	71bb      	strb	r3, [r7, #6]
 8002d44:	4613      	mov	r3, r2
 8002d46:	717b      	strb	r3, [r7, #5]
 8002d48:	79bb      	ldrb	r3, [r7, #6]
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	09db      	lsrs	r3, r3, #7
 8002d50:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8002d52:	4a50      	ldr	r2, [pc, #320]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d021      	beq.n	8002da4 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <usbd_control_xfer_cb+0x48>
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <usbd_control_xfer_cb+0x164>)
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d000      	beq.n	8002d78 <usbd_control_xfer_cb+0x44>
 8002d76:	be00      	bkpt	0x0000
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e087      	b.n	8002e8c <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <usbd_control_xfer_cb+0x168>)
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <usbd_control_xfer_cb+0x58>
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4943      	ldr	r1, [pc, #268]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f9d8 	bl	800313c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
 8002d8c:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8002d94:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	79f8      	ldrb	r0, [r7, #7]
 8002d9a:	4a3e      	ldr	r2, [pc, #248]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002d9c:	2103      	movs	r1, #3
 8002d9e:	4798      	blx	r3
    }

    return true;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e073      	b.n	8002e8c <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <usbd_control_xfer_cb+0x8a>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e066      	b.n	8002e8c <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8002dbe:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4936      	ldr	r1, [pc, #216]	; (8002ea0 <usbd_control_xfer_cb+0x16c>)
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fec6 	bl	8005b58 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dce:	89da      	ldrh	r2, [r3, #14]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dda:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002de6:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dea:	88da      	ldrh	r2, [r3, #6]
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002dee:	89db      	ldrh	r3, [r3, #14]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d002      	beq.n	8002dfa <usbd_control_xfer_cb+0xc6>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b3f      	cmp	r3, #63	; 0x3f
 8002df8:	d831      	bhi.n	8002e5e <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	79f8      	ldrb	r0, [r7, #7]
 8002e0c:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4798      	blx	r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	491d      	ldr	r1, [pc, #116]	; (8002e94 <usbd_control_xfer_cb+0x160>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fe55 	bl	8002ad0 <_status_stage_xact>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02a      	beq.n	8002e88 <usbd_control_xfer_cb+0x154>
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <usbd_control_xfer_cb+0x164>)
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d000      	beq.n	8002e44 <usbd_control_xfer_cb+0x110>
 8002e42:	be00      	bkpt	0x0000
 8002e44:	2300      	movs	r3, #0
 8002e46:	e021      	b.n	8002e8c <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 f999 	bl	8005184 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 f994 	bl	8005184 <dcd_edpt_stall>
  {
 8002e5c:	e014      	b.n	8002e88 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fe71 	bl	8002b48 <_data_stage_xact>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f083 0301 	eor.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <usbd_control_xfer_cb+0x156>
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <usbd_control_xfer_cb+0x164>)
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d000      	beq.n	8002e84 <usbd_control_xfer_cb+0x150>
 8002e82:	be00      	bkpt	0x0000
 8002e84:	2300      	movs	r3, #0
 8002e86:	e001      	b.n	8002e8c <usbd_control_xfer_cb+0x158>
  {
 8002e88:	bf00      	nop
  }

  return true;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200001b8 	.word	0x200001b8
 8002e98:	e000edf0 	.word	0xe000edf0
 8002e9c:	0800313d 	.word	0x0800313d
 8002ea0:	200001cc 	.word	0x200001cc

08002ea4 <__NVIC_EnableIRQ>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db0b      	blt.n	8002ece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <__NVIC_EnableIRQ+0x34>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_DisableIRQ>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db12      	blt.n	8002f14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	490a      	ldr	r1, [pc, #40]	; (8002f20 <__NVIC_DisableIRQ+0x44>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	3320      	adds	r3, #32
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f08:	f3bf 8f4f 	dsb	sy
}
 8002f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f0e:	f3bf 8f6f 	isb	sy
}
 8002f12:	bf00      	nop
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <dcd_init>:
//--------------------------------------------------------------------+
// Controller API
//--------------------------------------------------------------------+

void dcd_init (uint8_t rhport)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	; 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  /* Use __HAL_RCC_USB_CLK_ENABLE(); to enable the clocks before calling this function */

  /* The RM mentions to use a special ordering of PDWN and FRES, but this isn't done in HAL.
   * Here, the RM is followed. */

  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f32:	e003      	b.n	8002f3c <dcd_init+0x18>
  {
    asm("NOP");
 8002f34:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	3301      	adds	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2bc7      	cmp	r3, #199	; 0xc7
 8002f40:	d9f8      	bls.n	8002f34 <dcd_init+0x10>
  }
  // Perform USB peripheral reset
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <dcd_init+0xec>)
 8002f44:	2203      	movs	r2, #3
 8002f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4e:	e003      	b.n	8002f58 <dcd_init+0x34>
  {
    asm("NOP");
 8002f50:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	3301      	adds	r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	2bc7      	cmp	r3, #199	; 0xc7
 8002f5c:	d9f8      	bls.n	8002f50 <dcd_init+0x2c>
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <dcd_init+0xf0>)
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2302      	movs	r3, #2
 8002f64:	837b      	strh	r3, [r7, #26]
  *reg = (uint16_t)(*reg & ~mask);
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b21a      	sxth	r2, r3
 8002f6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4013      	ands	r3, r2
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	801a      	strh	r2, [r3, #0]
}
 8002f80:	bf00      	nop
  }
  reg16_clear_bits(&USB->CNTR, USB_CNTR_PDWN);// Remove powerdown
  // Wait startup time, for F042 and F070, this is <= 1 us.
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e003      	b.n	8002f90 <dcd_init+0x6c>
  {
    asm("NOP");
 8002f88:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	2bc7      	cmp	r3, #199	; 0xc7
 8002f94:	d9f8      	bls.n	8002f88 <dcd_init+0x64>
  }
  USB->CNTR = 0; // Enable USB
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <dcd_init+0xec>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <dcd_init+0xec>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  USB->ISTR = 0; // Clear pending interrupts
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <dcd_init+0xec>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  // Reset endpoints to disabled
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	e012      	b.n	8002fda <dcd_init+0xb6>
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <dcd_init+0xec>)
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
}

/* SetENDPOINT */
TU_ATTR_ALWAYS_INLINE static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpIdx, uint32_t wRegValue)
{
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60bb      	str	r3, [r7, #8]
  *reg = (uint16_t)wRegValue;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	801a      	strh	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d9e9      	bls.n	8002fb4 <dcd_init+0x90>
  {
    // This doesn't clear all bits since some bits are "toggle", but does set the type to DISABLED.
    pcd_set_endpoint(USB,i,0u);
  }

  USB->CNTR |= USB_CNTR_RESETM | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <dcd_init+0xec>)
 8002fe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4909      	ldr	r1, [pc, #36]	; (8003010 <dcd_init+0xec>)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <dcd_init+0xf4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
  dcd_handle_bus_reset();
 8002ff4:	f000 f850 	bl	8003098 <dcd_handle_bus_reset>

  // Enable pull-up if supported
  if ( dcd_connect ) dcd_connect(rhport);
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <dcd_init+0xf8>)
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <dcd_init+0xe2>
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f3af 8000 	nop.w
}
 8003006:	bf00      	nop
 8003008:	3730      	adds	r7, #48	; 0x30
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40005c00 	.word	0x40005c00
 8003014:	40005c40 	.word	0x40005c40
 8003018:	ffff9d00 	.word	0xffff9d00
 800301c:	00000000 	.word	0x00000000

08003020 <dcd_int_enable>:
  }
}

// Enable device interrupt
void dcd_int_enable (uint8_t rhport)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("dsb 0xF":::"memory");
 800302a:	f3bf 8f4f 	dsb	sy
}
 800302e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003030:	f3bf 8f6f 	isb	sy
}
 8003034:	bf00      	nop
    NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
    NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
    NVIC_EnableIRQ(USBWakeUp_IRQn);
  }
#elif CFG_TUSB_MCU == OPT_MCU_STM32F1
  NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003036:	2013      	movs	r0, #19
 8003038:	f7ff ff34 	bl	8002ea4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800303c:	2014      	movs	r0, #20
 800303e:	f7ff ff31 	bl	8002ea4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USBWakeUp_IRQn);
 8003042:	202a      	movs	r0, #42	; 0x2a
 8003044:	f7ff ff2e 	bl	8002ea4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USB_LP_IRQn);

#else
  #error Unknown arch in USB driver
#endif
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <dcd_int_disable>:

// Disable device interrupt
void dcd_int_disable(uint8_t rhport)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ(USB_HP_CAN_TX_IRQn);
    NVIC_DisableIRQ(USB_LP_CAN_RX0_IRQn);
    NVIC_DisableIRQ(USBWakeUp_IRQn);
  }
#elif CFG_TUSB_MCU == OPT_MCU_STM32F1
  NVIC_DisableIRQ(USB_HP_CAN1_TX_IRQn);
 800305a:	2013      	movs	r0, #19
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_DisableIRQ>
  NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003060:	2014      	movs	r0, #20
 8003062:	f7ff ff3b 	bl	8002edc <__NVIC_DisableIRQ>
  NVIC_DisableIRQ(USBWakeUp_IRQn);
 8003066:	202a      	movs	r0, #42	; 0x2a
 8003068:	f7ff ff38 	bl	8002edc <__NVIC_DisableIRQ>
#else
  #error Unknown arch in USB driver
#endif

  // CMSIS has a membar after disabling interrupts
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	460a      	mov	r2, r1
 800307e:	71fb      	strb	r3, [r7, #7]
 8003080:	4613      	mov	r3, r2
 8003082:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, TUSB_DIR_IN_MASK | 0x00, NULL, 0);
 8003084:	79f8      	ldrb	r0, [r7, #7]
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	f001 fe7e 	bl	8004d8c <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <dcd_handle_bus_reset>:
  .wMaxPacketSize   = CFG_TUD_ENDPOINT0_SIZE,
  .bInterval        = 0
};

static void dcd_handle_bus_reset(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
  //__IO uint16_t * const epreg = &(EPREG(0));
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <dcd_handle_bus_reset+0x94>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c


  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e029      	b.n	8003100 <dcd_handle_bus_reset+0x68>
 80030ac:	4b1f      	ldr	r3, [pc, #124]	; (800312c <dcd_handle_bus_reset+0x94>)
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	607b      	str	r3, [r7, #4]
  *reg = (uint16_t)wRegValue;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	801a      	strh	r2, [r3, #0]
}
 80030ca:	bf00      	nop
  {
    // Clear all EPREG (or maybe this is automatic? I'm not sure)
    pcd_set_endpoint(USB,i,0u);

    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <dcd_handle_bus_reset+0x98>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	21ff      	movs	r1, #255	; 0xff
 80030d2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <dcd_handle_bus_reset+0x98>)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	22ff      	movs	r2, #255	; 0xff
 80030e0:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <dcd_handle_bus_reset+0x98>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <dcd_handle_bus_reset+0x98>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	70da      	strb	r2, [r3, #3]
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b07      	cmp	r3, #7
 8003104:	d9d2      	bls.n	80030ac <dcd_handle_bus_reset+0x14>
  }

  dcd_pma_alloc_reset();
 8003106:	f000 f85b 	bl	80031c0 <dcd_pma_alloc_reset>
  dcd_edpt_open (0, &ep0OUT_desc);
 800310a:	490a      	ldr	r1, [pc, #40]	; (8003134 <dcd_handle_bus_reset+0x9c>)
 800310c:	2000      	movs	r0, #0
 800310e:	f000 fab1 	bl	8003674 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8003112:	4909      	ldr	r1, [pc, #36]	; (8003138 <dcd_handle_bus_reset+0xa0>)
 8003114:	2000      	movs	r0, #0
 8003116:	f000 faad 	bl	8003674 <dcd_edpt_open>

  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <dcd_handle_bus_reset+0x94>)
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40005c00 	.word	0x40005c00
 8003130:	2000034c 	.word	0x2000034c
 8003134:	08005d20 	.word	0x08005d20
 8003138:	08005d28 	.word	0x08005d28

0800313c <dcd_edpt0_status_complete>:
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d12b      	bne.n	80031ae <dcd_edpt0_status_complete+0x72>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800315e:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d124      	bne.n	80031ae <dcd_edpt0_status_complete+0x72>
      request->bRequest == TUSB_REQ_SET_ADDRESS )
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8003168:	2b05      	cmp	r3, #5
 800316a:	d120      	bne.n	80031ae <dcd_edpt0_status_complete+0x72>
  {
    uint8_t const dev_addr = (uint8_t) request->wValue;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	885b      	ldrh	r3, [r3, #2]
 8003170:	b29b      	uxth	r3, r3
 8003172:	75fb      	strb	r3, [r7, #23]
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <dcd_edpt0_status_complete+0x7c>)
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	237f      	movs	r3, #127	; 0x7f
 800317a:	81fb      	strh	r3, [r7, #14]
  *reg = (uint16_t)(*reg & ~mask);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	b21a      	sxth	r2, r3
 8003184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003188:	43db      	mvns	r3, r3
 800318a:	b21b      	sxth	r3, r3
 800318c:	4013      	ands	r3, r2
 800318e:	b21b      	sxth	r3, r3
 8003190:	b29a      	uxth	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	801a      	strh	r2, [r3, #0]
}
 8003196:	bf00      	nop

    // Setting new address after the whole request is complete
    reg16_clear_bits(&USB->DADDR, USB_DADDR_ADD);
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <dcd_edpt0_status_complete+0x80>)
 800319a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800319e:	b29a      	uxth	r2, r3
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4905      	ldr	r1, [pc, #20]	; (80031bc <dcd_edpt0_status_complete+0x80>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
  }
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40005c4c 	.word	0x40005c4c
 80031bc:	40005c00 	.word	0x40005c00

080031c0 <dcd_pma_alloc_reset>:

static void dcd_pma_alloc_reset(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b093      	sub	sp, #76	; 0x4c
 80031c4:	af00      	add	r7, sp, #0
  open_ep_count = 0;
 80031c6:	4b95      	ldr	r3, [pc, #596]	; (800341c <dcd_pma_alloc_reset+0x25c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80031cc:	4b94      	ldr	r3, [pc, #592]	; (8003420 <dcd_pma_alloc_reset+0x260>)
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	801a      	strh	r2, [r3, #0]
  //TU_LOG2("dcd_pma_alloc_reset()\r\n");
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
 80031d6:	e116      	b.n	8003406 <dcd_pma_alloc_reset+0x246>
  {
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_OUT))->pma_alloc_size = 0U;
 80031d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	71fb      	strb	r3, [r7, #7]
 80031de:	2300      	movs	r3, #0
 80031e0:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <dcd_pma_alloc_reset+0x2e>
 80031e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80031ec:	e000      	b.n	80031f0 <dcd_pma_alloc_reset+0x30>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	613b      	str	r3, [r7, #16]
  uint8_t epnum = tu_edpt_number(ep_addr);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73bb      	strb	r3, [r7, #14]
  uint8_t dir = tu_edpt_dir(ep_addr);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	09db      	lsrs	r3, r3, #7
 8003216:	b2db      	uxtb	r3, r3
 8003218:	733b      	strb	r3, [r7, #12]
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 800321a:	7bbb      	ldrb	r3, [r7, #14]
 800321c:	2b07      	cmp	r3, #7
 800321e:	d90a      	bls.n	8003236 <dcd_pma_alloc_reset+0x76>
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <dcd_pma_alloc_reset+0x264>)
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d000      	beq.n	8003232 <dcd_pma_alloc_reset+0x72>
 8003230:	be00      	bkpt	0x0000
 8003232:	4b7d      	ldr	r3, [pc, #500]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 8003234:	e00d      	b.n	8003252 <dcd_pma_alloc_reset+0x92>
  return &xfer_status[epnum][dir];
 8003236:	7bb9      	ldrb	r1, [r7, #14]
 8003238:	7b3b      	ldrb	r3, [r7, #12]
 800323a:	461a      	mov	r2, r3
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	441a      	add	r2, r3
 8003240:	0093      	lsls	r3, r2, #2
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	4a76      	ldr	r2, [pc, #472]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 8003250:	4413      	add	r3, r2
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_OUT))->pma_alloc_size = 0U;
 8003252:	2200      	movs	r2, #0
 8003254:	821a      	strh	r2, [r3, #16]
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_IN))->pma_alloc_size = 0U;
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	b2db      	uxtb	r3, r3
 800325a:	75fb      	strb	r3, [r7, #23]
 800325c:	2301      	movs	r3, #1
 800325e:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8003260:	7dbb      	ldrb	r3, [r7, #22]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <dcd_pma_alloc_reset+0xac>
 8003266:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800326a:	e000      	b.n	800326e <dcd_pma_alloc_reset+0xae>
 800326c:	2300      	movs	r3, #0
 800326e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003272:	4313      	orrs	r3, r2
 8003274:	b25b      	sxtb	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	623b      	str	r3, [r7, #32]
  uint8_t epnum = tu_edpt_number(ep_addr);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	77fb      	strb	r3, [r7, #31]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003280:	7ffb      	ldrb	r3, [r7, #31]
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003286:	b2db      	uxtb	r3, r3
 8003288:	77bb      	strb	r3, [r7, #30]
  uint8_t dir = tu_edpt_dir(ep_addr);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	777b      	strb	r3, [r7, #29]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003290:	7f7b      	ldrb	r3, [r7, #29]
 8003292:	09db      	lsrs	r3, r3, #7
 8003294:	b2db      	uxtb	r3, r3
 8003296:	773b      	strb	r3, [r7, #28]
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 8003298:	7fbb      	ldrb	r3, [r7, #30]
 800329a:	2b07      	cmp	r3, #7
 800329c:	d90a      	bls.n	80032b4 <dcd_pma_alloc_reset+0xf4>
 800329e:	4b61      	ldr	r3, [pc, #388]	; (8003424 <dcd_pma_alloc_reset+0x264>)
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d000      	beq.n	80032b0 <dcd_pma_alloc_reset+0xf0>
 80032ae:	be00      	bkpt	0x0000
 80032b0:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 80032b2:	e00d      	b.n	80032d0 <dcd_pma_alloc_reset+0x110>
  return &xfer_status[epnum][dir];
 80032b4:	7fb9      	ldrb	r1, [r7, #30]
 80032b6:	7f3b      	ldrb	r3, [r7, #28]
 80032b8:	461a      	mov	r2, r3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	441a      	add	r2, r3
 80032be:	0093      	lsls	r3, r2, #2
 80032c0:	461a      	mov	r2, r3
 80032c2:	460b      	mov	r3, r1
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 80032ce:	4413      	add	r3, r2
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_IN))->pma_alloc_size = 0U;
 80032d0:	2200      	movs	r2, #0
 80032d2:	821a      	strh	r2, [r3, #16]
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_OUT))->pma_ptr = 0U;
 80032d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80032e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <dcd_pma_alloc_reset+0x130>
 80032ea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80032ee:	e000      	b.n	80032f2 <dcd_pma_alloc_reset+0x132>
 80032f0:	2300      	movs	r3, #0
 80032f2:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t epnum = tu_edpt_number(ep_addr);
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800330a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t dir = tu_edpt_dir(ep_addr);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800331c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 8003328:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800332c:	2b07      	cmp	r3, #7
 800332e:	d90a      	bls.n	8003346 <dcd_pma_alloc_reset+0x186>
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <dcd_pma_alloc_reset+0x264>)
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d000      	beq.n	8003342 <dcd_pma_alloc_reset+0x182>
 8003340:	be00      	bkpt	0x0000
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 8003344:	e00f      	b.n	8003366 <dcd_pma_alloc_reset+0x1a6>
  return &xfer_status[epnum][dir];
 8003346:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800334a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800334e:	461a      	mov	r2, r3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	441a      	add	r2, r3
 8003354:	0093      	lsls	r3, r2, #2
 8003356:	461a      	mov	r2, r3
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	4a31      	ldr	r2, [pc, #196]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 8003364:	4413      	add	r3, r2
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_OUT))->pma_ptr = 0U;
 8003366:	2200      	movs	r2, #0
 8003368:	819a      	strh	r2, [r3, #12]
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_IN))->pma_ptr = 0U;
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8003378:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <dcd_pma_alloc_reset+0x1c6>
 8003380:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8003384:	e000      	b.n	8003388 <dcd_pma_alloc_reset+0x1c8>
 8003386:	2300      	movs	r3, #0
 8003388:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 800338c:	4313      	orrs	r3, r2
 800338e:	b25b      	sxtb	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t epnum = tu_edpt_number(ep_addr);
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800339c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  uint8_t dir = tu_edpt_dir(ep_addr);
 80033aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80033b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80033b6:	09db      	lsrs	r3, r3, #7
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 80033be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	d90a      	bls.n	80033dc <dcd_pma_alloc_reset+0x21c>
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <dcd_pma_alloc_reset+0x264>)
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d000      	beq.n	80033d8 <dcd_pma_alloc_reset+0x218>
 80033d6:	be00      	bkpt	0x0000
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 80033da:	e00f      	b.n	80033fc <dcd_pma_alloc_reset+0x23c>
  return &xfer_status[epnum][dir];
 80033dc:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80033e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80033e4:	461a      	mov	r2, r3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	0093      	lsls	r3, r2, #2
 80033ec:	461a      	mov	r2, r3
 80033ee:	460b      	mov	r3, r1
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <dcd_pma_alloc_reset+0x268>)
 80033fa:	4413      	add	r3, r2
    xfer_ctl_ptr(tu_edpt_addr(i,TUSB_DIR_IN))->pma_ptr = 0U;
 80033fc:	2200      	movs	r2, #0
 80033fe:	819a      	strh	r2, [r3, #12]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8003400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003402:	3301      	adds	r3, #1
 8003404:	647b      	str	r3, [r7, #68]	; 0x44
 8003406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003408:	2b07      	cmp	r3, #7
 800340a:	f67f aee5 	bls.w	80031d8 <dcd_pma_alloc_reset+0x18>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	374c      	adds	r7, #76	; 0x4c
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000384 	.word	0x20000384
 8003420:	20000386 	.word	0x20000386
 8003424:	e000edf0 	.word	0xe000edf0
 8003428:	2000020c 	.word	0x2000020c

0800342c <dcd_pma_alloc>:
 * (This is done to simplify the code. More complicated algorithms could be used)
 *
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
 800342c:	b480      	push	{r7}
 800342e:	b08b      	sub	sp, #44	; 0x2c
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(ep_addr);
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	617b      	str	r3, [r7, #20]
  uint8_t epnum = tu_edpt_number(ep_addr);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	b2db      	uxtb	r3, r3
 800344a:	74bb      	strb	r3, [r7, #18]
  uint8_t dir = tu_edpt_dir(ep_addr);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	747b      	strb	r3, [r7, #17]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003452:	7c7b      	ldrb	r3, [r7, #17]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	b2db      	uxtb	r3, r3
 8003458:	743b      	strb	r3, [r7, #16]
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 800345a:	7cbb      	ldrb	r3, [r7, #18]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d90a      	bls.n	8003476 <dcd_pma_alloc+0x4a>
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <dcd_pma_alloc+0xf8>)
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d000      	beq.n	8003472 <dcd_pma_alloc+0x46>
 8003470:	be00      	bkpt	0x0000
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <dcd_pma_alloc+0xfc>)
 8003474:	e00d      	b.n	8003492 <dcd_pma_alloc+0x66>
  return &xfer_status[epnum][dir];
 8003476:	7cb9      	ldrb	r1, [r7, #18]
 8003478:	7c3b      	ldrb	r3, [r7, #16]
 800347a:	461a      	mov	r2, r3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	441a      	add	r2, r3
 8003480:	0093      	lsls	r3, r2, #2
 8003482:	461a      	mov	r2, r3
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	4a26      	ldr	r2, [pc, #152]	; (8003528 <dcd_pma_alloc+0xfc>)
 8003490:	4413      	add	r3, r2
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(ep_addr);
 8003492:	627b      	str	r3, [r7, #36]	; 0x24

  if(epXferCtl->pma_alloc_size != 0U)
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	8a1b      	ldrh	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d014      	beq.n	80034c6 <dcd_pma_alloc+0x9a>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	8a1b      	ldrh	r3, [r3, #16]
 80034a0:	461a      	mov	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d90b      	bls.n	80034c0 <dcd_pma_alloc+0x94>
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <dcd_pma_alloc+0xf8>)
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d000      	beq.n	80034ba <dcd_pma_alloc+0x8e>
 80034b8:	be00      	bkpt	0x0000
 80034ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034be:	e02c      	b.n	800351a <dcd_pma_alloc+0xee>
    return epXferCtl->pma_ptr;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	899b      	ldrh	r3, [r3, #12]
 80034c4:	e029      	b.n	800351a <dcd_pma_alloc+0xee>
  }

  open_ep_count++;
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <dcd_pma_alloc+0x100>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <dcd_pma_alloc+0x100>)
 80034d0:	701a      	strb	r2, [r3, #0]

  uint16_t addr = ep_buf_ptr;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <dcd_pma_alloc+0x104>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	847b      	strh	r3, [r7, #34]	; 0x22
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <dcd_pma_alloc+0x104>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	4413      	add	r3, r2
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <dcd_pma_alloc+0x104>)
 80034e6:	801a      	strh	r2, [r3, #0]

  // Verify no overflow
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 80034e8:	4b11      	ldr	r3, [pc, #68]	; (8003530 <dcd_pma_alloc+0x104>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d90b      	bls.n	800350a <dcd_pma_alloc+0xde>
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <dcd_pma_alloc+0xf8>)
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d000      	beq.n	8003504 <dcd_pma_alloc+0xd8>
 8003502:	be00      	bkpt	0x0000
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	e007      	b.n	800351a <dcd_pma_alloc+0xee>

  epXferCtl->pma_ptr = addr;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800350e:	819a      	strh	r2, [r3, #12]
  epXferCtl->pma_alloc_size = length;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	821a      	strh	r2, [r3, #16]
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  return addr;
 8003518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 800351a:	4618      	mov	r0, r3
 800351c:	372c      	adds	r7, #44	; 0x2c
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	e000edf0 	.word	0xe000edf0
 8003528:	2000020c 	.word	0x2000020c
 800352c:	20000384 	.word	0x20000384
 8003530:	20000386 	.word	0x20000386

08003534 <dcd_ep_alloc>:

/***
 * Allocate hardware endpoint
 */
static uint8_t dcd_ep_alloc(uint8_t ep_addr, uint8_t ep_type)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	460a      	mov	r2, r1
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	4613      	mov	r3, r2
 8003542:	71bb      	strb	r3, [r7, #6]
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003548:	7bbb      	ldrb	r3, [r7, #14]
 800354a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354e:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8003550:	75bb      	strb	r3, [r7, #22]
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	09db      	lsrs	r3, r3, #7
 800355a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800355c:	757b      	strb	r3, [r7, #21]

  for(uint8_t i = 0; i < STFSDEV_EP_COUNT; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
 8003562:	e070      	b.n	8003646 <dcd_ep_alloc+0x112>
  {
    // Check if already allocated
    if(ep_alloc_status[i].allocated[dir] &&
 8003564:	7dfa      	ldrb	r2, [r7, #23]
 8003566:	7d7b      	ldrb	r3, [r7, #21]
 8003568:	4940      	ldr	r1, [pc, #256]	; (800366c <dcd_ep_alloc+0x138>)
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	440a      	add	r2, r1
 800356e:	4413      	add	r3, r2
 8003570:	3302      	adds	r3, #2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <dcd_ep_alloc+0x66>
       ep_alloc_status[i].ep_type == ep_type &&
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	4a3c      	ldr	r2, [pc, #240]	; (800366c <dcd_ep_alloc+0x138>)
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	785b      	ldrb	r3, [r3, #1]
    if(ep_alloc_status[i].allocated[dir] &&
 8003582:	79ba      	ldrb	r2, [r7, #6]
 8003584:	429a      	cmp	r2, r3
 8003586:	d108      	bne.n	800359a <dcd_ep_alloc+0x66>
       ep_alloc_status[i].ep_num == epnum)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	4a38      	ldr	r2, [pc, #224]	; (800366c <dcd_ep_alloc+0x138>)
 800358c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
       ep_alloc_status[i].ep_type == ep_type &&
 8003590:	7dba      	ldrb	r2, [r7, #22]
 8003592:	429a      	cmp	r2, r3
 8003594:	d101      	bne.n	800359a <dcd_ep_alloc+0x66>
    {
      return i;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	e062      	b.n	8003660 <dcd_ep_alloc+0x12c>
    }

    // If EP of current direction is not allocated
    // Except for ISO endpoint, both direction should be free
    if(!ep_alloc_status[i].allocated[dir] &&
 800359a:	7dfa      	ldrb	r2, [r7, #23]
 800359c:	7d7b      	ldrb	r3, [r7, #21]
 800359e:	4933      	ldr	r1, [pc, #204]	; (800366c <dcd_ep_alloc+0x138>)
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	440a      	add	r2, r1
 80035a4:	4413      	add	r3, r2
 80035a6:	3302      	adds	r3, #2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f083 0301 	eor.w	r3, r3, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d045      	beq.n	8003640 <dcd_ep_alloc+0x10c>
 80035b4:	79bb      	ldrb	r3, [r7, #6]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d110      	bne.n	80035dc <dcd_ep_alloc+0xa8>
       (ep_type != TUSB_XFER_ISOCHRONOUS || !ep_alloc_status[i].allocated[dir ^ 1]))
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	7d7a      	ldrb	r2, [r7, #21]
 80035be:	f082 0201 	eor.w	r2, r2, #1
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4a29      	ldr	r2, [pc, #164]	; (800366c <dcd_ep_alloc+0x138>)
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	3302      	adds	r3, #2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	f083 0301 	eor.w	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <dcd_ep_alloc+0x10c>
    {
      // Check if EP number is the same
      if(ep_alloc_status[i].ep_num == 0xFF ||
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	4a23      	ldr	r2, [pc, #140]	; (800366c <dcd_ep_alloc+0x138>)
 80035e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80035e4:	2bff      	cmp	r3, #255	; 0xff
 80035e6:	d006      	beq.n	80035f6 <dcd_ep_alloc+0xc2>
         ep_alloc_status[i].ep_num == epnum)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <dcd_ep_alloc+0x138>)
 80035ec:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
      if(ep_alloc_status[i].ep_num == 0xFF ||
 80035f0:	7dba      	ldrb	r2, [r7, #22]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d124      	bne.n	8003640 <dcd_ep_alloc+0x10c>
      {
        // One EP pair has to be the same type
        if(ep_alloc_status[i].ep_type == 0xFF ||
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <dcd_ep_alloc+0x138>)
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d007      	beq.n	8003614 <dcd_ep_alloc+0xe0>
           ep_alloc_status[i].ep_type == ep_type)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	4a19      	ldr	r2, [pc, #100]	; (800366c <dcd_ep_alloc+0x138>)
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	785b      	ldrb	r3, [r3, #1]
        if(ep_alloc_status[i].ep_type == 0xFF ||
 800360e:	79ba      	ldrb	r2, [r7, #6]
 8003610:	429a      	cmp	r2, r3
 8003612:	d115      	bne.n	8003640 <dcd_ep_alloc+0x10c>
        {
          ep_alloc_status[i].ep_num = epnum;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	4915      	ldr	r1, [pc, #84]	; (800366c <dcd_ep_alloc+0x138>)
 8003618:	7dba      	ldrb	r2, [r7, #22]
 800361a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
          ep_alloc_status[i].ep_type = ep_type;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <dcd_ep_alloc+0x138>)
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	79ba      	ldrb	r2, [r7, #6]
 8003628:	705a      	strb	r2, [r3, #1]
          ep_alloc_status[i].allocated[dir] = true;
 800362a:	7dfa      	ldrb	r2, [r7, #23]
 800362c:	7d7b      	ldrb	r3, [r7, #21]
 800362e:	490f      	ldr	r1, [pc, #60]	; (800366c <dcd_ep_alloc+0x138>)
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	440a      	add	r2, r1
 8003634:	4413      	add	r3, r2
 8003636:	3302      	adds	r3, #2
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]

          return i;
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	e00f      	b.n	8003660 <dcd_ep_alloc+0x12c>
  for(uint8_t i = 0; i < STFSDEV_EP_COUNT; i++)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	3301      	adds	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b07      	cmp	r3, #7
 800364a:	d98b      	bls.n	8003564 <dcd_ep_alloc+0x30>
      }
    }
  }

  // Allocation failed
  TU_ASSERT(0);
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <dcd_ep_alloc+0x13c>)
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d000      	beq.n	800365e <dcd_ep_alloc+0x12a>
 800365c:	be00      	bkpt	0x0000
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	2000034c 	.word	0x2000034c
 8003670:	e000edf0 	.word	0xe000edf0

08003674 <dcd_edpt_open>:

// The STM32F0 doesn't seem to like |= or &= to manipulate the EP#R registers,
// so I'm using the #define from HAL here, instead.

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * p_endpoint_desc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 800367a:	af00      	add	r7, sp, #0
 800367c:	4602      	mov	r2, r0
 800367e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003682:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800368c:	f2a3 2399 	subw	r3, r3, #665	; 0x299
 8003690:	701a      	strb	r2, [r3, #0]
  (void)rhport;
  uint8_t const ep_idx = dcd_ep_alloc(p_endpoint_desc->bEndpointAddress, p_endpoint_desc->bmAttributes.xfer);
 8003692:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003696:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	789a      	ldrb	r2, [r3, #2]
 800369e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80036a2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	78db      	ldrb	r3, [r3, #3]
 80036aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7ff ff3e 	bl	8003534 <dcd_ep_alloc>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
  uint8_t const dir   = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 80036be:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80036c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	789b      	ldrb	r3, [r3, #2]
 80036ca:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
 80036ce:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80036d2:	09db      	lsrs	r3, r3, #7
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f887 329a 	strb.w	r3, [r7, #666]	; 0x29a
 80036da:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80036de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80036e8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80036ec:	889b      	ldrh	r3, [r3, #4]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f4:	b29b      	uxth	r3, r3
  const uint16_t packet_size = tu_edpt_packet_size(p_endpoint_desc);
 80036f6:	f8a7 3298 	strh.w	r3, [r7, #664]	; 0x298
 80036fa:	f8b7 3298 	ldrh.w	r3, [r7, #664]	; 0x298
 80036fe:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
  uint16_t blocksize = (size > 62) ? 32 : 2;
 8003702:	f8b7 3286 	ldrh.w	r3, [r7, #646]	; 0x286
 8003706:	2b3e      	cmp	r3, #62	; 0x3e
 8003708:	d901      	bls.n	800370e <dcd_edpt_open+0x9a>
 800370a:	2320      	movs	r3, #32
 800370c:	e000      	b.n	8003710 <dcd_edpt_open+0x9c>
 800370e:	2302      	movs	r3, #2
 8003710:	f8a7 3284 	strh.w	r3, [r7, #644]	; 0x284
  uint16_t numblocks = (size + blocksize - 1) / blocksize ;
 8003714:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 8003718:	f8b7 3284 	ldrh.w	r3, [r7, #644]	; 0x284
 800371c:	4413      	add	r3, r2
 800371e:	1e5a      	subs	r2, r3, #1
 8003720:	f8b7 3284 	ldrh.w	r3, [r7, #644]	; 0x284
 8003724:	fb92 f3f3 	sdiv	r3, r2, r3
 8003728:	f8a7 3282 	strh.w	r3, [r7, #642]	; 0x282
  return numblocks * blocksize;
 800372c:	f8b7 3284 	ldrh.w	r3, [r7, #644]	; 0x284
 8003730:	f8b7 2282 	ldrh.w	r2, [r7, #642]	; 0x282
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	b29b      	uxth	r3, r3
  const uint16_t buffer_size = pcd_aligned_buffer_size(packet_size);
 800373a:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
  uint16_t pma_addr;
  uint32_t wType;

  TU_ASSERT(ep_idx < STFSDEV_EP_COUNT);
 800373e:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8003742:	2b07      	cmp	r3, #7
 8003744:	d90d      	bls.n	8003762 <dcd_edpt_open+0xee>
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <dcd_edpt_open+0x184>)
 8003748:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800374c:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d000      	beq.n	800375c <dcd_edpt_open+0xe8>
 800375a:	be00      	bkpt	0x0000
 800375c:	2300      	movs	r3, #0
 800375e:	f001 b9c9 	b.w	8004af4 <dcd_edpt_open+0x1480>
  TU_ASSERT(buffer_size <= 1024);
 8003762:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376a:	d90d      	bls.n	8003788 <dcd_edpt_open+0x114>
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <dcd_edpt_open+0x184>)
 800376e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8003772:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d000      	beq.n	8003782 <dcd_edpt_open+0x10e>
 8003780:	be00      	bkpt	0x0000
 8003782:	2300      	movs	r3, #0
 8003784:	f001 b9b6 	b.w	8004af4 <dcd_edpt_open+0x1480>

  // Set type
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8003788:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800378c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78db      	ldrb	r3, [r3, #3]
 8003794:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b03      	cmp	r3, #3
 800379c:	d81e      	bhi.n	80037dc <dcd_edpt_open+0x168>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <dcd_edpt_open+0x130>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	080037d3 	.word	0x080037d3
  case TUSB_XFER_CONTROL:
    wType = USB_EP_CONTROL;
 80037b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    break;
 80037bc:	e01e      	b.n	80037fc <dcd_edpt_open+0x188>
  case TUSB_XFER_ISOCHRONOUS:
    wType = USB_EP_ISOCHRONOUS;
 80037be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    break;
 80037c6:	e019      	b.n	80037fc <dcd_edpt_open+0x188>
  case TUSB_XFER_BULK:
    wType = USB_EP_CONTROL;
 80037c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037cc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    break;
 80037d0:	e014      	b.n	80037fc <dcd_edpt_open+0x188>

  case TUSB_XFER_INTERRUPT:
    wType = USB_EP_INTERRUPT;
 80037d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037d6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    break;
 80037da:	e00f      	b.n	80037fc <dcd_edpt_open+0x188>

  default:
    TU_ASSERT(false);
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <dcd_edpt_open+0x184>)
 80037de:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80037e2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d000      	beq.n	80037f2 <dcd_edpt_open+0x17e>
 80037f0:	be00      	bkpt	0x0000
 80037f2:	2300      	movs	r3, #0
 80037f4:	f001 b97e 	b.w	8004af4 <dcd_edpt_open+0x1480>
 80037f8:	e000edf0 	.word	0xe000edf0
  }

  pcd_set_eptype(USB, ep_idx, wType);
 80037fc:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8003800:	4ae1      	ldr	r2, [pc, #900]	; (8003b88 <dcd_edpt_open+0x514>)
 8003802:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8003806:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800380a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800380e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003812:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003816:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800381a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800381e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

/* GetENDPOINT */
TU_ATTR_ALWAYS_INLINE static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpIdx) {
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003822:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003826:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  return *reg;
 8003832:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
}

TU_ATTR_ALWAYS_INLINE static inline void pcd_set_eptype(USB_TypeDef * USBx, uint32_t bEpIdx, uint32_t wType)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800383a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  regVal &= (uint32_t)USB_EP_T_MASK;
 800383e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8003842:	f648 138f 	movw	r3, #35215	; 0x898f
 8003846:	4013      	ands	r3, r2
 8003848:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  regVal |= wType;
 800384c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8003850:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 800385a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003866:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800386a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800386e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8003872:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003876:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800387a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800387e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003882:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8003886:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  *reg = (uint16_t)wRegValue;
 8003892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003896:	b29a      	uxth	r2, r3
 8003898:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800389c:	801a      	strh	r2, [r3, #0]
}
 800389e:	bf00      	nop
  pcd_set_endpoint(USBx, bEpIdx, regVal);
}
 80038a0:	bf00      	nop
  pcd_set_ep_address(USB, ep_idx, tu_edpt_number(p_endpoint_desc->bEndpointAddress));
 80038a2:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80038a6:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80038aa:	f5a2 7228 	sub.w	r2, r2, #672	; 0x2a0
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	7892      	ldrb	r2, [r2, #2]
 80038b2:	f887 2223 	strb.w	r2, [r7, #547]	; 0x223
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80038b6:	f897 2223 	ldrb.w	r2, [r7, #547]	; 0x223
 80038ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	4611      	mov	r1, r2
 80038c2:	4ab1      	ldr	r2, [pc, #708]	; (8003b88 <dcd_edpt_open+0x514>)
 80038c4:	f8c7 224c 	str.w	r2, [r7, #588]	; 0x24c
 80038c8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80038cc:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 80038d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80038d4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80038d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80038dc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80038e0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80038e4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  return *reg;
 80038f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
  * @param  bAddr Address.
  * @retval None
  */
TU_ATTR_ALWAYS_INLINE static inline void pcd_set_ep_address(USB_TypeDef * USBx,  uint32_t bEpIdx, uint32_t bAddr)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 80038f8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  regVal &= USB_EPREG_MASK;
 80038fc:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003900:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8003904:	4013      	ands	r3, r2
 8003906:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  regVal |= bAddr;
 800390a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800390e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8003918:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800391c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003924:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8003928:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800392c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8003930:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003934:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8003938:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800393c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003940:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8003944:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  *reg = (uint16_t)wRegValue;
 8003950:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003954:	b29a      	uxth	r2, r3
 8003956:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800395a:	801a      	strh	r2, [r3, #0]
}
 800395c:	bf00      	nop
  pcd_set_endpoint(USBx, bEpIdx,regVal);
}
 800395e:	bf00      	nop
 8003960:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <dcd_edpt_open+0x514>)
 8003962:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800396c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003970:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8003974:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8003978:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800397c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8003980:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  return *reg;
 800398c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
  pcd_set_endpoint(USBx, bEpIdx, regVal);
}
TU_ATTR_ALWAYS_INLINE static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpIdx)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8003994:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  regVal &= USB_EPKIND_MASK;
 8003998:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800399c:	f648 638f 	movw	r3, #36495	; 0x8e8f
 80039a0:	4013      	ands	r3, r2
 80039a2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80039a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80039b6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80039ba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80039be:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80039c2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80039c6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80039ca:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80039ce:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80039d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  *reg = (uint16_t)wRegValue;
 80039de:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80039e8:	801a      	strh	r2, [r3, #0]
}
 80039ea:	bf00      	nop
  pcd_set_endpoint(USBx, bEpIdx, regVal);
}
 80039ec:	bf00      	nop
  // or being double-buffered (bulk endpoints)
  pcd_clear_ep_kind(USB,0);

  /* Create a packet memory buffer area. For isochronous endpoints,
   * use the same buffer as the double buffer, essentially disabling double buffering */
  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, buffer_size);
 80039ee:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80039f2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	789b      	ldrb	r3, [r3, #2]
 80039fa:	f8b7 2296 	ldrh.w	r2, [r7, #662]	; 0x296
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fd13 	bl	800342c <dcd_pma_alloc>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f8a7 3294 	strh.w	r3, [r7, #660]	; 0x294

  if( (dir == TUSB_DIR_IN) || (wType == USB_EP_ISOCHRONOUS) )
 8003a0c:	f897 329a 	ldrb.w	r3, [r7, #666]	; 0x29a
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d005      	beq.n	8003a20 <dcd_edpt_open+0x3ac>
 8003a14:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	f040 81d8 	bne.w	8003dd0 <dcd_edpt_open+0x75c>
  {
    *pcd_ep_tx_address_ptr(USB, ep_idx) = pma_addr;
 8003a20:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8003a24:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a2c:	4956      	ldr	r1, [pc, #344]	; (8003b88 <dcd_edpt_open+0x514>)
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a38:	601a      	str	r2, [r3, #0]
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 0u);
 8003a3a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a4e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8003a52:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8003a56:	6809      	ldr	r1, [r1, #0]
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a62:	601a      	str	r2, [r3, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003a64:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a82:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003a86:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
  total_word_offset *= PMA_STRIDE;
 8003a90:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003a94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a98:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003a9c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	0052      	lsls	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
  return &(pma[total_word_offset]);
 8003aa6:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <dcd_edpt_open+0x518>)
 8003aa8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003aac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 0u);
 8003ab6:	bf00      	nop
 8003ab8:	f8b7 2294 	ldrh.w	r2, [r7, #660]	; 0x294
 8003abc:	801a      	strh	r2, [r3, #0]
    pcd_set_ep_tx_bufsize(USB, ep_idx, buffer_size);
 8003abe:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8003ac2:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 8003ac6:	4930      	ldr	r1, [pc, #192]	; (8003b88 <dcd_edpt_open+0x514>)
 8003ac8:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8003acc:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003ad0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003ad4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ad8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003adc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ae0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ae4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003ae8:	601a      	str	r2, [r3, #0]
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 1u);
 8003aea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003aee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b00:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8003b04:	6019      	str	r1, [r3, #0]
 8003b06:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b0e:	601a      	str	r2, [r3, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003b10:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b2e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003b32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	440a      	add	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
  total_word_offset *= PMA_STRIDE;
 8003b3c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b44:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003b48:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	0052      	lsls	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
  return &(pma[total_word_offset]);
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <dcd_edpt_open+0x518>)
 8003b54:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	441a      	add	r2, r3
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 1u);
 8003b62:	bf00      	nop
  __IO uint16_t *pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpIdx));
 8003b64:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b6c:	601a      	str	r2, [r3, #0]
  wCount = pcd_aligned_buffer_size(wCount);
 8003b6e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b78:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003b7c:	801a      	strh	r2, [r3, #0]
  uint16_t blocksize = (size > 62) ? 32 : 2;
 8003b7e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003b82:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003b86:	e003      	b.n	8003b90 <dcd_edpt_open+0x51c>
 8003b88:	40005c00 	.word	0x40005c00
 8003b8c:	40006000 	.word	0x40006000
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	2b3e      	cmp	r3, #62	; 0x3e
 8003b94:	d901      	bls.n	8003b9a <dcd_edpt_open+0x526>
 8003b96:	2220      	movs	r2, #32
 8003b98:	e000      	b.n	8003b9c <dcd_edpt_open+0x528>
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ba0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ba4:	801a      	strh	r2, [r3, #0]
  uint16_t numblocks = (size + blocksize - 1) / blocksize ;
 8003ba6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003baa:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003bb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003bc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	fb92 f2f3 	sdiv	r2, r2, r3
 8003bcc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003bd0:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8003bd4:	801a      	strh	r2, [r3, #0]
  return numblocks * blocksize;
 8003bd6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003bda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bde:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003be2:	f5a2 728b 	sub.w	r2, r2, #278	; 0x116
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	8812      	ldrh	r2, [r2, #0]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
  wCount = pcd_aligned_buffer_size(wCount);
 8003bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003bf4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003bf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bfc:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003c00:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c10:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8003c14:	601a      	str	r2, [r3, #0]
  uint16_t blocksize = (wCount > 62) ? 1 : 0;
 8003c16:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b3e      	cmp	r3, #62	; 0x3e
 8003c22:	bf8c      	ite	hi
 8003c24:	2301      	movhi	r3, #1
 8003c26:	2300      	movls	r3, #0
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c2e:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8003c32:	801a      	strh	r2, [r3, #0]
  uint16_t numblocks = wCount / (blocksize ? 32 : 2);
 8003c34:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c38:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <dcd_edpt_open+0x5d2>
 8003c42:	2320      	movs	r3, #32
 8003c44:	e000      	b.n	8003c48 <dcd_edpt_open+0x5d4>
 8003c46:	2302      	movs	r3, #2
 8003c48:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003c4c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c56:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c5e:	801a      	strh	r2, [r3, #0]
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 8003c60:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003c6e:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8003c72:	8812      	ldrh	r2, [r2, #0]
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	d001      	beq.n	8003c7c <dcd_edpt_open+0x608>
 8003c78:	2220      	movs	r2, #32
 8003c7a:	e000      	b.n	8003c7e <dcd_edpt_open+0x60a>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d011      	beq.n	8003cb6 <dcd_edpt_open+0x642>
 8003c92:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003c96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c9a:	4abb      	ldr	r2, [pc, #748]	; (8003f88 <dcd_edpt_open+0x914>)
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ca2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01f      	beq.n	8003cf2 <dcd_edpt_open+0x67e>
 8003cb2:	be00      	bkpt	0x0000
 8003cb4:	e01d      	b.n	8003cf2 <dcd_edpt_open+0x67e>
  *pdwReg = (blocksize << 15) | ((numblocks - blocksize) << 10);
 8003cb6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003cba:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	03db      	lsls	r3, r3, #15
 8003cc2:	b21a      	sxth	r2, r3
 8003cc4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003cc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ccc:	8819      	ldrh	r1, [r3, #0]
 8003cce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003cd2:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	1acb      	subs	r3, r1, r3
 8003cda:	029b      	lsls	r3, r3, #10
 8003cdc:	b21b      	sxth	r3, r3
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b21b      	sxth	r3, r3
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	801a      	strh	r2, [r3, #0]
}
 8003cf0:	e000      	b.n	8003cf4 <dcd_edpt_open+0x680>
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 8003cf2:	bf00      	nop
}
 8003cf4:	bf00      	nop
    pcd_clear_tx_dtog(USB, ep_idx);
 8003cf6:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8003cfa:	4aa4      	ldr	r2, [pc, #656]	; (8003f8c <dcd_edpt_open+0x918>)
 8003cfc:	f8c7 21f0 	str.w	r2, [r7, #496]	; 0x1f0
 8003d00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003d04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003d08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003d0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003d10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003d14:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8003d18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  return *reg;
 8003d24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8003d2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  if((regVal & USB_EP_DTOG_TX) != 0)
 8003d30:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d048      	beq.n	8003dce <dcd_edpt_open+0x75a>
 8003d3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003d40:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003d44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003d48:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003d4c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003d50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003d54:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003d58:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003d5c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8003d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  return *reg;
 8003d6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8003d74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  regVal &= USB_EPREG_MASK;
 8003d78:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8003d7c:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8003d80:	4013      	ands	r3, r2
 8003d82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 8003d86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d96:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003d9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d9e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003da2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003da6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003daa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8003dae:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003db2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  *reg = (uint16_t)wRegValue;
 8003dbe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003dc8:	801a      	strh	r2, [r3, #0]
}
 8003dca:	bf00      	nop
}
 8003dcc:	bf00      	nop
}
 8003dce:	bf00      	nop
  }

  if( (dir == TUSB_DIR_OUT) || (wType == USB_EP_ISOCHRONOUS) )
 8003dd0:	f897 329a 	ldrb.w	r3, [r7, #666]	; 0x29a
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <dcd_edpt_open+0x770>
 8003dd8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	f040 8274 	bne.w	80042cc <dcd_edpt_open+0xc58>
  {
    *pcd_ep_rx_address_ptr(USB, ep_idx) = pma_addr;
 8003de4:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8003de8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003dec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003df0:	4966      	ldr	r1, [pc, #408]	; (8003f8c <dcd_edpt_open+0x918>)
 8003df2:	6019      	str	r1, [r3, #0]
 8003df4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003df8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003dfc:	601a      	str	r2, [r3, #0]
  return  pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 2u);
 8003dfe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e10:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e14:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8003e18:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8003e1c:	6809      	ldr	r1, [r1, #0]
 8003e1e:	6019      	str	r1, [r3, #0]
 8003e20:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e24:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e28:	601a      	str	r2, [r3, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003e2a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e44:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8003e48:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003e4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	440a      	add	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
  total_word_offset *= PMA_STRIDE;
 8003e56:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e5a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8003e5e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003e62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	0052      	lsls	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  return &(pma[total_word_offset]);
 8003e6c:	4a48      	ldr	r2, [pc, #288]	; (8003f90 <dcd_edpt_open+0x91c>)
 8003e6e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e72:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
  return  pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 2u);
 8003e7c:	bf00      	nop
 8003e7e:	f8b7 2294 	ldrh.w	r2, [r7, #660]	; 0x294
 8003e82:	801a      	strh	r2, [r3, #0]
    pcd_set_ep_rx_bufsize(USB, ep_idx, buffer_size);
 8003e84:	f897 129b 	ldrb.w	r1, [r7, #667]	; 0x29b
 8003e88:	f8b7 2296 	ldrh.w	r2, [r7, #662]	; 0x296
 8003e8c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e94:	483d      	ldr	r0, [pc, #244]	; (8003f8c <dcd_edpt_open+0x918>)
 8003e96:	6018      	str	r0, [r3, #0]
 8003e98:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003e9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ea0:	6019      	str	r1, [r3, #0]
 8003ea2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ea6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003eb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003eb4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003eb8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ec4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ec8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003ecc:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8003ed4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ed8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	1cda      	adds	r2, r3, #3
 8003ee2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ee6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003eea:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8003eee:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 8003ef2:	6809      	ldr	r1, [r1, #0]
 8003ef4:	6019      	str	r1, [r3, #0]
 8003ef6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003efa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003efe:	601a      	str	r2, [r3, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003f00:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f04:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f1a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f1e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003f22:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	440a      	add	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
  total_word_offset *= PMA_STRIDE;
 8003f2c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f34:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003f38:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  return &(pma[total_word_offset]);
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <dcd_edpt_open+0x91c>)
 8003f44:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	441a      	add	r2, r3
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8003f52:	bf00      	nop
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpIdx));
 8003f54:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003f5c:	601a      	str	r2, [r3, #0]
  wCount = pcd_aligned_buffer_size(wCount);
 8003f5e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f6e:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 8003f72:	801a      	strh	r2, [r3, #0]
  uint16_t blocksize = (size > 62) ? 32 : 2;
 8003f74:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f78:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f80:	d908      	bls.n	8003f94 <dcd_edpt_open+0x920>
 8003f82:	2220      	movs	r2, #32
 8003f84:	e007      	b.n	8003f96 <dcd_edpt_open+0x922>
 8003f86:	bf00      	nop
 8003f88:	e000edf0 	.word	0xe000edf0
 8003f8c:	40005c00 	.word	0x40005c00
 8003f90:	40006000 	.word	0x40006000
 8003f94:	2202      	movs	r2, #2
 8003f96:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f9a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003f9e:	801a      	strh	r2, [r3, #0]
  uint16_t numblocks = (size + blocksize - 1) / blocksize ;
 8003fa0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fa4:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fae:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fbc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	fb92 f2f3 	sdiv	r2, r2, r3
 8003fc6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fca:	f5a3 73d3 	sub.w	r3, r3, #422	; 0x1a6
 8003fce:	801a      	strh	r2, [r3, #0]
  return numblocks * blocksize;
 8003fd0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fd4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003fd8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003fdc:	f5a2 72d3 	sub.w	r2, r2, #422	; 0x1a6
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	8812      	ldrh	r2, [r2, #0]
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	b29a      	uxth	r2, r3
  wCount = pcd_aligned_buffer_size(wCount);
 8003fea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ff8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ffc:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004000:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800400c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004010:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004014:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	601a      	str	r2, [r3, #0]
  uint16_t blocksize = (wCount > 62) ? 1 : 0;
 800401c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004020:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b3e      	cmp	r3, #62	; 0x3e
 8004028:	bf8c      	ite	hi
 800402a:	2301      	movhi	r3, #1
 800402c:	2300      	movls	r3, #0
 800402e:	b2da      	uxtb	r2, r3
 8004030:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004034:	f5a3 73d9 	sub.w	r3, r3, #434	; 0x1b2
 8004038:	801a      	strh	r2, [r3, #0]
  uint16_t numblocks = wCount / (blocksize ? 32 : 2);
 800403a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800403e:	f5a3 73d9 	sub.w	r3, r3, #434	; 0x1b2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <dcd_edpt_open+0x9d8>
 8004048:	2320      	movs	r3, #32
 800404a:	e000      	b.n	800404e <dcd_edpt_open+0x9da>
 800404c:	2302      	movs	r3, #2
 800404e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004052:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	fbb2 f2f3 	udiv	r2, r2, r3
 800405c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004060:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004064:	801a      	strh	r2, [r3, #0]
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 8004066:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800406a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004074:	f5a2 72d9 	sub.w	r2, r2, #434	; 0x1b2
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	2a00      	cmp	r2, #0
 800407c:	d001      	beq.n	8004082 <dcd_edpt_open+0xa0e>
 800407e:	2220      	movs	r2, #32
 8004080:	e000      	b.n	8004084 <dcd_edpt_open+0xa10>
 8004082:	2202      	movs	r2, #2
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	461a      	mov	r2, r3
 800408a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800408e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4293      	cmp	r3, r2
 8004096:	d011      	beq.n	80040bc <dcd_edpt_open+0xa48>
 8004098:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800409c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <dcd_edpt_open+0xa84>)
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d021      	beq.n	80040fc <dcd_edpt_open+0xa88>
 80040b8:	be00      	bkpt	0x0000
 80040ba:	e01f      	b.n	80040fc <dcd_edpt_open+0xa88>
  *pdwReg = (blocksize << 15) | ((numblocks - blocksize) << 10);
 80040bc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040c0:	f5a3 73d9 	sub.w	r3, r3, #434	; 0x1b2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	03db      	lsls	r3, r3, #15
 80040c8:	b21a      	sxth	r2, r3
 80040ca:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040d2:	8819      	ldrh	r1, [r3, #0]
 80040d4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040d8:	f5a3 73d9 	sub.w	r3, r3, #434	; 0x1b2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	1acb      	subs	r3, r1, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	801a      	strh	r2, [r3, #0]
}
 80040f6:	e002      	b.n	80040fe <dcd_edpt_open+0xa8a>
 80040f8:	e000edf0 	.word	0xe000edf0
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 80040fc:	bf00      	nop
}
 80040fe:	bf00      	nop
    pcd_clear_rx_dtog(USB, ep_idx);
 8004100:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8004104:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004108:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800410c:	49b3      	ldr	r1, [pc, #716]	; (80043dc <dcd_edpt_open+0xd68>)
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004114:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800411e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004122:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004126:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004132:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004136:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800413a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004142:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004146:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004150:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800415c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004160:	440a      	add	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
  return *reg;
 8004164:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004168:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8004172:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004176:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800417a:	601a      	str	r2, [r3, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 800417c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004180:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 809d 	beq.w	80042ca <dcd_edpt_open+0xc56>
 8004190:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004194:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004198:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800419c:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041ac:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80041b0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041bc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041c0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80041c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041d4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80041d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80041e0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041e4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041ee:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80041fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80041fe:	440a      	add	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
  return *reg;
 8004202:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004206:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8004210:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004214:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004218:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPREG_MASK;
 800421a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800421e:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8004222:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004226:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8004230:	400b      	ands	r3, r1
 8004232:	6013      	str	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 8004234:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004238:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800423c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004240:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004254:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004258:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800425c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004268:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800426c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004270:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800427c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004280:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004284:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800428c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004290:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800429a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	009a      	lsls	r2, r3, #2
 80042a2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80042a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042aa:	440a      	add	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 80042ae:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80042b2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80042be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	801a      	strh	r2, [r3, #0]
}
 80042c6:	bf00      	nop
}
 80042c8:	bf00      	nop
}
 80042ca:	bf00      	nop
  }

  /* Enable endpoint */
  if (dir == TUSB_DIR_IN)
 80042cc:	f897 329a 	ldrb.w	r3, [r7, #666]	; 0x29a
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	f040 8196 	bne.w	8004602 <dcd_edpt_open+0xf8e>
  {
    if(wType == USB_EP_ISOCHRONOUS) {
 80042d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	f040 80ca 	bne.w	8004476 <dcd_edpt_open+0xe02>
      pcd_set_ep_tx_status(USB, ep_idx, USB_EP_TX_DIS);
 80042e2:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 80042e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80042ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042ee:	493b      	ldr	r1, [pc, #236]	; (80043dc <dcd_edpt_open+0xd68>)
 80042f0:	6019      	str	r1, [r3, #0]
 80042f2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80042f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004300:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800430c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004310:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004314:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004320:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004324:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004328:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004330:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004334:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800433e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800434a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800434e:	440a      	add	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
  return *reg;
 8004352:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004356:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8004360:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004364:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004368:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPTX_DTOGMASK;
 800436a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800436e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8004372:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004376:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004380:	400b      	ands	r3, r1
 8004382:	6013      	str	r3, [r2, #0]
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8004384:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004388:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <dcd_edpt_open+0xd3a>
    regVal ^= USB_EPTX_DTOG1;
 8004396:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800439a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800439e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80043a2:	f5a2 72f4 	sub.w	r2, r2, #488	; 0x1e8
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	f082 0210 	eor.w	r2, r2, #16
 80043ac:	601a      	str	r2, [r3, #0]
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 80043ae:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80043b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00f      	beq.n	80043e0 <dcd_edpt_open+0xd6c>
    regVal ^= USB_EPTX_DTOG2;
 80043c0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80043c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043c8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80043cc:	f5a2 72f4 	sub.w	r2, r2, #488	; 0x1e8
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	f082 0220 	eor.w	r2, r2, #32
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <dcd_edpt_open+0xd6c>
 80043da:	bf00      	nop
 80043dc:	40005c00 	.word	0x40005c00
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80043e0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80043e4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80043e8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80043ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004400:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004404:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004408:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004414:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004418:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800441c:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004428:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800442c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004430:	f5a2 72f4 	sub.w	r2, r2, #488	; 0x1e8
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004438:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800443c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004446:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004452:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004456:	440a      	add	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 800445a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800445e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800446a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	801a      	strh	r2, [r3, #0]
}
 8004472:	bf00      	nop
} /* pcd_set_ep_tx_status */
 8004474:	e25b      	b.n	800492e <dcd_edpt_open+0x12ba>
    } else {
      pcd_set_ep_tx_status(USB, ep_idx, USB_EP_TX_NAK);
 8004476:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 800447a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800447e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004482:	49c6      	ldr	r1, [pc, #792]	; (800479c <dcd_edpt_open+0x1128>)
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800448a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004498:	2220      	movs	r2, #32
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044a0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80044a4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80044a8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80044b8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80044bc:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80044c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044c8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044de:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80044e2:	440a      	add	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
  return *reg;
 80044e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044ea:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 80044f4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80044f8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80044fc:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPTX_DTOGMASK;
 80044fe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004502:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8004506:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800450a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004514:	400b      	ands	r3, r1
 8004516:	6013      	str	r3, [r2, #0]
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8004518:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800451c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <dcd_edpt_open+0xece>
    regVal ^= USB_EPTX_DTOG1;
 800452a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800452e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004532:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004536:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	f082 0210 	eor.w	r2, r2, #16
 8004540:	601a      	str	r2, [r3, #0]
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8004542:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <dcd_edpt_open+0xef8>
    regVal ^= USB_EPTX_DTOG2;
 8004554:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004558:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800455c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004560:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	f082 0220 	eor.w	r2, r2, #32
 800456a:	601a      	str	r2, [r3, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 800456c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004570:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8004574:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004578:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800458c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004590:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004594:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045a0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80045a4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80045a8:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045b4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80045b8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80045bc:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80045c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045c8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045d2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	009a      	lsls	r2, r3, #2
 80045da:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045de:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80045e2:	440a      	add	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 80045e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045ea:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80045f6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	801a      	strh	r2, [r3, #0]
}
 80045fe:	bf00      	nop
} /* pcd_set_ep_tx_status */
 8004600:	e195      	b.n	800492e <dcd_edpt_open+0x12ba>
    }
  } else
  {
    if(wType == USB_EP_ISOCHRONOUS) {
 8004602:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460a:	f040 80c9 	bne.w	80047a0 <dcd_edpt_open+0x112c>
      pcd_set_ep_rx_status(USB, ep_idx, USB_EP_RX_DIS);
 800460e:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8004612:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004616:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800461a:	4960      	ldr	r1, [pc, #384]	; (800479c <dcd_edpt_open+0x1128>)
 800461c:	6019      	str	r1, [r3, #0]
 800461e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004622:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800462c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004638:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800463c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004640:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800464c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004650:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004654:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800465c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004660:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800466a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004676:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800467a:	440a      	add	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
  return *reg;
 800467e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004682:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800468c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004690:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8004694:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPRX_DTOGMASK;
 8004696:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800469a:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 800469e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80046a2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80046ac:	400b      	ands	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 80046b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80046b4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <dcd_edpt_open+0x1066>
    regVal ^= USB_EPRX_DTOG1;
 80046c2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80046c6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80046ca:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80046ce:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80046d8:	601a      	str	r2, [r3, #0]
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 80046da:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80046de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <dcd_edpt_open+0x1090>
    regVal ^= USB_EPRX_DTOG2;
 80046ec:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80046f0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80046f4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80046f8:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004702:	601a      	str	r2, [r3, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004704:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004708:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 800470c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004710:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004724:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004728:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800472c:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004738:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800473c:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004740:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800474c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8004750:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004754:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800475c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004760:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800476a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	009a      	lsls	r2, r3, #2
 8004772:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004776:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800477a:	440a      	add	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 800477e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b29a      	uxth	r2, r3
 800478a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800478e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	801a      	strh	r2, [r3, #0]
}
 8004796:	bf00      	nop
} /* pcd_set_ep_rx_status */
 8004798:	e0c9      	b.n	800492e <dcd_edpt_open+0x12ba>
 800479a:	bf00      	nop
 800479c:	40005c00 	.word	0x40005c00
    } else {
      pcd_set_ep_rx_status(USB, ep_idx, USB_EP_RX_NAK);
 80047a0:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 80047a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047a8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80047ac:	49c1      	ldr	r1, [pc, #772]	; (8004ab4 <dcd_edpt_open+0x1440>)
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80047c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047cc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80047d0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80047d4:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80047e4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80047e8:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80047f0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047f4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80047fe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	009a      	lsls	r2, r3, #2
 8004806:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800480a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800480e:	440a      	add	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
  return *reg;
 8004812:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004816:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8004820:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004824:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004828:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPRX_DTOGMASK;
 800482a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800482e:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8004832:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004836:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800483a:	6819      	ldr	r1, [r3, #0]
 800483c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004840:	400b      	ands	r3, r1
 8004842:	6013      	str	r3, [r2, #0]
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8004844:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004848:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <dcd_edpt_open+0x11fa>
    regVal ^= USB_EPRX_DTOG1;
 8004856:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800485a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800485e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8004862:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800486c:	601a      	str	r2, [r3, #0]
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 800486e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004872:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <dcd_edpt_open+0x1224>
    regVal ^= USB_EPRX_DTOG2;
 8004880:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004884:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004888:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800488c:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004896:	601a      	str	r2, [r3, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004898:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800489c:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80048a0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048a4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048b8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80048bc:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80048c0:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048cc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80048d0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80048d4:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048e0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80048e4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80048e8:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80048f0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048f4:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80048fe:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800490a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800490e:	440a      	add	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 8004912:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004916:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b29a      	uxth	r2, r3
 800491e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004922:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	801a      	strh	r2, [r3, #0]
}
 800492a:	bf00      	nop
} /* pcd_set_ep_rx_status */
 800492c:	bf00      	nop
    }
  }

  xfer_ctl_ptr(p_endpoint_desc->bEndpointAddress)->max_packet_size = packet_size;
 800492e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004932:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	789b      	ldrb	r3, [r3, #2]
 800493a:	461a      	mov	r2, r3
 800493c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004940:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8004944:	601a      	str	r2, [r3, #0]
  uint8_t epnum = tu_edpt_number(ep_addr);
 8004946:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800494a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004956:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004960:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004970:	f2a3 238e 	subw	r3, r3, #654	; 0x28e
 8004974:	701a      	strb	r2, [r3, #0]
  uint8_t dir = tu_edpt_dir(ep_addr);
 8004976:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800497a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004986:	f2a3 238f 	subw	r3, r3, #655	; 0x28f
 800498a:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800498c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004990:	f2a3 238f 	subw	r3, r3, #655	; 0x28f
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	09db      	lsrs	r3, r3, #7
 8004998:	b2da      	uxtb	r2, r3
 800499a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800499e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80049a2:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 80049a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80049a8:	f2a3 238e 	subw	r3, r3, #654	; 0x28e
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b07      	cmp	r3, #7
 80049b0:	d912      	bls.n	80049d8 <dcd_edpt_open+0x1364>
 80049b2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80049b6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <dcd_edpt_open+0x1444>)
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80049c2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d000      	beq.n	80049d4 <dcd_edpt_open+0x1360>
 80049d2:	be00      	bkpt	0x0000
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <dcd_edpt_open+0x1448>)
 80049d6:	e015      	b.n	8004a04 <dcd_edpt_open+0x1390>
  return &xfer_status[epnum][dir];
 80049d8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80049dc:	f2a3 238e 	subw	r3, r3, #654	; 0x28e
 80049e0:	7819      	ldrb	r1, [r3, #0]
 80049e2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80049e6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	0092      	lsls	r2, r2, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	0093      	lsls	r3, r2, #2
 80049f4:	461a      	mov	r2, r3
 80049f6:	460b      	mov	r3, r1
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	4a2e      	ldr	r2, [pc, #184]	; (8004abc <dcd_edpt_open+0x1448>)
 8004a02:	4413      	add	r3, r2
  xfer_ctl_ptr(p_endpoint_desc->bEndpointAddress)->max_packet_size = packet_size;
 8004a04:	f8b7 2298 	ldrh.w	r2, [r7, #664]	; 0x298
 8004a08:	81da      	strh	r2, [r3, #14]
  xfer_ctl_ptr(p_endpoint_desc->bEndpointAddress)->ep_idx = ep_idx;
 8004a0a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a0e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	789b      	ldrb	r3, [r3, #2]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a1c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8004a20:	601a      	str	r2, [r3, #0]
  uint8_t epnum = tu_edpt_number(ep_addr);
 8004a22:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a26:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a32:	f2a3 2381 	subw	r3, r3, #641	; 0x281
 8004a36:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004a38:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a3c:	f2a3 2381 	subw	r3, r3, #641	; 0x281
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a4c:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 8004a50:	701a      	strb	r2, [r3, #0]
  uint8_t dir = tu_edpt_dir(ep_addr);
 8004a52:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a56:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a62:	f2a3 2383 	subw	r3, r3, #643	; 0x283
 8004a66:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004a68:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a6c:	f2a3 2383 	subw	r3, r3, #643	; 0x283
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	09db      	lsrs	r3, r3, #7
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a7a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8004a7e:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 8004a80:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a84:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b07      	cmp	r3, #7
 8004a8c:	d918      	bls.n	8004ac0 <dcd_edpt_open+0x144c>
 8004a8e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a92:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <dcd_edpt_open+0x1444>)
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004a9e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d000      	beq.n	8004ab0 <dcd_edpt_open+0x143c>
 8004aae:	be00      	bkpt	0x0000
 8004ab0:	4b02      	ldr	r3, [pc, #8]	; (8004abc <dcd_edpt_open+0x1448>)
 8004ab2:	e01b      	b.n	8004aec <dcd_edpt_open+0x1478>
 8004ab4:	40005c00 	.word	0x40005c00
 8004ab8:	e000edf0 	.word	0xe000edf0
 8004abc:	2000020c 	.word	0x2000020c
  return &xfer_status[epnum][dir];
 8004ac0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004ac4:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 8004ac8:	7819      	ldrb	r1, [r3, #0]
 8004aca:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004ace:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	0093      	lsls	r3, r2, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	460b      	mov	r3, r1
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <dcd_edpt_open+0x148c>)
 8004aea:	4413      	add	r3, r2
  xfer_ctl_ptr(p_endpoint_desc->bEndpointAddress)->ep_idx = ep_idx;
 8004aec:	f897 229b 	ldrb.w	r2, [r7, #667]	; 0x29b
 8004af0:	749a      	strb	r2, [r3, #18]

  return true;
 8004af2:	2301      	movs	r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000020c 	.word	0x2000020c

08004b04 <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <dcd_transmit_packet>:
}

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b0aa      	sub	sp, #168	; 0xa8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	891a      	ldrh	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	895b      	ldrh	r3, [r3, #10]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	89db      	ldrh	r3, [r3, #14]
 8004b36:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d903      	bls.n	8004b46 <dcd_transmit_packet+0x2e>
  {
    len = xfer->max_packet_size;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	89db      	ldrh	r3, [r3, #14]
 8004b42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  }

  uint16_t ep_reg = pcd_get_endpoint(USB, ep_ix);
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	4a8e      	ldr	r2, [pc, #568]	; (8004d84 <dcd_transmit_packet+0x26c>)
 8004b4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004b52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return *reg;
 8004b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  uint16_t addr_ptr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	4a84      	ldr	r2, [pc, #528]	; (8004d84 <dcd_transmit_packet+0x26c>)
 8004b72:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 0u);
 8004b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004b84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  total_word_offset *= PMA_STRIDE;
 8004ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return &(pma[total_word_offset]);
 8004bb0:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <dcd_transmit_packet+0x270>)
 8004bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 0u);
 8004bba:	bf00      	nop
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

  if (xfer->ff)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <dcd_transmit_packet+0xc6>
  {
    dcd_write_packet_memory_ff(xfer->ff, addr_ptr, len);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004bd2:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	; 0xa2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fe64 	bl	80058a4 <dcd_write_packet_memory_ff>
 8004bdc:	e00b      	b.n	8004bf6 <dcd_transmit_packet+0xde>
  }
  else
  {
    dcd_write_packet_memory(addr_ptr, &(xfer->buffer[xfer->queued_len]), len);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	8952      	ldrh	r2, [r2, #10]
 8004be6:	1899      	adds	r1, r3, r2
 8004be8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004bec:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe13 	bl	800581c <dcd_write_packet_memory>
  }
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	895a      	ldrh	r2, [r3, #10]
 8004bfa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004bfe:	4413      	add	r3, r2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	815a      	strh	r2, [r3, #10]

  /* Write into correct register when ISOCHRONOUS (double buffered) */
  if ( (ep_reg & USB_EP_DTOG_TX) && ( (ep_reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS) ) {
 8004c06:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03d      	beq.n	8004c8e <dcd_transmit_packet+0x176>
 8004c12:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8004c16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	d136      	bne.n	8004c8e <dcd_transmit_packet+0x176>
    pcd_set_ep_rx_cnt(USB, ep_ix, len);
 8004c20:	887a      	ldrh	r2, [r7, #2]
 8004c22:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004c26:	4957      	ldr	r1, [pc, #348]	; (8004d84 <dcd_transmit_packet+0x26c>)
 8004c28:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004c2a:	67ba      	str	r2, [r7, #120]	; 0x78
 8004c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c30:	673b      	str	r3, [r7, #112]	; 0x70
 8004c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8004c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	3303      	adds	r3, #3
 8004c3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c3e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c40:	667b      	str	r3, [r7, #100]	; 0x64
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c52:	4413      	add	r3, r2
 8004c54:	663b      	str	r3, [r7, #96]	; 0x60
  total_word_offset *= PMA_STRIDE;
 8004c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	663b      	str	r3, [r7, #96]	; 0x60
  return &(pma[total_word_offset]);
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <dcd_transmit_packet+0x270>)
 8004c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8004c64:	bf00      	nop
  __IO uint16_t * reg = pcd_ep_rx_cnt_ptr(USBx, bEpIdx);
 8004c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  *reg = (uint16_t) (*reg & (uint16_t) ~0x3FFU) | (wCount & 0x3FFU);
 8004c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c88:	801a      	strh	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	e035      	b.n	8004cfa <dcd_transmit_packet+0x1e2>
  } else {
    pcd_set_ep_tx_cnt(USB, ep_ix, len);
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004c94:	493b      	ldr	r1, [pc, #236]	; (8004d84 <dcd_transmit_packet+0x26c>)
 8004c96:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c98:	657a      	str	r2, [r7, #84]	; 0x54
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 1u);
 8004ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3301      	adds	r3, #1
 8004caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cac:	647a      	str	r2, [r7, #68]	; 0x44
 8004cae:	643b      	str	r3, [r7, #64]	; 0x40
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc0:	4413      	add	r3, r2
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  total_word_offset *= PMA_STRIDE;
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return &(pma[total_word_offset]);
 8004cca:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <dcd_transmit_packet+0x270>)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 1u);
 8004cd2:	bf00      	nop
  __IO uint16_t * reg = pcd_ep_tx_cnt_ptr(USBx, bEpIdx);
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  *reg = (uint16_t) (*reg & (uint16_t) ~0x3FFU) | (wCount & 0x3FFU);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ce0:	f023 0303 	bic.w	r3, r3, #3
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	801a      	strh	r2, [r3, #0]
}
 8004cf8:	bf00      	nop
  }

  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <dcd_transmit_packet+0x26c>)
 8004cfe:	637a      	str	r2, [r7, #52]	; 0x34
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
 8004d02:	2330      	movs	r3, #48	; 0x30
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	623b      	str	r3, [r7, #32]
  return *reg;
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8004d1e:	61fb      	str	r3, [r7, #28]
  regVal &= USB_EPTX_DTOGMASK;
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004d26:	4013      	ands	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <dcd_transmit_packet+0x224>
    regVal ^= USB_EPTX_DTOG1;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f083 0310 	eor.w	r3, r3, #16
 8004d3a:	61fb      	str	r3, [r7, #28]
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <dcd_transmit_packet+0x236>
    regVal ^= USB_EPTX_DTOG2;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f083 0320 	eor.w	r3, r3, #32
 8004d4c:	61fb      	str	r3, [r7, #28]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	613b      	str	r3, [r7, #16]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  *reg = (uint16_t)wRegValue;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	801a      	strh	r2, [r3, #0]
}
 8004d78:	bf00      	nop
} /* pcd_set_ep_tx_status */
 8004d7a:	bf00      	nop
}
 8004d7c:	bf00      	nop
 8004d7e:	37a8      	adds	r7, #168	; 0xa8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40005c00 	.word	0x40005c00
 8004d88:	40006000 	.word	0x40006000

08004d8c <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b0b0      	sub	sp, #192	; 0xc0
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	603a      	str	r2, [r7, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	71bb      	strb	r3, [r7, #6]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint8_t epnum = tu_edpt_number(ep_addr);
 8004da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004db2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8004db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
  uint8_t dir = tu_edpt_dir(ep_addr);
 8004dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004dca:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 8004dd6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d90c      	bls.n	8004df8 <dcd_edpt_xfer+0x6c>
 8004dde:	4bb3      	ldr	r3, [pc, #716]	; (80050ac <dcd_edpt_xfer+0x320>)
 8004de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d000      	beq.n	8004df4 <dcd_edpt_xfer+0x68>
 8004df2:	be00      	bkpt	0x0000
 8004df4:	4bae      	ldr	r3, [pc, #696]	; (80050b0 <dcd_edpt_xfer+0x324>)
 8004df6:	e00f      	b.n	8004e18 <dcd_edpt_xfer+0x8c>
  return &xfer_status[epnum][dir];
 8004df8:	f897 10b2 	ldrb.w	r1, [r7, #178]	; 0xb2
 8004dfc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8004e00:	461a      	mov	r2, r3
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	0093      	lsls	r3, r2, #2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	4aa6      	ldr	r2, [pc, #664]	; (80050b0 <dcd_edpt_xfer+0x324>)
 8004e16:	4413      	add	r3, r2
  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 8004e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint8_t const ep_idx = xfer->ep_idx;
 8004e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e20:	7c9b      	ldrb	r3, [r3, #18]
 8004e22:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 8004e2c:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8004e30:	09db      	lsrs	r3, r3, #7
 8004e32:	b2db      	uxtb	r3, r3
  uint8_t const dir    = tu_edpt_dir(ep_addr);
 8004e34:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba

  xfer->buffer = buffer;
 8004e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	601a      	str	r2, [r3, #0]
  xfer->ff     = NULL;
 8004e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8004e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e4c:	88ba      	ldrh	r2, [r7, #4]
 8004e4e:	811a      	strh	r2, [r3, #8]
  xfer->queued_len = 0;
 8004e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e54:	2200      	movs	r2, #0
 8004e56:	815a      	strh	r2, [r3, #10]

  if ( dir == TUSB_DIR_OUT )
 8004e58:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 8182 	bne.w	8005166 <dcd_edpt_xfer+0x3da>
  {
    // A setup token can occur immediately after an OUT STATUS packet so make sure we have a valid
    // buffer for the control endpoint.
    if (ep_idx == 0 && buffer == NULL)
 8004e62:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <dcd_edpt_xfer+0xec>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <dcd_edpt_xfer+0xec>
    {
        xfer->buffer = (uint8_t*)_setup_packet;
 8004e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e74:	4a8f      	ldr	r2, [pc, #572]	; (80050b4 <dcd_edpt_xfer+0x328>)
 8004e76:	601a      	str	r2, [r3, #0]
    }

    if(total_bytes > xfer->max_packet_size)
 8004e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e7c:	89db      	ldrh	r3, [r3, #14]
 8004e7e:	88ba      	ldrh	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	f240 80a2 	bls.w	8004fca <dcd_edpt_xfer+0x23e>
    {
      pcd_set_ep_rx_bufsize(USB,ep_idx,xfer->max_packet_size);
 8004e86:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8004e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e8e:	89d2      	ldrh	r2, [r2, #14]
 8004e90:	4611      	mov	r1, r2
 8004e92:	4a89      	ldr	r2, [pc, #548]	; (80050b8 <dcd_edpt_xfer+0x32c>)
 8004e94:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e9c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8004eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	3303      	adds	r3, #3
 8004eb8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004ebc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ed8:	4413      	add	r3, r2
 8004eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  total_word_offset *= PMA_STRIDE;
 8004ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return &(pma[total_word_offset]);
 8004ee8:	4a74      	ldr	r2, [pc, #464]	; (80050bc <dcd_edpt_xfer+0x330>)
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8004ef2:	bf00      	nop
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpIdx));
 8004ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  wCount = pcd_aligned_buffer_size(wCount);
 8004ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  uint16_t blocksize = (size > 62) ? 32 : 2;
 8004f02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f06:	2b3e      	cmp	r3, #62	; 0x3e
 8004f08:	d901      	bls.n	8004f0e <dcd_edpt_xfer+0x182>
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	e000      	b.n	8004f10 <dcd_edpt_xfer+0x184>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  uint16_t numblocks = (size + blocksize - 1) / blocksize ;
 8004f14:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8004f18:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004f1c:	4413      	add	r3, r2
 8004f1e:	1e5a      	subs	r2, r3, #1
 8004f20:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f28:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  return numblocks * blocksize;
 8004f2c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004f30:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	b29b      	uxth	r3, r3
  wCount = pcd_aligned_buffer_size(wCount);
 8004f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f48:	67bb      	str	r3, [r7, #120]	; 0x78
  uint16_t blocksize = (wCount > 62) ? 1 : 0;
 8004f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f4e:	bf8c      	ite	hi
 8004f50:	2301      	movhi	r3, #1
 8004f52:	2300      	movls	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  uint16_t numblocks = wCount / (blocksize ? 32 : 2);
 8004f5a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <dcd_edpt_xfer+0x1da>
 8004f62:	2320      	movs	r3, #32
 8004f64:	e000      	b.n	8004f68 <dcd_edpt_xfer+0x1dc>
 8004f66:	2302      	movs	r3, #2
 8004f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 8004f72:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004f76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d001      	beq.n	8004f82 <dcd_edpt_xfer+0x1f6>
 8004f7e:	2220      	movs	r2, #32
 8004f80:	e000      	b.n	8004f84 <dcd_edpt_xfer+0x1f8>
 8004f82:	2202      	movs	r2, #2
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <dcd_edpt_xfer+0x218>
 8004f90:	4b46      	ldr	r3, [pc, #280]	; (80050ac <dcd_edpt_xfer+0x320>)
 8004f92:	673b      	str	r3, [r7, #112]	; 0x70
 8004f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d012      	beq.n	8004fc6 <dcd_edpt_xfer+0x23a>
 8004fa0:	be00      	bkpt	0x0000
 8004fa2:	e010      	b.n	8004fc6 <dcd_edpt_xfer+0x23a>
  *pdwReg = (blocksize << 15) | ((numblocks - blocksize) << 10);
 8004fa4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004fa8:	03db      	lsls	r3, r3, #15
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8004fb0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004fb4:	1acb      	subs	r3, r1, r3
 8004fb6:	029b      	lsls	r3, r3, #10
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc2:	801a      	strh	r2, [r3, #0]
}
 8004fc4:	e08c      	b.n	80050e0 <dcd_edpt_xfer+0x354>
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 8004fc6:	bf00      	nop
}
 8004fc8:	e08a      	b.n	80050e0 <dcd_edpt_xfer+0x354>
    } else {
      pcd_set_ep_rx_bufsize(USB,ep_idx,total_bytes);
 8004fca:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8004fce:	88bb      	ldrh	r3, [r7, #4]
 8004fd0:	4939      	ldr	r1, [pc, #228]	; (80050b8 <dcd_edpt_xfer+0x32c>)
 8004fd2:	66f9      	str	r1, [r7, #108]	; 0x6c
 8004fd4:	66ba      	str	r2, [r7, #104]	; 0x68
 8004fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	663b      	str	r3, [r7, #96]	; 0x60
 8004fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fde:	65fb      	str	r3, [r7, #92]	; 0x5c
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fea:	657b      	str	r3, [r7, #84]	; 0x54
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffc:	4413      	add	r3, r2
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
  total_word_offset *= PMA_STRIDE;
 8005000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	653b      	str	r3, [r7, #80]	; 0x50
  return &(pma[total_word_offset]);
 8005006:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <dcd_edpt_xfer+0x330>)
 8005008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
  return pcd_btable_word_ptr(USBx,(bEpIdx)*4u + 3u);
 800500e:	bf00      	nop
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpIdx));
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c
  wCount = pcd_aligned_buffer_size(wCount);
 8005012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005014:	b29b      	uxth	r3, r3
 8005016:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  uint16_t blocksize = (size > 62) ? 32 : 2;
 800501a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800501e:	2b3e      	cmp	r3, #62	; 0x3e
 8005020:	d901      	bls.n	8005026 <dcd_edpt_xfer+0x29a>
 8005022:	2320      	movs	r3, #32
 8005024:	e000      	b.n	8005028 <dcd_edpt_xfer+0x29c>
 8005026:	2302      	movs	r3, #2
 8005028:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  uint16_t numblocks = (size + blocksize - 1) / blocksize ;
 800502c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005030:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005034:	4413      	add	r3, r2
 8005036:	1e5a      	subs	r2, r3, #1
 8005038:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800503c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005040:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  return numblocks * blocksize;
 8005044:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005048:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
  wCount = pcd_aligned_buffer_size(wCount);
 8005052:	667b      	str	r3, [r7, #100]	; 0x64
 8005054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005056:	643b      	str	r3, [r7, #64]	; 0x40
 8005058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t blocksize = (wCount > 62) ? 1 : 0;
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2b3e      	cmp	r3, #62	; 0x3e
 8005060:	bf8c      	ite	hi
 8005062:	2301      	movhi	r3, #1
 8005064:	2300      	movls	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t numblocks = wCount / (blocksize ? 32 : 2);
 800506a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <dcd_edpt_xfer+0x2e8>
 8005070:	2320      	movs	r3, #32
 8005072:	e000      	b.n	8005076 <dcd_edpt_xfer+0x2ea>
 8005074:	2302      	movs	r3, #2
 8005076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	873b      	strh	r3, [r7, #56]	; 0x38
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 800507e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005080:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005082:	2a00      	cmp	r2, #0
 8005084:	d001      	beq.n	800508a <dcd_edpt_xfer+0x2fe>
 8005086:	2220      	movs	r2, #32
 8005088:	e000      	b.n	800508c <dcd_edpt_xfer+0x300>
 800508a:	2202      	movs	r2, #2
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	461a      	mov	r2, r3
 8005092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <dcd_edpt_xfer+0x334>
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <dcd_edpt_xfer+0x320>)
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d019      	beq.n	80050dc <dcd_edpt_xfer+0x350>
 80050a8:	be00      	bkpt	0x0000
 80050aa:	e017      	b.n	80050dc <dcd_edpt_xfer+0x350>
 80050ac:	e000edf0 	.word	0xe000edf0
 80050b0:	2000020c 	.word	0x2000020c
 80050b4:	2000036c 	.word	0x2000036c
 80050b8:	40005c00 	.word	0x40005c00
 80050bc:	40006000 	.word	0x40006000
  *pdwReg = (blocksize << 15) | ((numblocks - blocksize) << 10);
 80050c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050c2:	03db      	lsls	r3, r3, #15
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80050c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050ca:	1acb      	subs	r3, r1, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d8:	801a      	strh	r2, [r3, #0]
}
 80050da:	e000      	b.n	80050de <dcd_edpt_xfer+0x352>
  TU_ASSERT((wCount - (numblocks * (blocksize ? 32 : 2))) == 0, /**/);
 80050dc:	bf00      	nop
}
 80050de:	bf00      	nop
    }
    pcd_set_ep_rx_status(USB, ep_idx, USB_EP_RX_VALID);
 80050e0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80050e4:	4a26      	ldr	r2, [pc, #152]	; (8005180 <dcd_edpt_xfer+0x3f4>)
 80050e6:	633a      	str	r2, [r7, #48]	; 0x30
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	623b      	str	r3, [r7, #32]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	61fb      	str	r3, [r7, #28]
  return *reg;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8005108:	61bb      	str	r3, [r7, #24]
  regVal &= USB_EPRX_DTOGMASK;
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005110:	4013      	ands	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <dcd_edpt_xfer+0x39a>
    regVal ^= USB_EPRX_DTOG1;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005124:	61bb      	str	r3, [r7, #24]
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <dcd_edpt_xfer+0x3ac>
    regVal ^= USB_EPRX_DTOG2;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005136:	61bb      	str	r3, [r7, #24]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	60fb      	str	r3, [r7, #12]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]
  *reg = (uint16_t)wRegValue;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	b29a      	uxth	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	801a      	strh	r2, [r3, #0]
}
 8005162:	bf00      	nop
} /* pcd_set_ep_rx_status */
 8005164:	e007      	b.n	8005176 <dcd_edpt_xfer+0x3ea>
  }
  else // IN
  {
    dcd_transmit_packet(xfer,ep_idx);
 8005166:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005172:	f7ff fcd1 	bl	8004b18 <dcd_transmit_packet>
  }
  return true;
 8005176:	2301      	movs	r3, #1
}
 8005178:	4618      	mov	r0, r3
 800517a:	37c0      	adds	r7, #192	; 0xc0
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40005c00 	.word	0x40005c00

08005184 <dcd_edpt_stall>:
  }
  return true;
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8005184:	b480      	push	{r7}
 8005186:	b09f      	sub	sp, #124	; 0x7c
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	460a      	mov	r2, r1
 800518e:	71fb      	strb	r3, [r7, #7]
 8005190:	4613      	mov	r3, r2
 8005192:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 8005194:	79bb      	ldrb	r3, [r7, #6]
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint8_t epnum = tu_edpt_number(ep_addr);
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80051a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  uint8_t dir = tu_edpt_dir(ep_addr);
 80051ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80051b6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 80051c2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80051c6:	2b07      	cmp	r3, #7
 80051c8:	d90a      	bls.n	80051e0 <dcd_edpt_stall+0x5c>
 80051ca:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <dcd_edpt_stall+0x1b4>)
 80051cc:	667b      	str	r3, [r7, #100]	; 0x64
 80051ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d000      	beq.n	80051dc <dcd_edpt_stall+0x58>
 80051da:	be00      	bkpt	0x0000
 80051dc:	4b57      	ldr	r3, [pc, #348]	; (800533c <dcd_edpt_stall+0x1b8>)
 80051de:	e00f      	b.n	8005200 <dcd_edpt_stall+0x7c>
  return &xfer_status[epnum][dir];
 80051e0:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 80051e4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80051e8:	461a      	mov	r2, r3
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	0093      	lsls	r3, r2, #2
 80051f0:	461a      	mov	r2, r3
 80051f2:	460b      	mov	r3, r1
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	4a4f      	ldr	r2, [pc, #316]	; (800533c <dcd_edpt_stall+0x1b8>)
 80051fe:	4413      	add	r3, r2
  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 8005200:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t const ep_idx = xfer->ep_idx;
 8005202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005204:	7c9b      	ldrb	r3, [r3, #18]
 8005206:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800520a:	79bb      	ldrb	r3, [r7, #6]
 800520c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8005210:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	b2db      	uxtb	r3, r3
  uint8_t const dir    = tu_edpt_dir(ep_addr);
 8005218:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

  if (dir == TUSB_DIR_IN)
 800521c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005220:	2b01      	cmp	r3, #1
 8005222:	d141      	bne.n	80052a8 <dcd_edpt_stall+0x124>
  { // IN
    pcd_set_ep_tx_status(USB, ep_idx, USB_EP_TX_STALL);
 8005224:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005228:	4a45      	ldr	r2, [pc, #276]	; (8005340 <dcd_edpt_stall+0x1bc>)
 800522a:	663a      	str	r2, [r7, #96]	; 0x60
 800522c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522e:	2310      	movs	r3, #16
 8005230:	65bb      	str	r3, [r7, #88]	; 0x58
 8005232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005234:	657b      	str	r3, [r7, #84]	; 0x54
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	653b      	str	r3, [r7, #80]	; 0x50
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800523a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return *reg;
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800524a:	64bb      	str	r3, [r7, #72]	; 0x48
  regVal &= USB_EPTX_DTOGMASK;
 800524c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8005252:	4013      	ands	r3, r2
 8005254:	64bb      	str	r3, [r7, #72]	; 0x48
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8005256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <dcd_edpt_stall+0xe4>
    regVal ^= USB_EPTX_DTOG1;
 8005260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005262:	f083 0310 	eor.w	r3, r3, #16
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8005268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <dcd_edpt_stall+0xf6>
    regVal ^= USB_EPTX_DTOG2;
 8005272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005274:	f083 0320 	eor.w	r3, r3, #32
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 800527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
 8005286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528c:	643b      	str	r3, [r7, #64]	; 0x40
 800528e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	63bb      	str	r3, [r7, #56]	; 0x38
  *reg = (uint16_t)wRegValue;
 800529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	801a      	strh	r2, [r3, #0]
}
 80052a4:	bf00      	nop
} /* pcd_set_ep_tx_status */
 80052a6:	e042      	b.n	800532e <dcd_edpt_stall+0x1aa>
  }
  else
  { // OUT
    pcd_set_ep_rx_status(USB, ep_idx, USB_EP_RX_STALL);
 80052a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80052ac:	4a24      	ldr	r2, [pc, #144]	; (8005340 <dcd_edpt_stall+0x1bc>)
 80052ae:	637a      	str	r2, [r7, #52]	; 0x34
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30
 80052b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80052c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	623b      	str	r3, [r7, #32]
  return *reg;
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 80052d0:	61fb      	str	r3, [r7, #28]
  regVal &= USB_EPRX_DTOGMASK;
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80052d8:	4013      	ands	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <dcd_edpt_stall+0x16a>
    regVal ^= USB_EPRX_DTOG1;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052ec:	61fb      	str	r3, [r7, #28]
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <dcd_edpt_stall+0x17c>
    regVal ^= USB_EPRX_DTOG2;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052fe:	61fb      	str	r3, [r7, #28]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	613b      	str	r3, [r7, #16]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  *reg = (uint16_t)wRegValue;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	801a      	strh	r2, [r3, #0]
}
 800532a:	bf00      	nop
} /* pcd_set_ep_rx_status */
 800532c:	bf00      	nop
  }
}
 800532e:	bf00      	nop
 8005330:	377c      	adds	r7, #124	; 0x7c
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	e000edf0 	.word	0xe000edf0
 800533c:	2000020c 	.word	0x2000020c
 8005340:	40005c00 	.word	0x40005c00

08005344 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8005344:	b480      	push	{r7}
 8005346:	b0cb      	sub	sp, #300	; 0x12c
 8005348:	af00      	add	r7, sp, #0
 800534a:	4602      	mov	r2, r0
 800534c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005350:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800535a:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800535e:	460a      	mov	r2, r1
 8005360:	701a      	strb	r2, [r3, #0]
  (void)rhport;

  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 8005362:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005366:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  uint8_t epnum = tu_edpt_number(ep_addr);
 8005370:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800537a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800537e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t dir = tu_edpt_dir(ep_addr);
 8005388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005392:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8005396:	09db      	lsrs	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
  TU_ASSERT(epnum < MAX_EP_COUNT, &xfer_status[0][0]);
 800539e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80053a2:	2b07      	cmp	r3, #7
 80053a4:	d90c      	bls.n	80053c0 <dcd_edpt_clear_stall+0x7c>
 80053a6:	4b97      	ldr	r3, [pc, #604]	; (8005604 <dcd_edpt_clear_stall+0x2c0>)
 80053a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d000      	beq.n	80053bc <dcd_edpt_clear_stall+0x78>
 80053ba:	be00      	bkpt	0x0000
 80053bc:	4b92      	ldr	r3, [pc, #584]	; (8005608 <dcd_edpt_clear_stall+0x2c4>)
 80053be:	e00f      	b.n	80053e0 <dcd_edpt_clear_stall+0x9c>
  return &xfer_status[epnum][dir];
 80053c0:	f897 111a 	ldrb.w	r1, [r7, #282]	; 0x11a
 80053c4:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80053c8:	461a      	mov	r2, r3
 80053ca:	0092      	lsls	r2, r2, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	0093      	lsls	r3, r2, #2
 80053d0:	461a      	mov	r2, r3
 80053d2:	460b      	mov	r3, r1
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	4a8a      	ldr	r2, [pc, #552]	; (8005608 <dcd_edpt_clear_stall+0x2c4>)
 80053de:	4413      	add	r3, r2
  xfer_ctl_t * xfer = xfer_ctl_ptr(ep_addr);
 80053e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint8_t const ep_idx = xfer->ep_idx;
 80053e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053e8:	7c9b      	ldrb	r3, [r3, #18]
 80053ea:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 80053ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80053f2:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 80053fc:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	b2db      	uxtb	r3, r3
  uint8_t const dir    = tu_edpt_dir(ep_addr);
 8005404:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122

  if (dir == TUSB_DIR_IN)
 8005408:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800540c:	2b01      	cmp	r3, #1
 800540e:	f040 80ff 	bne.w	8005610 <dcd_edpt_clear_stall+0x2cc>
  { // IN
    if (pcd_get_eptype(USB, ep_idx) !=  USB_EP_ISOCHRONOUS) {
 8005412:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005416:	4a7d      	ldr	r2, [pc, #500]	; (800560c <dcd_edpt_clear_stall+0x2c8>)
 8005418:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800541c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005420:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005424:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005430:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return *reg;
 8005440:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8005448:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  regVal &= USB_EP_T_FIELD;
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005454:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return regVal;
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d062      	beq.n	8005528 <dcd_edpt_clear_stall+0x1e4>
      pcd_set_ep_tx_status(USB, ep_idx, USB_EP_TX_NAK);
 8005462:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005466:	4a69      	ldr	r2, [pc, #420]	; (800560c <dcd_edpt_clear_stall+0x2c8>)
 8005468:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800546c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005470:	2320      	movs	r3, #32
 8005472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005486:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800548a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return *reg;
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800549e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  regVal &= USB_EPTX_DTOGMASK;
 80054a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054a6:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80054aa:	4013      	ands	r3, r2
 80054ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 80054b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <dcd_edpt_clear_stall+0x184>
    regVal ^= USB_EPTX_DTOG1;
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c0:	f083 0310 	eor.w	r3, r3, #16
 80054c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 80054c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <dcd_edpt_clear_stall+0x19c>
    regVal ^= USB_EPTX_DTOG2;
 80054d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d8:	f083 0320 	eor.w	r3, r3, #32
 80054dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005508:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800550c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  *reg = (uint16_t)wRegValue;
 8005518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005522:	801a      	strh	r2, [r3, #0]
}
 8005524:	bf00      	nop
} /* pcd_set_ep_tx_status */
 8005526:	bf00      	nop
    }

    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_tx_dtog(USB, ep_idx);
 8005528:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 800552c:	4a37      	ldr	r2, [pc, #220]	; (800560c <dcd_edpt_clear_stall+0x2c8>)
 800552e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800553a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800553e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800554a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return *reg;
 8005556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800555e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if((regVal & USB_EP_DTOG_TX) != 0)
 8005562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 814a 	beq.w	8005804 <dcd_edpt_clear_stall+0x4c0>
 8005570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800558c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return *reg;
 80055a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 80055a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  regVal &= USB_EPREG_MASK;
 80055ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80055b0:	f648 738f 	movw	r3, #36751	; 0x8f8f
 80055b4:	4013      	ands	r3, r2
 80055b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 80055ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80055e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80055e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  *reg = (uint16_t)wRegValue;
 80055f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055fc:	801a      	strh	r2, [r3, #0]
}
 80055fe:	bf00      	nop
}
 8005600:	bf00      	nop
}
 8005602:	e0ff      	b.n	8005804 <dcd_edpt_clear_stall+0x4c0>
 8005604:	e000edf0 	.word	0xe000edf0
 8005608:	2000020c 	.word	0x2000020c
 800560c:	40005c00 	.word	0x40005c00
  }
  else
  { // OUT
    if (pcd_get_eptype(USB, ep_idx) !=  USB_EP_ISOCHRONOUS) {
 8005610:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005614:	4a80      	ldr	r2, [pc, #512]	; (8005818 <dcd_edpt_clear_stall+0x4d4>)
 8005616:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800561a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800561e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800562a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800562e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return *reg;
 800563c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
  regVal &= USB_EP_T_FIELD;
 8005644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800564a:	67bb      	str	r3, [r7, #120]	; 0x78
  return regVal;
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005652:	d042      	beq.n	80056da <dcd_edpt_clear_stall+0x396>
      pcd_set_ep_rx_status(USB, ep_idx, USB_EP_RX_NAK);
 8005654:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005658:	4a6f      	ldr	r2, [pc, #444]	; (8005818 <dcd_edpt_clear_stall+0x4d4>)
 800565a:	677a      	str	r2, [r7, #116]	; 0x74
 800565c:	673b      	str	r3, [r7, #112]	; 0x70
 800565e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005666:	66bb      	str	r3, [r7, #104]	; 0x68
 8005668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566a:	667b      	str	r3, [r7, #100]	; 0x64
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 800566c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800566e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	663b      	str	r3, [r7, #96]	; 0x60
  return *reg;
 8005676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 800567c:	65fb      	str	r3, [r7, #92]	; 0x5c
  regVal &= USB_EPRX_DTOGMASK;
 800567e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005680:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005684:	4013      	ands	r3, r2
 8005686:	65fb      	str	r3, [r7, #92]	; 0x5c
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <dcd_edpt_clear_stall+0x356>
    regVal ^= USB_EPRX_DTOG1;
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005698:	65fb      	str	r3, [r7, #92]	; 0x5c
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 800569a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <dcd_edpt_clear_stall+0x368>
    regVal ^= USB_EPRX_DTOG2;
 80056a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80056bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056be:	657b      	str	r3, [r7, #84]	; 0x54
 80056c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80056c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  *reg = (uint16_t)wRegValue;
 80056ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	801a      	strh	r2, [r3, #0]
}
 80056d6:	bf00      	nop
} /* pcd_set_ep_rx_status */
 80056d8:	bf00      	nop
    }
    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_rx_dtog(USB, ep_idx);
 80056da:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80056de:	4a4e      	ldr	r2, [pc, #312]	; (8005818 <dcd_edpt_clear_stall+0x4d4>)
 80056e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
 80056e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e6:	643b      	str	r3, [r7, #64]	; 0x40
 80056e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80056ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
  return *reg;
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
  if((regVal & USB_EP_DTOG_RX) != 0)
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d07f      	beq.n	8005808 <dcd_edpt_clear_stall+0x4c4>
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005710:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005726:	601a      	str	r2, [r3, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 8005728:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800572c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	009a      	lsls	r2, r3, #2
 800573e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	440a      	add	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
  return *reg;
 800574a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800574e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29a      	uxth	r2, r3
  uint32_t regVal = pcd_get_endpoint(USBx, bEpIdx);
 8005758:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800575c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005760:	601a      	str	r2, [r3, #0]
  regVal &= USB_EPREG_MASK;
 8005762:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005766:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800576a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800576e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8005778:	400b      	ands	r3, r1
 800577a:	6013      	str	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 800577c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005780:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8005784:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005788:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800579c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057b8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80057bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	601a      	str	r2, [r3, #0]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpIdx*2u);
 80057c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	009a      	lsls	r2, r3, #2
 80057da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057e2:	440a      	add	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
  *reg = (uint16_t)wRegValue;
 80057e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80057f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	801a      	strh	r2, [r3, #0]
}
 80057fe:	bf00      	nop
}
 8005800:	bf00      	nop
}
 8005802:	e001      	b.n	8005808 <dcd_edpt_clear_stall+0x4c4>
}
 8005804:	bf00      	nop
 8005806:	e000      	b.n	800580a <dcd_edpt_clear_stall+0x4c6>
}
 8005808:	bf00      	nop
  }
}
 800580a:	bf00      	nop
 800580c:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40005c00 	.word	0x40005c00

0800581c <dcd_write_packet_memory>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, size_t wNBytes)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	81fb      	strh	r3, [r7, #14]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	61fb      	str	r3, [r7, #28]

  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61bb      	str	r3, [r7, #24]
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8005834:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <dcd_write_packet_memory+0x84>)
 8005836:	89fb      	ldrh	r3, [r7, #14]
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  while (n--)
 8005842:	e016      	b.n	8005872 <dcd_write_packet_memory+0x56>
  {
    temp1 = (uint16_t)*srcVal;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	827b      	strh	r3, [r7, #18]
    srcVal++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3301      	adds	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
    temp2 = temp1 | ((uint16_t)(((uint16_t)(*srcVal)) << 8U)) ;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b29a      	uxth	r2, r3
 800585a:	8a7b      	ldrh	r3, [r7, #18]
 800585c:	4313      	orrs	r3, r2
 800585e:	823b      	strh	r3, [r7, #16]
    *pdwVal = temp2;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	8a3a      	ldrh	r2, [r7, #16]
 8005864:	801a      	strh	r2, [r3, #0]
    pdwVal += PMA_STRIDE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3304      	adds	r3, #4
 800586a:	617b      	str	r3, [r7, #20]
    srcVal++;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	3301      	adds	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
  while (n--)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	61fa      	str	r2, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e3      	bne.n	8005844 <dcd_write_packet_memory+0x28>
  }

  if (wNBytes & 0x01)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <dcd_write_packet_memory+0x76>
  {
    temp1 = *srcVal;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	827b      	strh	r3, [r7, #18]
    *pdwVal = temp1;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	8a7a      	ldrh	r2, [r7, #18]
 8005890:	801a      	strh	r2, [r3, #0]
  }

  return true;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	3724      	adds	r7, #36	; 0x24
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40006000 	.word	0x40006000

080058a4 <dcd_write_packet_memory_ff>:
  *        Uses byte-access of system memory and 16-bit access of packet memory
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_write_packet_memory_ff(tu_fifo_t * ff, uint16_t dst, uint16_t wNBytes)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	803b      	strh	r3, [r7, #0]
  // Since we copy from a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  tu_fifo_buffer_info_t info;
  tu_fifo_get_read_info(ff, &info);
 80058b4:	f107 0310 	add.w	r3, r7, #16
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fb ff8f 	bl	80017de <tu_fifo_get_read_info>

  uint16_t cnt_lin =  TU_MIN(wNBytes, info.len_lin);
 80058c0:	8a3b      	ldrh	r3, [r7, #16]
 80058c2:	883a      	ldrh	r2, [r7, #0]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bf28      	it	cs
 80058c8:	4613      	movcs	r3, r2
 80058ca:	83fb      	strh	r3, [r7, #30]
  uint16_t cnt_wrap = TU_MIN(wNBytes - cnt_lin, info.len_wrap);
 80058cc:	8a7b      	ldrh	r3, [r7, #18]
 80058ce:	4619      	mov	r1, r3
 80058d0:	883a      	ldrh	r2, [r7, #0]
 80058d2:	8bfb      	ldrh	r3, [r7, #30]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	428b      	cmp	r3, r1
 80058d8:	bfa8      	it	ge
 80058da:	460b      	movge	r3, r1
 80058dc:	83bb      	strh	r3, [r7, #28]

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part
  // To ensure PMA is always access 16bit aligned (dst aligned to 16 bit)
  if((cnt_lin & 0x01) && cnt_wrap)
 80058de:	8bfb      	ldrh	r3, [r7, #30]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d033      	beq.n	8005950 <dcd_write_packet_memory_ff+0xac>
 80058e8:	8bbb      	ldrh	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d030      	beq.n	8005950 <dcd_write_packet_memory_ff+0xac>
  {
    // Copy first linear part
    dcd_write_packet_memory(dst, info.ptr_lin, cnt_lin &~0x01);
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	8bfb      	ldrh	r3, [r7, #30]
 80058f2:	f023 0201 	bic.w	r2, r3, #1
 80058f6:	887b      	ldrh	r3, [r7, #2]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff8f 	bl	800581c <dcd_write_packet_memory>
    dst += cnt_lin &~0x01;
 80058fe:	8bfb      	ldrh	r3, [r7, #30]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	4413      	add	r3, r2
 800590a:	807b      	strh	r3, [r7, #2]

    // Copy last linear byte & first wrapped byte
    uint16_t tmp = ((uint8_t*)info.ptr_lin)[cnt_lin - 1] | ((uint16_t)(((uint8_t*)info.ptr_wrap)[0]) << 8U);
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	8bfb      	ldrh	r3, [r7, #30]
 8005910:	3b01      	subs	r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b21a      	sxth	r2, r3
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	b21b      	sxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b21b      	sxth	r3, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	81fb      	strh	r3, [r7, #14]
    dcd_write_packet_memory(dst, &tmp, 2);
 8005928:	f107 010e 	add.w	r1, r7, #14
 800592c:	887b      	ldrh	r3, [r7, #2]
 800592e:	2202      	movs	r2, #2
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff ff73 	bl	800581c <dcd_write_packet_memory>
    dst += 2;
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	3302      	adds	r3, #2
 800593a:	807b      	strh	r3, [r7, #2]

    // Copy rest of wrapped byte
    dcd_write_packet_memory(dst, ((uint8_t*)info.ptr_wrap) + 1, cnt_wrap - 1);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	1c59      	adds	r1, r3, #1
 8005940:	8bbb      	ldrh	r3, [r7, #28]
 8005942:	3b01      	subs	r3, #1
 8005944:	461a      	mov	r2, r3
 8005946:	887b      	ldrh	r3, [r7, #2]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff ff67 	bl	800581c <dcd_write_packet_memory>
  {
 800594e:	e012      	b.n	8005976 <dcd_write_packet_memory_ff+0xd2>
  }
  else
  {
    // Copy linear part
    dcd_write_packet_memory(dst, info.ptr_lin, cnt_lin);
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	8bfa      	ldrh	r2, [r7, #30]
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ff60 	bl	800581c <dcd_write_packet_memory>
    dst += info.len_lin;
 800595c:	8a3a      	ldrh	r2, [r7, #16]
 800595e:	887b      	ldrh	r3, [r7, #2]
 8005960:	4413      	add	r3, r2
 8005962:	807b      	strh	r3, [r7, #2]

    if(info.len_wrap)
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <dcd_write_packet_memory_ff+0xd2>
    {
      // Copy wrapped byte
      dcd_write_packet_memory(dst, info.ptr_wrap, cnt_wrap);
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	8bba      	ldrh	r2, [r7, #28]
 800596e:	887b      	ldrh	r3, [r7, #2]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff53 	bl	800581c <dcd_write_packet_memory>
    }
  }

  tu_fifo_advance_read_pointer(ff, cnt_lin + cnt_wrap);
 8005976:	8bfa      	ldrh	r2, [r7, #30]
 8005978:	8bbb      	ldrh	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fb ff15 	bl	80017b0 <tu_fifo_advance_read_pointer>

  return true;
 8005986:	2301      	movs	r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8005990:	b480      	push	{r7}
 8005992:	b08b      	sub	sp, #44	; 0x2c
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	889b      	ldrh	r3, [r3, #4]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059aa:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80059ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d03e      	beq.n	8005a3a <tu_edpt_validate+0xaa>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	dc53      	bgt.n	8005a68 <tu_edpt_validate+0xd8>
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <tu_edpt_validate+0x3a>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d018      	beq.n	80059fa <tu_edpt_validate+0x6a>
 80059c8:	e04e      	b.n	8005a68 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d102      	bne.n	80059d6 <tu_edpt_validate+0x46>
 80059d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d4:	e001      	b.n	80059da <tu_edpt_validate+0x4a>
 80059d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80059da:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80059dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059de:	8afb      	ldrh	r3, [r7, #22]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d943      	bls.n	8005a6c <tu_edpt_validate+0xdc>
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <tu_edpt_validate+0xf4>)
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d000      	beq.n	80059f6 <tu_edpt_validate+0x66>
 80059f4:	be00      	bkpt	0x0000
 80059f6:	2300      	movs	r3, #0
 80059f8:	e03e      	b.n	8005a78 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d10e      	bne.n	8005a1e <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8005a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d033      	beq.n	8005a70 <tu_edpt_validate+0xe0>
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <tu_edpt_validate+0xf4>)
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d000      	beq.n	8005a1a <tu_edpt_validate+0x8a>
 8005a18:	be00      	bkpt	0x0000
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e02c      	b.n	8005a78 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8005a1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d925      	bls.n	8005a70 <tu_edpt_validate+0xe0>
 8005a24:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <tu_edpt_validate+0xf4>)
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d000      	beq.n	8005a36 <tu_edpt_validate+0xa6>
 8005a34:	be00      	bkpt	0x0000
 8005a36:	2300      	movs	r3, #0
 8005a38:	e01e      	b.n	8005a78 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d102      	bne.n	8005a46 <tu_edpt_validate+0xb6>
 8005a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a44:	e000      	b.n	8005a48 <tu_edpt_validate+0xb8>
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8005a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d910      	bls.n	8005a74 <tu_edpt_validate+0xe4>
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <tu_edpt_validate+0xf4>)
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <tu_edpt_validate+0xd4>
 8005a62:	be00      	bkpt	0x0000
 8005a64:	2300      	movs	r3, #0
 8005a66:	e007      	b.n	8005a78 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e005      	b.n	8005a78 <tu_edpt_validate+0xe8>
    break;
 8005a6c:	bf00      	nop
 8005a6e:	e002      	b.n	8005a76 <tu_edpt_validate+0xe6>
    break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <tu_edpt_validate+0xe6>
    break;
 8005a74:	bf00      	nop
  }

  return true;
 8005a76:	2301      	movs	r3, #1
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	372c      	adds	r7, #44	; 0x2c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	e000edf0 	.word	0xe000edf0

08005a88 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b08d      	sub	sp, #52	; 0x34
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4611      	mov	r1, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	460b      	mov	r3, r1
 8005a98:	80fb      	strh	r3, [r7, #6]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa6:	4413      	add	r3, r2
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8005aaa:	e027      	b.n	8005afc <tu_edpt_bind_driver+0x74>
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d116      	bne.n	8005ae8 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	789b      	ldrb	r3, [r3, #2]
 8005abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005ac8:	7fbb      	ldrb	r3, [r7, #30]
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ada:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005adc:	7ffa      	ldrb	r2, [r7, #31]
 8005ade:	09d2      	lsrs	r2, r2, #7
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	797a      	ldrb	r2, [r7, #5]
 8005ae6:	545a      	strb	r2, [r3, r1]
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8005afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d3d3      	bcc.n	8005aac <tu_edpt_bind_driver+0x24>
  }
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3734      	adds	r7, #52	; 0x34
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	2600      	movs	r6, #0
 8005b14:	4d0c      	ldr	r5, [pc, #48]	; (8005b48 <__libc_init_array+0x38>)
 8005b16:	4c0d      	ldr	r4, [pc, #52]	; (8005b4c <__libc_init_array+0x3c>)
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	f000 f830 	bl	8005b84 <_init>
 8005b24:	2600      	movs	r6, #0
 8005b26:	4d0a      	ldr	r5, [pc, #40]	; (8005b50 <__libc_init_array+0x40>)
 8005b28:	4c0a      	ldr	r4, [pc, #40]	; (8005b54 <__libc_init_array+0x44>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08005d30 	.word	0x08005d30
 8005b4c:	08005d30 	.word	0x08005d30
 8005b50:	08005d30 	.word	0x08005d30
 8005b54:	08005d34 	.word	0x08005d34

08005b58 <memcpy>:
 8005b58:	440a      	add	r2, r1
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b60:	d100      	bne.n	8005b64 <memcpy+0xc>
 8005b62:	4770      	bx	lr
 8005b64:	b510      	push	{r4, lr}
 8005b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b70:	d1f9      	bne.n	8005b66 <memcpy+0xe>
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <memset>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	4402      	add	r2, r0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <memset+0xa>
 8005b7c:	4770      	bx	lr
 8005b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b82:	e7f9      	b.n	8005b78 <memset+0x4>

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
