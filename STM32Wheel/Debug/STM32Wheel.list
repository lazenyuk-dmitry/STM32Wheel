
STM32Wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000714c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  000205d4  2**0
                  CONTENTS
  4 .ARM          00000000  080072d8  080072d8  000205d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072d8  080072d8  000205d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005d4  20000000  080072e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200005d4  080078b4  000205d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  080078b4  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1e3  00000000  00000000  000205fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024db  00000000  00000000  0002b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019326  00000000  00000000  0002ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d338  00000000  00000000  0004826e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084565  00000000  00000000  000555a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  000d9b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005d4 	.word	0x200005d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08007240 	.word	0x08007240

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005d8 	.word	0x200005d8
 8000148:	08007240 	.word	0x08007240

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f929 	bl	80003a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f815 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f86d 	bl	8000238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f006 fc5b 	bl	8006a18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  for (uint8_t i=0; i<64; i++)
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e006      	b.n	8000176 <main+0x2a>
  {
	  tx_buffer[i] = i;
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4905      	ldr	r1, [pc, #20]	; (8000180 <main+0x34>)
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	54ca      	strb	r2, [r1, r3]
  for (uint8_t i=0; i<64; i++)
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	3301      	adds	r3, #1
 8000174:	71fb      	strb	r3, [r7, #7]
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	2b3f      	cmp	r3, #63	; 0x3f
 800017a:	d9f5      	bls.n	8000168 <main+0x1c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017c:	e7fe      	b.n	800017c <main+0x30>
 800017e:	bf00      	nop
 8000180:	200005f0 	.word	0x200005f0

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b094      	sub	sp, #80	; 0x50
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f007 f84c 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	f107 0314 	add.w	r3, r7, #20
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b4:	2301      	movs	r3, #1
 80001b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c6:	2302      	movs	r3, #2
 80001c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 ff00 	bl	8001fe0 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e6:	f000 f849 	bl	800027c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f96c 	bl	80024e4 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000212:	f000 f833 	bl	800027c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000216:	2310      	movs	r3, #16
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f002 fac5 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800022c:	f000 f826 	bl	800027c <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	; 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_GPIO_Init+0x40>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <MX_GPIO_Init+0x40>)
 8000244:	f043 0320 	orr.w	r3, r3, #32
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <MX_GPIO_Init+0x40>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0304 	and.w	r3, r3, #4
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000

0800027c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000280:	b672      	cpsid	i
}
 8000282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000284:	e7fe      	b.n	8000284 <Error_Handler+0x8>
	...

08000288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_MspInit+0x5c>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <HAL_MspInit+0x5c>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <HAL_MspInit+0x5c>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_MspInit+0x5c>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <HAL_MspInit+0x5c>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	61d3      	str	r3, [r2, #28]
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <HAL_MspInit+0x5c>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <HAL_MspInit+0x60>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <HAL_MspInit+0x60>)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010000 	.word	0x40010000

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <NMI_Handler+0x4>

080002f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <MemManage_Handler+0x4>

080002fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000332:	f000 f87f 	bl	8000434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000340:	4802      	ldr	r0, [pc, #8]	; (800034c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000342:	f000 fad1 	bl	80008e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000afc 	.word	0x20000afc

08000350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000382:	f7ff ffe5 	bl	8000350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000386:	f006 ff2f 	bl	80071e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff fedf 	bl	800014c <main>
  bx lr
 800038e:	4770      	bx	lr
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	200005d4 	.word	0x200005d4
  ldr r2, =_sidata
 8000398:	080072e0 	.word	0x080072e0
  ldr r2, =_sbss
 800039c:	200005d4 	.word	0x200005d4
  ldr r4, =_ebss
 80003a0:	20000e40 	.word	0x20000e40

080003a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC1_2_IRQHandler>
	...

080003a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <HAL_Init+0x28>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <HAL_Init+0x28>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003b8:	2003      	movs	r0, #3
 80003ba:	f000 f923 	bl	8000604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003be:	200f      	movs	r0, #15
 80003c0:	f000 f808 	bl	80003d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003c4:	f7ff ff60 	bl	8000288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40022000 	.word	0x40022000

080003d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_InitTick+0x54>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_InitTick+0x58>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4619      	mov	r1, r3
 80003e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f93b 	bl	800066e <HAL_SYSTICK_Config>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
 8000400:	e00e      	b.n	8000420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b0f      	cmp	r3, #15
 8000406:	d80a      	bhi.n	800041e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000408:	2200      	movs	r2, #0
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	f04f 30ff 	mov.w	r0, #4294967295
 8000410:	f000 f903 	bl	800061a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <HAL_InitTick+0x5c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800041a:	2300      	movs	r3, #0
 800041c:	e000      	b.n	8000420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800041e:	2301      	movs	r3, #1
}
 8000420:	4618      	mov	r0, r3
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000000 	.word	0x20000000
 800042c:	20000008 	.word	0x20000008
 8000430:	20000004 	.word	0x20000004

08000434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_IncTick+0x1c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_IncTick+0x20>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a03      	ldr	r2, [pc, #12]	; (8000454 <HAL_IncTick+0x20>)
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000008 	.word	0x20000008
 8000454:	20000630 	.word	0x20000630

08000458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return uwTick;
 800045c:	4b02      	ldr	r3, [pc, #8]	; (8000468 <HAL_GetTick+0x10>)
 800045e:	681b      	ldr	r3, [r3, #0]
}
 8000460:	4618      	mov	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000630 	.word	0x20000630

0800046c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f003 0307 	and.w	r3, r3, #7
 800047a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	60d3      	str	r3, [r2, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <__NVIC_GetPriorityGrouping+0x18>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	0a1b      	lsrs	r3, r3, #8
 80004be:	f003 0307 	and.w	r3, r3, #7
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	db0b      	blt.n	80004fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	f003 021f 	and.w	r2, r3, #31
 80004e8:	4906      	ldr	r1, [pc, #24]	; (8000504 <__NVIC_EnableIRQ+0x34>)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	095b      	lsrs	r3, r3, #5
 80004f0:	2001      	movs	r0, #1
 80004f2:	fa00 f202 	lsl.w	r2, r0, r2
 80004f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100

08000508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db0a      	blt.n	8000532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	490c      	ldr	r1, [pc, #48]	; (8000554 <__NVIC_SetPriority+0x4c>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	0112      	lsls	r2, r2, #4
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	440b      	add	r3, r1
 800052c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000530:	e00a      	b.n	8000548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4908      	ldr	r1, [pc, #32]	; (8000558 <__NVIC_SetPriority+0x50>)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	3b04      	subs	r3, #4
 8000540:	0112      	lsls	r2, r2, #4
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	440b      	add	r3, r1
 8000546:	761a      	strb	r2, [r3, #24]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000e100 	.word	0xe000e100
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055c:	b480      	push	{r7}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	f1c3 0307 	rsb	r3, r3, #7
 8000576:	2b04      	cmp	r3, #4
 8000578:	bf28      	it	cs
 800057a:	2304      	movcs	r3, #4
 800057c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3304      	adds	r3, #4
 8000582:	2b06      	cmp	r3, #6
 8000584:	d902      	bls.n	800058c <NVIC_EncodePriority+0x30>
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	3b03      	subs	r3, #3
 800058a:	e000      	b.n	800058e <NVIC_EncodePriority+0x32>
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	f04f 32ff 	mov.w	r2, #4294967295
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	43da      	mvns	r2, r3
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	401a      	ands	r2, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43d9      	mvns	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	4313      	orrs	r3, r2
         );
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3724      	adds	r7, #36	; 0x24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005d0:	d301      	bcc.n	80005d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00f      	b.n	80005f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <SysTick_Config+0x40>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005de:	210f      	movs	r1, #15
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f7ff ff90 	bl	8000508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SysTick_Config+0x40>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Config+0x40>)
 80005f0:	2207      	movs	r2, #7
 80005f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010

08000604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff2d 	bl	800046c <__NVIC_SetPriorityGrouping>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800062c:	f7ff ff42 	bl	80004b4 <__NVIC_GetPriorityGrouping>
 8000630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	6978      	ldr	r0, [r7, #20]
 8000638:	f7ff ff90 	bl	800055c <NVIC_EncodePriority>
 800063c:	4602      	mov	r2, r0
 800063e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff5f 	bl	8000508 <__NVIC_SetPriority>
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	4603      	mov	r3, r0
 800065a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff35 	bl	80004d0 <__NVIC_EnableIRQ>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffa2 	bl	80005c0 <SysTick_Config>
 800067c:	4603      	mov	r3, r0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000688:	b08b      	sub	sp, #44	; 0x2c
 800068a:	af06      	add	r7, sp, #24
 800068c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	e0fd      	b.n	8000894 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f006 fb0d 	bl	8006ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2203      	movs	r2, #3
 80006b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f952 	bl	8002968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	687e      	ldr	r6, [r7, #4]
 80006cc:	466d      	mov	r5, sp
 80006ce:	f106 0410 	add.w	r4, r6, #16
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	602b      	str	r3, [r5, #0]
 80006da:	1d33      	adds	r3, r6, #4
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f002 f91c 	bl	800291c <USB_CoreInit>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2202      	movs	r2, #2
 80006ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e0ce      	b.n	8000894 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f94d 	bl	800299c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e04c      	b.n	80007a2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	3301      	adds	r3, #1
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000732:	7bfa      	ldrb	r2, [r7, #15]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	b298      	uxth	r0, r3
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3336      	adds	r3, #54	; 0x36
 8000746:	4602      	mov	r2, r0
 8000748:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	440b      	add	r3, r1
 800075a:	3303      	adds	r3, #3
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000760:	7bfa      	ldrb	r2, [r7, #15]
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	440b      	add	r3, r1
 800076e:	3338      	adds	r3, #56	; 0x38
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	440b      	add	r3, r1
 8000782:	333c      	adds	r3, #60	; 0x3c
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000788:	7bfa      	ldrb	r2, [r7, #15]
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	440b      	add	r3, r1
 8000796:	3340      	adds	r3, #64	; 0x40
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	3301      	adds	r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d3ad      	bcc.n	8000708 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e044      	b.n	800083c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	440b      	add	r3, r1
 80007c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007c8:	7bfa      	ldrb	r2, [r7, #15]
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	440b      	add	r3, r1
 8000818:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	3301      	adds	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3b5      	bcc.n	80007b2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	687e      	ldr	r6, [r7, #4]
 800084e:	466d      	mov	r5, sp
 8000850:	f106 0410 	add.w	r4, r6, #16
 8000854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	602b      	str	r3, [r5, #0]
 800085c:	1d33      	adds	r3, r6, #4
 800085e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f002 f8a7 	bl	80029b4 <USB_DevInit>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2202      	movs	r2, #2
 8000870:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e00d      	b.n	8000894 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fd59 	bl	8005344 <USB_DevDisconnect>

  return HAL_OK;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800089c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d101      	bne.n	80008b2 <HAL_PCD_Start+0x16>
 80008ae:	2302      	movs	r3, #2
 80008b0:	e016      	b.n	80008e0 <HAL_PCD_Start+0x44>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f83c 	bl	800293c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008c4:	2101      	movs	r1, #1
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f006 fc57 	bl	800717a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fd2d 	bl	8005330 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fd2f 	bl	8005358 <USB_ReadInterrupts>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000904:	d102      	bne.n	800090c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 fb48 	bl	8000f9c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f004 fd21 	bl	8005358 <USB_ReadInterrupts>
 8000916:	4603      	mov	r3, r0
 8000918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000920:	d112      	bne.n	8000948 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800092a:	b29a      	uxth	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000934:	b292      	uxth	r2, r2
 8000936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f006 fa41 	bl	8006dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f923 	bl	8000b8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fd03 	bl	8005358 <USB_ReadInterrupts>
 8000952:	4603      	mov	r3, r0
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800095c:	d10b      	bne.n	8000976 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000970:	b292      	uxth	r2, r2
 8000972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fcec 	bl	8005358 <USB_ReadInterrupts>
 8000980:	4603      	mov	r3, r0
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098a:	d10b      	bne.n	80009a4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000994:	b29a      	uxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800099e:	b292      	uxth	r2, r2
 80009a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fcd5 	bl	8005358 <USB_ReadInterrupts>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009b8:	d126      	bne.n	8000a08 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0204 	bic.w	r2, r2, #4
 80009cc:	b292      	uxth	r2, r2
 80009ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0208 	bic.w	r2, r2, #8
 80009e4:	b292      	uxth	r2, r2
 80009e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f006 fa22 	bl	8006e34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a02:	b292      	uxth	r2, r2
 8000a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fca3 	bl	8005358 <USB_ReadInterrupts>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a1c:	f040 8082 	bne.w	8000b24 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	77fb      	strb	r3, [r7, #31]
 8000a24:	e010      	b.n	8000a48 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	441a      	add	r2, r3
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	8812      	ldrh	r2, [r2, #0]
 8000a36:	b292      	uxth	r2, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3320      	adds	r3, #32
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3301      	adds	r3, #1
 8000a46:	77fb      	strb	r3, [r7, #31]
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d9eb      	bls.n	8000a26 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a7e:	bf00      	nop
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f6      	beq.n	8000a80 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	77fb      	strb	r3, [r7, #31]
 8000aae:	e00f      	b.n	8000ad0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	7ffa      	ldrb	r2, [r7, #31]
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	440a      	add	r2, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	443b      	add	r3, r7
 8000ac4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000ac8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000aca:	7ffb      	ldrb	r3, [r7, #31]
 8000acc:	3301      	adds	r3, #1
 8000ace:	77fb      	strb	r3, [r7, #31]
 8000ad0:	7ffb      	ldrb	r3, [r7, #31]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d9ec      	bls.n	8000ab0 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f042 0208 	orr.w	r2, r2, #8
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b00:	b292      	uxth	r2, r2
 8000b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0204 	orr.w	r2, r2, #4
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f006 f96e 	bl	8006e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fc15 	bl	8005358 <USB_ReadInterrupts>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b38:	d10e      	bne.n	8000b58 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f006 f927 	bl	8006da6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fbfb 	bl	8005358 <USB_ReadInterrupts>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b6c:	d10b      	bne.n	8000b86 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b80:	b292      	uxth	r2, r2
 8000b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_PCD_SetAddress+0x1a>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e013      	b.n	8000bd0 <HAL_PCD_SetAddress+0x42>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	78fa      	ldrb	r2, [r7, #3]
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fba2 	bl	800530a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
 8000bea:	460b      	mov	r3, r1
 8000bec:	803b      	strh	r3, [r7, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da0e      	bge.n	8000c1c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2201      	movs	r2, #1
 8000c18:	705a      	strb	r2, [r3, #1]
 8000c1a:	e00e      	b.n	8000c3a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	f003 0207 	and.w	r2, r3, #7
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	78ba      	ldrb	r2, [r7, #2]
 8000c50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	785b      	ldrb	r3, [r3, #1]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c64:	78bb      	ldrb	r3, [r7, #2]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d102      	bne.n	8000c70 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_PCD_EP_Open+0xa6>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e00e      	b.n	8000c9c <HAL_PCD_EP_Open+0xc4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 feb1 	bl	80029f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da0e      	bge.n	8000cd6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	705a      	strb	r2, [r3, #1]
 8000cd4:	e00e      	b.n	8000cf4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	f003 0207 	and.w	r2, r3, #7
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <HAL_PCD_EP_Close+0x6a>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e00e      	b.n	8000d2c <HAL_PCD_EP_Close+0x88>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 f9d3 	bl	80030c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	460b      	mov	r3, r1
 8000d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	f003 0207 	and.w	r2, r3, #7
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2200      	movs	r2, #0
 8000d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d80:	7afb      	ldrb	r3, [r7, #11]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6979      	ldr	r1, [r7, #20]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fb85 	bl	80034a0 <USB_EPStartXfer>
 8000d96:	e005      	b.n	8000da4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fb7e 	bl	80034a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2201      	movs	r2, #1
 8000df8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e06:	7afb      	ldrb	r3, [r7, #11]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6979      	ldr	r1, [r7, #20]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fb42 	bl	80034a0 <USB_EPStartXfer>
 8000e1c:	e005      	b.n	8000e2a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6979      	ldr	r1, [r7, #20]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fb3b 	bl	80034a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 0207 	and.w	r2, r3, #7
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d901      	bls.n	8000e52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e04c      	b.n	8000eec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da0e      	bge.n	8000e78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	705a      	strb	r2, [r3, #1]
 8000e76:	e00c      	b.n	8000e92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_PCD_EP_SetStall+0x7e>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e01c      	b.n	8000eec <HAL_PCD_EP_SetStall+0xb8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68f9      	ldr	r1, [r7, #12]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f925 	bl	8005110 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d108      	bne.n	8000ee2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f004 fa4a 	bl	8005376 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	f003 020f 	and.w	r2, r3, #15
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d901      	bls.n	8000f12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e040      	b.n	8000f94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da0e      	bge.n	8000f38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	705a      	strb	r2, [r3, #1]
 8000f36:	e00e      	b.n	8000f56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	f003 0207 	and.w	r2, r3, #7
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_PCD_EP_ClrStall+0x82>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e00e      	b.n	8000f94 <HAL_PCD_EP_ClrStall+0xa0>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f913 	bl	80051b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fa4:	e2ec      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8000fbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f040 8161 	bne.w	8001288 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d152      	bne.n	8001076 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe0:	81fb      	strh	r3, [r7, #14]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3328      	adds	r3, #40	; 0x28
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	3302      	adds	r3, #2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	4413      	add	r3, r2
 8001018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	441a      	add	r2, r3
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001034:	2100      	movs	r1, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f005 fe9b 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 829b 	beq.w	8001580 <PCD_EP_ISR_Handler+0x5e4>
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 8296 	bne.w	8001580 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001060:	b2da      	uxtb	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b292      	uxth	r2, r2
 8001068:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001074:	e284      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108c:	2b00      	cmp	r3, #0
 800108e:	d034      	beq.n	80010fa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001098:	b29b      	uxth	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	3306      	adds	r3, #6
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f004 f9a1 	bl	8005416 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010e0:	4013      	ands	r3, r2
 80010e2:	823b      	strh	r3, [r7, #16]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	8a3a      	ldrh	r2, [r7, #16]
 80010ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ee:	b292      	uxth	r2, r2
 80010f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f005 fe10 	bl	8006d18 <HAL_PCD_SetupStageCallback>
 80010f8:	e242      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f280 823e 	bge.w	8001580 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001110:	4013      	ands	r3, r2
 8001112:	83bb      	strh	r3, [r7, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	8bba      	ldrh	r2, [r7, #28]
 800111a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800111e:	b292      	uxth	r2, r2
 8001120:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	3306      	adds	r3, #6
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	4413      	add	r3, r2
 8001140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d019      	beq.n	800118a <PCD_EP_ISR_Handler+0x1ee>
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d015      	beq.n	800118a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	6959      	ldr	r1, [r3, #20]
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800116e:	b29b      	uxth	r3, r3
 8001170:	f004 f951 	bl	8005416 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	441a      	add	r2, r3
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001182:	2100      	movs	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f005 fdd9 	bl	8006d3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 81f2 	bne.w	8001580 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4413      	add	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d112      	bne.n	80011ea <PCD_EP_ISR_Handler+0x24e>
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	e02f      	b.n	800124a <PCD_EP_ISR_Handler+0x2ae>
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b3e      	cmp	r3, #62	; 0x3e
 80011f0:	d813      	bhi.n	800121a <PCD_EP_ISR_Handler+0x27e>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <PCD_EP_ISR_Handler+0x270>
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	3301      	adds	r3, #1
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	b29b      	uxth	r3, r3
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	b29a      	uxth	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e017      	b.n	800124a <PCD_EP_ISR_Handler+0x2ae>
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <PCD_EP_ISR_Handler+0x298>
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	3b01      	subs	r3, #1
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	b29b      	uxth	r3, r3
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	b29b      	uxth	r3, r3
 800123c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001244:	b29a      	uxth	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125a:	827b      	strh	r3, [r7, #18]
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001262:	827b      	strh	r3, [r7, #18]
 8001264:	8a7b      	ldrh	r3, [r7, #18]
 8001266:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800126a:	827b      	strh	r3, [r7, #18]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	8a7b      	ldrh	r3, [r7, #18]
 8001272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001282:	b29b      	uxth	r3, r3
 8001284:	8013      	strh	r3, [r2, #0]
 8001286:	e17b      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800129a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f280 80ea 	bge.w	8001478 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012ba:	4013      	ands	r3, r2
 80012bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d2:	b292      	uxth	r2, r2
 80012d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	7b1b      	ldrb	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d122      	bne.n	800133a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	3306      	adds	r3, #6
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4413      	add	r3, r2
 8001312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800131c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800131e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8087 	beq.w	8001434 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	6959      	ldr	r1, [r3, #20]
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	88da      	ldrh	r2, [r3, #6]
 8001332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001334:	f004 f86f 	bl	8005416 <USB_ReadPMA>
 8001338:	e07c      	b.n	8001434 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	78db      	ldrb	r3, [r3, #3]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d108      	bne.n	8001354 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001342:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001344:	461a      	mov	r2, r3
 8001346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f927 	bl	800159c <HAL_PCD_EP_DB_Receive>
 800134e:	4603      	mov	r3, r0
 8001350:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001352:	e06f      	b.n	8001434 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	441a      	add	r2, r3
 800137e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001390:	b29b      	uxth	r3, r3
 8001392:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d021      	beq.n	80013f2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	3302      	adds	r3, #2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80013d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02a      	beq.n	8001434 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	6959      	ldr	r1, [r3, #20]
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	891a      	ldrh	r2, [r3, #8]
 80013ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013ec:	f004 f813 	bl	8005416 <USB_ReadPMA>
 80013f0:	e020      	b.n	8001434 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	3306      	adds	r3, #6
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	4413      	add	r3, r2
 8001410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800141a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800141c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	6959      	ldr	r1, [r3, #20]
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	895a      	ldrh	r2, [r3, #10]
 800142e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001430:	f003 fff1 	bl	8005416 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800143a:	441a      	add	r2, r3
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001446:	441a      	add	r2, r3
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <PCD_EP_ISR_Handler+0x4c2>
 8001454:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	429a      	cmp	r2, r3
 800145c:	d206      	bcs.n	800146c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f005 fc69 	bl	8006d3c <HAL_PCD_DataOutStageCallback>
 800146a:	e005      	b.n	8001478 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001472:	4618      	mov	r0, r3
 8001474:	f002 f814 	bl	80034a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001478:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	2b00      	cmp	r3, #0
 8001480:	d07e      	beq.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001482:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b0:	843b      	strh	r3, [r7, #32]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	441a      	add	r2, r3
 80014c0:	8c3b      	ldrh	r3, [r7, #32]
 80014c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	78db      	ldrb	r3, [r3, #3]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d00c      	beq.n	80014f0 <PCD_EP_ISR_Handler+0x554>
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	78db      	ldrb	r3, [r3, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d146      	bne.n	8001574 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80014e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d141      	bne.n	8001574 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	3302      	adds	r3, #2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001518:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	8bfb      	ldrh	r3, [r7, #30]
 8001520:	429a      	cmp	r2, r3
 8001522:	d906      	bls.n	8001532 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	8bfb      	ldrh	r3, [r7, #30]
 800152a:	1ad2      	subs	r2, r2, r3
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	e002      	b.n	8001538 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d106      	bne.n	800154e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f005 fc13 	bl	8006d72 <HAL_PCD_DataInStageCallback>
 800154c:	e018      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	8bfb      	ldrh	r3, [r7, #30]
 8001554:	441a      	add	r2, r3
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	441a      	add	r2, r3
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	4618      	mov	r0, r3
 800156e:	f001 ff97 	bl	80034a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001572:	e005      	b.n	8001580 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001574:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001576:	461a      	mov	r2, r3
 8001578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f91b 	bl	80017b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001588:	b29b      	uxth	r3, r3
 800158a:	b21b      	sxth	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	f6ff ad0a 	blt.w	8000fa6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3738      	adds	r7, #56	; 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d07e      	beq.n	80016b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	3302      	adds	r3, #2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	8b7b      	ldrh	r3, [r7, #26]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d306      	bcc.n	80015f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	8b7b      	ldrh	r3, [r7, #26]
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	e002      	b.n	80015fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d123      	bne.n	800164c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161e:	833b      	strh	r3, [r7, #24]
 8001620:	8b3b      	ldrh	r3, [r7, #24]
 8001622:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001626:	833b      	strh	r3, [r7, #24]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	441a      	add	r2, r3
 8001636:	8b3b      	ldrh	r3, [r7, #24]
 8001638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800163c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	b29b      	uxth	r3, r3
 800164a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01f      	beq.n	8001696 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800166c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001670:	82fb      	strh	r3, [r7, #22]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	441a      	add	r2, r3
 8001680:	8afb      	ldrh	r3, [r7, #22]
 8001682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800168a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001692:	b29b      	uxth	r3, r3
 8001694:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001696:	8b7b      	ldrh	r3, [r7, #26]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8087 	beq.w	80017ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	6959      	ldr	r1, [r3, #20]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	891a      	ldrh	r2, [r3, #8]
 80016aa:	8b7b      	ldrh	r3, [r7, #26]
 80016ac:	f003 feb3 	bl	8005416 <USB_ReadPMA>
 80016b0:	e07c      	b.n	80017ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	3306      	adds	r3, #6
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	8b7b      	ldrh	r3, [r7, #26]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d306      	bcc.n	80016f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	8b7b      	ldrh	r3, [r7, #26]
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	619a      	str	r2, [r3, #24]
 80016f2:	e002      	b.n	80016fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d123      	bne.n	800174a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171c:	83fb      	strh	r3, [r7, #30]
 800171e:	8bfb      	ldrh	r3, [r7, #30]
 8001720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001724:	83fb      	strh	r3, [r7, #30]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	441a      	add	r2, r3
 8001734:	8bfb      	ldrh	r3, [r7, #30]
 8001736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800173a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001746:	b29b      	uxth	r3, r3
 8001748:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11f      	bne.n	8001794 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800176a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176e:	83bb      	strh	r3, [r7, #28]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	441a      	add	r2, r3
 800177e:	8bbb      	ldrh	r3, [r7, #28]
 8001780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001790:	b29b      	uxth	r3, r3
 8001792:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	6959      	ldr	r1, [r3, #20]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	895a      	ldrh	r2, [r3, #10]
 80017a6:	8b7b      	ldrh	r3, [r7, #26]
 80017a8:	f003 fe35 	bl	8005416 <USB_ReadPMA>
    }
  }

  return count;
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b0a2      	sub	sp, #136	; 0x88
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	4613      	mov	r3, r2
 80017c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 81c7 	beq.w	8001b5e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	3302      	adds	r3, #2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001804:	429a      	cmp	r2, r3
 8001806:	d907      	bls.n	8001818 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	699a      	ldr	r2, [r3, #24]
 800180c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	e002      	b.n	800181e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 80b9 	bne.w	800199a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d126      	bne.n	800187e <HAL_PCD_EP_DB_Transmit+0xc8>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	4413      	add	r3, r2
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	011a      	lsls	r2, r3, #4
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	4413      	add	r3, r2
 8001852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001862:	b29a      	uxth	r2, r3
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001876:	b29a      	uxth	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	e01a      	b.n	80018b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d116      	bne.n	80018b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001894:	b29b      	uxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4413      	add	r3, r2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	011a      	lsls	r2, r3, #4
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	4413      	add	r3, r2
 80018a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d126      	bne.n	8001910 <HAL_PCD_EP_DB_Transmit+0x15a>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4413      	add	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	011a      	lsls	r2, r3, #4
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001908:	b29a      	uxth	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	801a      	strh	r2, [r3, #0]
 800190e:	e017      	b.n	8001940 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d113      	bne.n	8001940 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	4413      	add	r3, r2
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	011a      	lsls	r2, r3, #4
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	4413      	add	r3, r2
 8001934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2200      	movs	r2, #0
 800193e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f005 fa13 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 82d4 	beq.w	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800196e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001972:	827b      	strh	r3, [r7, #18]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	441a      	add	r2, r3
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800198c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	b29b      	uxth	r3, r3
 8001996:	8013      	strh	r3, [r2, #0]
 8001998:	e2b2      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d021      	beq.n	80019e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	441a      	add	r2, r3
 80019d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80019d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	f040 8286 	bne.w	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019fc:	441a      	add	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a0a:	441a      	add	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d309      	bcc.n	8001a30 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	e015      	b.n	8001a5c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001a38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a46:	e009      	b.n	8001a5c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d155      	bne.n	8001b10 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	4413      	add	r3, r2
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	011a      	lsls	r2, r3, #4
 8001a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a84:	4413      	add	r3, r2
 8001a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d112      	bne.n	8001ab8 <HAL_PCD_EP_DB_Transmit+0x302>
 8001a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e047      	b.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x392>
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aba:	2b3e      	cmp	r3, #62	; 0x3e
 8001abc:	d811      	bhi.n	8001ae2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	e032      	b.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x392>
 8001ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_PCD_EP_DB_Transmit+0x342>
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af4:	3b01      	subs	r3, #1
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	e01b      	b.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x392>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d117      	bne.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x392>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	4413      	add	r3, r2
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	011a      	lsls	r2, r3, #4
 8001b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b38:	4413      	add	r3, r2
 8001b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b46:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	6959      	ldr	r1, [r3, #20]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	891a      	ldrh	r2, [r3, #8]
 8001b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 fc18 	bl	800538c <USB_WritePMA>
 8001b5c:	e1d0      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3306      	adds	r3, #6
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d307      	bcc.n	8001ba6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	e002      	b.n	8001bac <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 80c4 	bne.w	8001d3e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d126      	bne.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x456>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd2:	4413      	add	r3, r2
 8001bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	011a      	lsls	r2, r3, #4
 8001bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bde:	4413      	add	r3, r2
 8001be0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e01a      	b.n	8001c42 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d116      	bne.n	8001c42 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	677b      	str	r3, [r7, #116]	; 0x74
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c28:	4413      	add	r3, r2
 8001c2a:	677b      	str	r3, [r7, #116]	; 0x74
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	011a      	lsls	r2, r3, #4
 8001c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c34:	4413      	add	r3, r2
 8001c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c3e:	2200      	movs	r2, #0
 8001c40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d12f      	bne.n	8001cb0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c68:	4413      	add	r3, r2
 8001c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	011a      	lsls	r2, r3, #4
 8001c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c78:	4413      	add	r3, r2
 8001c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	e017      	b.n	8001ce0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d113      	bne.n	8001ce0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc6:	4413      	add	r3, r2
 8001cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	011a      	lsls	r2, r3, #4
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cdc:	2200      	movs	r2, #0
 8001cde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f005 f843 	bl	8006d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8104 	bne.w	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	441a      	add	r2, r3
 8001d24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	8013      	strh	r3, [r2, #0]
 8001d3c:	e0e0      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d121      	bne.n	8001d8c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	441a      	add	r2, r3
 8001d74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f040 80b4 	bne.w	8001f00 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001da0:	441a      	add	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dae:	441a      	add	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d309      	bcc.n	8001dd4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	621a      	str	r2, [r3, #32]
 8001dd2:	e015      	b.n	8001e00 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001ddc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001de0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dea:	e009      	b.n	8001e00 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d155      	bne.n	8001eba <HAL_PCD_EP_DB_Transmit+0x704>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	4413      	add	r3, r2
 8001e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	011a      	lsls	r2, r3, #4
 8001e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2e:	4413      	add	r3, r2
 8001e30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d112      	bne.n	8001e62 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5e:	801a      	strh	r2, [r3, #0]
 8001e60:	e044      	b.n	8001eec <HAL_PCD_EP_DB_Transmit+0x736>
 8001e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e64:	2b3e      	cmp	r3, #62	; 0x3e
 8001e66:	d811      	bhi.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	e02f      	b.n	8001eec <HAL_PCD_EP_DB_Transmit+0x736>
 8001e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54
 8001e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e018      	b.n	8001eec <HAL_PCD_EP_DB_Transmit+0x736>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d114      	bne.n	8001eec <HAL_PCD_EP_DB_Transmit+0x736>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ed0:	4413      	add	r3, r2
 8001ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	011a      	lsls	r2, r3, #4
 8001eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001edc:	4413      	add	r3, r2
 8001ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ee2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6959      	ldr	r1, [r3, #20]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	895a      	ldrh	r2, [r3, #10]
 8001ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f003 fa46 	bl	800538c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f1a:	823b      	strh	r3, [r7, #16]
 8001f1c:	8a3b      	ldrh	r3, [r7, #16]
 8001f1e:	f083 0310 	eor.w	r3, r3, #16
 8001f22:	823b      	strh	r3, [r7, #16]
 8001f24:	8a3b      	ldrh	r3, [r7, #16]
 8001f26:	f083 0320 	eor.w	r3, r3, #32
 8001f2a:	823b      	strh	r3, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	8a3b      	ldrh	r3, [r7, #16]
 8001f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3788      	adds	r7, #136	; 0x88
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	817b      	strh	r3, [r7, #10]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	897b      	ldrh	r3, [r7, #10]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e009      	b.n	8001fa4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f90:	897a      	ldrh	r2, [r7, #10]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001fa4:	893b      	ldrh	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	80da      	strh	r2, [r3, #6]
 8001fb8:	e00b      	b.n	8001fd2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e272      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8087 	beq.w	800210e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002000:	4b92      	ldr	r3, [pc, #584]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	d00c      	beq.n	8002026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	d112      	bne.n	800203e <HAL_RCC_OscConfig+0x5e>
 8002018:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d10b      	bne.n	800203e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d06c      	beq.n	800210c <HAL_RCC_OscConfig+0x12c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d168      	bne.n	800210c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e24c      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x76>
 8002048:	4b80      	ldr	r3, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7f      	ldr	r2, [pc, #508]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e02e      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x98>
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a77      	ldr	r2, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0xbc>
 8002082:	4b72      	ldr	r3, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a71      	ldr	r2, [pc, #452]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6e      	ldr	r2, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xd4>
 800209c:	4b6b      	ldr	r3, [pc, #428]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b68      	ldr	r3, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a67      	ldr	r2, [pc, #412]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe f9cc 	bl	8000458 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7fe f9c8 	bl	8000458 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e200      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe4>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe f9b8 	bl	8000458 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe f9b4 	bl	8000458 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1ec      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x10c>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800211a:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002126:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	d11c      	bne.n	800216c <HAL_RCC_OscConfig+0x18c>
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x176>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1c0      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4939      	ldr	r1, [pc, #228]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x270>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe f96d 	bl	8000458 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002182:	f7fe f969 	bl	8000458 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e1a1      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4927      	ldr	r1, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x270>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe f94c 	bl	8000458 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe f948 	bl	8000458 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e180      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03a      	beq.n	8002264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x274>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7fe f92c 	bl	8000458 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7fe f928 	bl	8000458 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e160      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_OscConfig+0x26c>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002222:	2001      	movs	r0, #1
 8002224:	f000 faa6 	bl	8002774 <RCC_Delay>
 8002228:	e01c      	b.n	8002264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_OscConfig+0x274>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7fe f912 	bl	8000458 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002236:	e00f      	b.n	8002258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002238:	f7fe f90e 	bl	8000458 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d908      	bls.n	8002258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e146      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	42420000 	.word	0x42420000
 8002254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b92      	ldr	r3, [pc, #584]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e9      	bne.n	8002238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a6 	beq.w	80023be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b8b      	ldr	r3, [pc, #556]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a87      	ldr	r2, [pc, #540]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]
 800228e:	4b85      	ldr	r3, [pc, #532]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <HAL_RCC_OscConfig+0x4c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7e      	ldr	r2, [pc, #504]	; (80024a8 <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe f8cf 	bl	8000458 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe f8cb 	bl	8000458 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e103      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x4c8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x312>
 80022e4:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a6e      	ldr	r2, [pc, #440]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e02d      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x334>
 80022fa:	4b6a      	ldr	r3, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a69      	ldr	r2, [pc, #420]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	e01c      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0x356>
 800231c:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a60      	ldr	r2, [pc, #384]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a5d      	ldr	r2, [pc, #372]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0x36e>
 8002336:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d015      	beq.n	8002382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe f87f 	bl	8000458 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe f87b 	bl	8000458 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0b1      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ee      	beq.n	800235e <HAL_RCC_OscConfig+0x37e>
 8002380:	e014      	b.n	80023ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7fe f869 	bl	8000458 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe f865 	bl	8000458 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e09b      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8087 	beq.w	80024d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d061      	beq.n	8002498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d146      	bne.n	800246a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <HAL_RCC_OscConfig+0x4cc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe f839 	bl	8000458 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe f835 	bl	8000458 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e06d      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4921      	ldr	r1, [pc, #132]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a19      	ldr	r1, [r3, #32]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	430b      	orrs	r3, r1
 8002436:	491b      	ldr	r1, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x4cc>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe f809 	bl	8000458 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe f805 	bl	8000458 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e03d      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x46a>
 8002468:	e035      	b.n	80024d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_RCC_OscConfig+0x4cc>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fd fff2 	bl	8000458 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fd ffee 	bl	8000458 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e026      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x498>
 8002496:	e01e      	b.n	80024d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e019      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
 80024ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_OscConfig+0x500>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0d0      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d910      	bls.n	8002528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 0207 	bic.w	r2, r3, #7
 800250e:	4965      	ldr	r1, [pc, #404]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800254a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d040      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e073      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06b      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4936      	ldr	r1, [pc, #216]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7fd ff40 	bl	8000458 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fd ff3c 	bl	8000458 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e053      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d210      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4922      	ldr	r1, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1cc>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fe9e 	bl	80003d4 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	080072c8 	.word	0x080072c8
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b490      	push	{r4, r7}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_GetSysClockFreq+0xac>)
 80026c0:	1d3c      	adds	r4, r7, #4
 80026c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026c8:	f240 2301 	movw	r3, #513	; 0x201
 80026cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x46>
 80026f6:	e02b      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fa:	623b      	str	r3, [r7, #32]
      break;
 80026fc:	e02b      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3328      	adds	r3, #40	; 0x28
 8002708:	443b      	add	r3, r7
 800270a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800270e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb0>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c5b      	lsrs	r3, r3, #17
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	3328      	adds	r3, #40	; 0x28
 8002726:	443b      	add	r3, r7
 8002728:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800272c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002732:	fb03 f202 	mul.w	r2, r3, r2
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e004      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	623b      	str	r3, [r7, #32]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002752:	623b      	str	r3, [r7, #32]
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	6a3b      	ldr	r3, [r7, #32]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc90      	pop	{r4, r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	08007258 	.word	0x08007258
 8002768:	40021000 	.word	0x40021000
 800276c:	007a1200 	.word	0x007a1200
 8002770:	003d0900 	.word	0x003d0900

08002774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <RCC_Delay+0x34>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <RCC_Delay+0x38>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002790:	bf00      	nop
  }
  while (Delay --);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <RCC_Delay+0x1c>
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20000000 	.word	0x20000000
 80027ac:	10624dd3 	.word	0x10624dd3

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07d      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	61d3      	str	r3, [r2, #28]
 80027e8:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b46      	ldr	r3, [pc, #280]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d118      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002810:	f7fd fe22 	bl	8000458 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	e008      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fd fe1e 	bl	8000458 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e06d      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d027      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002854:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800286a:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fd fded 	bl	8000458 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fd fde9 	bl	8000458 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e036      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4917      	ldr	r1, [pc, #92]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	490b      	ldr	r1, [pc, #44]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420440 	.word	0x42420440

0800291c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800291c:	b084      	sub	sp, #16
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	f107 0014 	add.w	r0, r7, #20
 800292a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	b004      	add	sp, #16
 800293a:	4770      	bx	lr

0800293c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800294c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002950:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002970:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002974:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	b29b      	uxth	r3, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	b29b      	uxth	r3, r3
 8002986:	4013      	ands	r3, r2
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029b4:	b084      	sub	sp, #16
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	f107 0014 	add.w	r0, r7, #20
 80029c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	b004      	add	sp, #16
 80029f2:	4770      	bx	lr

080029f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b09b      	sub	sp, #108	; 0x6c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	78db      	ldrb	r3, [r3, #3]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d81f      	bhi.n	8002a66 <USB_ActivateEndpoint+0x72>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <USB_ActivateEndpoint+0x38>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a59 	.word	0x08002a59
 8002a34:	08002a6f 	.word	0x08002a6f
 8002a38:	08002a4b 	.word	0x08002a4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002a3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002a48:	e012      	b.n	8002a70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002a4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002a4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002a52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002a56:	e00b      	b.n	8002a70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002a58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002a64:	e004      	b.n	8002a70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002a6c:	e000      	b.n	8002a70 <USB_ActivateEndpoint+0x7c>
      break;
 8002a6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	441a      	add	r2, r3
 8002ac0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7b1b      	ldrb	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8149 	bne.w	8002d74 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8084 	beq.w	8002bf4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4413      	add	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	88db      	ldrh	r3, [r3, #6]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	81fb      	strh	r3, [r7, #14]
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <USB_ActivateEndpoint+0x17c>
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	81bb      	strh	r3, [r7, #12]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	89bb      	ldrh	r3, [r7, #12]
 8002b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	78db      	ldrb	r3, [r3, #3]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d020      	beq.n	8002bba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8e:	813b      	strh	r3, [r7, #8]
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	f083 0320 	eor.w	r3, r3, #32
 8002b96:	813b      	strh	r3, [r7, #8]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	441a      	add	r2, r3
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8013      	strh	r3, [r2, #0]
 8002bb8:	e27f      	b.n	80030ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	897b      	ldrh	r3, [r7, #10]
 8002bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]
 8002bf2:	e262      	b.n	80030ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	4413      	add	r3, r2
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	011a      	lsls	r2, r3, #4
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	88db      	ldrh	r3, [r3, #6]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	4413      	add	r3, r2
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d112      	bne.n	8002c7a <USB_ActivateEndpoint+0x286>
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	801a      	strh	r2, [r3, #0]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	e02f      	b.n	8002cda <USB_ActivateEndpoint+0x2e6>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c80:	d813      	bhi.n	8002caa <USB_ActivateEndpoint+0x2b6>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <USB_ActivateEndpoint+0x2a8>
 8002c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c98:	3301      	adds	r3, #1
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	e017      	b.n	8002cda <USB_ActivateEndpoint+0x2e6>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <USB_ActivateEndpoint+0x2d0>
 8002cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	83fb      	strh	r3, [r7, #30]
 8002ce8:	8bfb      	ldrh	r3, [r7, #30]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01b      	beq.n	8002d2a <USB_ActivateEndpoint+0x336>
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	83bb      	strh	r3, [r7, #28]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	8bbb      	ldrh	r3, [r7, #28]
 8002d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d40:	837b      	strh	r3, [r7, #26]
 8002d42:	8b7b      	ldrh	r3, [r7, #26]
 8002d44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d48:	837b      	strh	r3, [r7, #26]
 8002d4a:	8b7b      	ldrh	r3, [r7, #26]
 8002d4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d50:	837b      	strh	r3, [r7, #26]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	441a      	add	r2, r3
 8002d5c:	8b7b      	ldrh	r3, [r7, #26]
 8002d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8013      	strh	r3, [r2, #0]
 8002d72:	e1a2      	b.n	80030ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	4413      	add	r3, r2
 8002dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	011a      	lsls	r2, r3, #4
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	891b      	ldrh	r3, [r3, #8]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	653b      	str	r3, [r7, #80]	; 0x50
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	4413      	add	r3, r2
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	011a      	lsls	r2, r3, #4
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	895b      	ldrh	r3, [r3, #10]
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8091 	bne.w	8002f44 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002e30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01b      	beq.n	8002e72 <USB_ActivateEndpoint+0x47e>
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01b      	beq.n	8002ec2 <USB_ActivateEndpoint+0x4ce>
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	441a      	add	r2, r3
 8002eac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002eda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002edc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ee0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ee2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ee4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ee8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f20:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
 8002f42:	e0ba      	b.n	80030ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01d      	beq.n	8002f9c <USB_ActivateEndpoint+0x5a8>
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01d      	beq.n	8002ff4 <USB_ActivateEndpoint+0x600>
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	78db      	ldrb	r3, [r3, #3]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d024      	beq.n	8003046 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003012:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003016:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800301a:	f083 0320 	eor.w	r3, r3, #32
 800301e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	b29b      	uxth	r3, r3
 8003042:	8013      	strh	r3, [r2, #0]
 8003044:	e01d      	b.n	8003082 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800306e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	b29b      	uxth	r3, r3
 8003080:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80030ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030be:	4618      	mov	r0, r3
 80030c0:	376c      	adds	r7, #108	; 0x6c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08d      	sub	sp, #52	; 0x34
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	7b1b      	ldrb	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 808e 	bne.w	80031f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d044      	beq.n	800316e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	81bb      	strh	r3, [r7, #12]
 80030f2:	89bb      	ldrh	r3, [r7, #12]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <USB_DeactivateEndpoint+0x6c>
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	817b      	strh	r3, [r7, #10]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003130:	b29b      	uxth	r3, r3
 8003132:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314a:	813b      	strh	r3, [r7, #8]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	441a      	add	r2, r3
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	b29b      	uxth	r3, r3
 800316a:	8013      	strh	r3, [r2, #0]
 800316c:	e192      	b.n	8003494 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	827b      	strh	r3, [r7, #18]
 800317c:	8a7b      	ldrh	r3, [r7, #18]
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01b      	beq.n	80031be <USB_DeactivateEndpoint+0xf6>
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	823b      	strh	r3, [r7, #16]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	8a3b      	ldrh	r3, [r7, #16]
 80031aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	81fb      	strh	r3, [r7, #14]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]
 80031f6:	e14d      	b.n	8003494 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 80a5 	bne.w	800334c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	843b      	strh	r3, [r7, #32]
 8003210:	8c3b      	ldrh	r3, [r7, #32]
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01b      	beq.n	8003252 <USB_DeactivateEndpoint+0x18a>
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	83fb      	strh	r3, [r7, #30]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	8bfb      	ldrh	r3, [r7, #30]
 800323e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	83bb      	strh	r3, [r7, #28]
 8003260:	8bbb      	ldrh	r3, [r7, #28]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01b      	beq.n	80032a2 <USB_DeactivateEndpoint+0x1da>
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	837b      	strh	r3, [r7, #26]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	8b7b      	ldrh	r3, [r7, #26]
 800328e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	833b      	strh	r3, [r7, #24]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	8b3b      	ldrh	r3, [r7, #24]
 80032c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	82fb      	strh	r3, [r7, #22]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	441a      	add	r2, r3
 80032fc:	8afb      	ldrh	r3, [r7, #22]
 80032fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330e:	b29b      	uxth	r3, r3
 8003310:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	82bb      	strh	r3, [r7, #20]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	8abb      	ldrh	r3, [r7, #20]
 8003336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003346:	b29b      	uxth	r3, r3
 8003348:	8013      	strh	r3, [r2, #0]
 800334a:	e0a3      	b.n	8003494 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800335a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800335c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <USB_DeactivateEndpoint+0x2d4>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003398:	b29b      	uxth	r3, r3
 800339a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80033aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <USB_DeactivateEndpoint+0x324>
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	b29b      	uxth	r3, r3
 800345a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	847b      	strh	r3, [r7, #34]	; 0x22
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	441a      	add	r2, r3
 800347e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	b29b      	uxth	r3, r3
 8003492:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3734      	adds	r7, #52	; 0x34
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0cc      	sub	sp, #304	; 0x130
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034ae:	6018      	str	r0, [r3, #0]
 80034b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034b8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	f041 817d 	bne.w	80047c6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80034cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d908      	bls.n	80034fa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80034e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80034f8:	e007      	b.n	800350a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80034fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800350a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800350e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	7b1b      	ldrb	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d152      	bne.n	80035c0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800351a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800351e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6959      	ldr	r1, [r3, #20]
 8003526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800352a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	88da      	ldrh	r2, [r3, #6]
 8003532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003536:	b29b      	uxth	r3, r3
 8003538:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800353c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003540:	6800      	ldr	r0, [r0, #0]
 8003542:	f001 ff23 	bl	800538c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800354a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800354e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003552:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800355e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	4619      	mov	r1, r3
 800356c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003570:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003574:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003578:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	440a      	add	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	011a      	lsls	r2, r3, #4
 8003590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003594:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80035a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	f001 b8b5 	b.w	800472a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80035c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78db      	ldrb	r3, [r3, #3]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	f040 84c6 	bne.w	8003f5e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80035d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	f240 8443 	bls.w	8003e76 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80035f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800361a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800361e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003640:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003648:	b29b      	uxth	r3, r3
 800364a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800364c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800365c:	1ad2      	subs	r2, r2, r3
 800365e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800366a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800366e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 823e 	beq.w	8003b0e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003696:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800369a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800369e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 809a 	bne.w	80037ec <USB_EPStartXfer+0x34c>
 80036b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80036c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80036ea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	440a      	add	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	011a      	lsls	r2, r3, #4
 8003702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4413      	add	r3, r2
 800370e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d122      	bne.n	800376a <USB_EPStartXfer+0x2ca>
 8003724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003728:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003736:	b29a      	uxth	r2, r3
 8003738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800373c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375a:	b29a      	uxth	r2, r3
 800375c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e079      	b.n	800385e <USB_EPStartXfer+0x3be>
 800376a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800376e:	2b3e      	cmp	r3, #62	; 0x3e
 8003770:	d81b      	bhi.n	80037aa <USB_EPStartXfer+0x30a>
 8003772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <USB_EPStartXfer+0x2f2>
 8003788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800378c:	3301      	adds	r3, #1
 800378e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003796:	b29b      	uxth	r3, r3
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	b29a      	uxth	r2, r3
 800379c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	e059      	b.n	800385e <USB_EPStartXfer+0x3be>
 80037aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <USB_EPStartXfer+0x32a>
 80037c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037c4:	3b01      	subs	r3, #1
 80037c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037dc:	b29a      	uxth	r2, r3
 80037de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	e038      	b.n	800385e <USB_EPStartXfer+0x3be>
 80037ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d130      	bne.n	800385e <USB_EPStartXfer+0x3be>
 80037fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003812:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800381a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	440a      	add	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	011a      	lsls	r2, r3, #4
 8003832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003836:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4413      	add	r3, r2
 800383e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003850:	b29a      	uxth	r2, r3
 8003852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800385e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	895b      	ldrh	r3, [r3, #10]
 800386a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800386e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6959      	ldr	r1, [r3, #20]
 800387a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800387e:	b29b      	uxth	r3, r3
 8003880:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003884:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003888:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f001 fd7d 	bl	800538c <USB_WritePMA>
            ep->xfer_buff += len;
 8003892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038a2:	441a      	add	r2, r3
 80038a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80038b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d90f      	bls.n	80038ec <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80038cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038dc:	1ad2      	subs	r2, r2, r3
 80038de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	621a      	str	r2, [r3, #32]
 80038ea:	e00e      	b.n	800390a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80038ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80038fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800390a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800390e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 809a 	bne.w	8003a50 <USB_EPStartXfer+0x5b0>
 800391c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003920:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003924:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003928:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	4619      	mov	r1, r3
 8003942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003946:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800394a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800394e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	440a      	add	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800395c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	011a      	lsls	r2, r3, #4
 8003966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800396a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4413      	add	r3, r2
 8003972:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800397a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d122      	bne.n	80039ce <USB_EPStartXfer+0x52e>
 8003988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800398c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800399a:	b29a      	uxth	r2, r3
 800399c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	e083      	b.n	8003ad6 <USB_EPStartXfer+0x636>
 80039ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039d2:	2b3e      	cmp	r3, #62	; 0x3e
 80039d4:	d81b      	bhi.n	8003a0e <USB_EPStartXfer+0x56e>
 80039d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <USB_EPStartXfer+0x556>
 80039ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039f0:	3301      	adds	r3, #1
 80039f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e063      	b.n	8003ad6 <USB_EPStartXfer+0x636>
 8003a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <USB_EPStartXfer+0x58e>
 8003a24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e042      	b.n	8003ad6 <USB_EPStartXfer+0x636>
 8003a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d13a      	bne.n	8003ad6 <USB_EPStartXfer+0x636>
 8003a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	440a      	add	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	011a      	lsls	r2, r3, #4
 8003aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003abe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ace:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	891b      	ldrh	r3, [r3, #8]
 8003ae2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003afc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003b00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003b04:	6800      	ldr	r0, [r0, #0]
 8003b06:	f001 fc41 	bl	800538c <USB_WritePMA>
 8003b0a:	f000 be0e 	b.w	800472a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d16d      	bne.n	8003bfa <USB_EPStartXfer+0x75a>
 8003b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3e:	4413      	add	r3, r2
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	011a      	lsls	r2, r3, #4
 8003b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b52:	4413      	add	r3, r2
 8003b54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d112      	bne.n	8003b88 <USB_EPStartXfer+0x6e8>
 8003b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e063      	b.n	8003c50 <USB_EPStartXfer+0x7b0>
 8003b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8e:	d817      	bhi.n	8003bc0 <USB_EPStartXfer+0x720>
 8003b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <USB_EPStartXfer+0x710>
 8003ba6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003baa:	3301      	adds	r3, #1
 8003bac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	e047      	b.n	8003c50 <USB_EPStartXfer+0x7b0>
 8003bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <USB_EPStartXfer+0x740>
 8003bd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003be0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e02a      	b.n	8003c50 <USB_EPStartXfer+0x7b0>
 8003bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d122      	bne.n	8003c50 <USB_EPStartXfer+0x7b0>
 8003c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
 8003c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	4413      	add	r3, r2
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	011a      	lsls	r2, r3, #4
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	4413      	add	r3, r2
 8003c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	891b      	ldrh	r3, [r3, #8]
 8003c5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6959      	ldr	r1, [r3, #20]
 8003c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003c7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003c7e:	6800      	ldr	r0, [r0, #0]
 8003c80:	f001 fb84 	bl	800538c <USB_WritePMA>
            ep->xfer_buff += len;
 8003c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c94:	441a      	add	r2, r3
 8003c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90f      	bls.n	8003cde <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8003cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cce:	1ad2      	subs	r2, r2, r3
 8003cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	621a      	str	r2, [r3, #32]
 8003cdc:	e00e      	b.n	8003cfc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8003cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
 8003d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d16d      	bne.n	8003df4 <USB_EPStartXfer+0x954>
 8003d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	4413      	add	r3, r2
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
 8003d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d112      	bne.n	8003d82 <USB_EPStartXfer+0x8e2>
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e05d      	b.n	8003e3e <USB_EPStartXfer+0x99e>
 8003d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d86:	2b3e      	cmp	r3, #62	; 0x3e
 8003d88:	d817      	bhi.n	8003dba <USB_EPStartXfer+0x91a>
 8003d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <USB_EPStartXfer+0x90a>
 8003da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da4:	3301      	adds	r3, #1
 8003da6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	029b      	lsls	r3, r3, #10
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e041      	b.n	8003e3e <USB_EPStartXfer+0x99e>
 8003dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <USB_EPStartXfer+0x93a>
 8003dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e024      	b.n	8003e3e <USB_EPStartXfer+0x99e>
 8003df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d11c      	bne.n	8003e3e <USB_EPStartXfer+0x99e>
 8003e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	4413      	add	r3, r2
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	895b      	ldrh	r3, [r3, #10]
 8003e4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6959      	ldr	r1, [r3, #20]
 8003e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003e68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003e6c:	6800      	ldr	r0, [r0, #0]
 8003e6e:	f001 fa8d 	bl	800538c <USB_WritePMA>
 8003e72:	f000 bc5a 	b.w	800472a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	4413      	add	r3, r2
 8003f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	891b      	ldrh	r3, [r3, #8]
 8003f34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6959      	ldr	r1, [r3, #20]
 8003f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f4e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	f001 fa18 	bl	800538c <USB_WritePMA>
 8003f5c:	e3e5      	b.n	800472a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 81bc 	beq.w	8004378 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800400e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	785b      	ldrb	r3, [r3, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d16d      	bne.n	80040fa <USB_EPStartXfer+0xc5a>
 800401e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	67bb      	str	r3, [r7, #120]	; 0x78
 800402a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800402e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403e:	4413      	add	r3, r2
 8004040:	67bb      	str	r3, [r7, #120]	; 0x78
 8004042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	011a      	lsls	r2, r3, #4
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	4413      	add	r3, r2
 8004054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004058:	677b      	str	r3, [r7, #116]	; 0x74
 800405a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d112      	bne.n	8004088 <USB_EPStartXfer+0xbe8>
 8004062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800406c:	b29a      	uxth	r2, r3
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004080:	b29a      	uxth	r2, r3
 8004082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e060      	b.n	800414a <USB_EPStartXfer+0xcaa>
 8004088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800408c:	2b3e      	cmp	r3, #62	; 0x3e
 800408e:	d817      	bhi.n	80040c0 <USB_EPStartXfer+0xc20>
 8004090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800409a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <USB_EPStartXfer+0xc10>
 80040a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040aa:	3301      	adds	r3, #1
 80040ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80040b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	029b      	lsls	r3, r3, #10
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e044      	b.n	800414a <USB_EPStartXfer+0xcaa>
 80040c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80040ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <USB_EPStartXfer+0xc40>
 80040d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040da:	3b01      	subs	r3, #1
 80040dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80040e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	e027      	b.n	800414a <USB_EPStartXfer+0xcaa>
 80040fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d11f      	bne.n	800414a <USB_EPStartXfer+0xcaa>
 800410a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004120:	4413      	add	r3, r2
 8004122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004138:	4413      	add	r3, r2
 800413a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800413e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004144:	b29a      	uxth	r2, r3
 8004146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004148:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800414a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	895b      	ldrh	r3, [r3, #10]
 8004156:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416a:	b29b      	uxth	r3, r3
 800416c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004170:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004174:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004178:	6800      	ldr	r0, [r0, #0]
 800417a:	f001 f907 	bl	800538c <USB_WritePMA>
          ep->xfer_buff += len;
 800417e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418e:	441a      	add	r2, r3
 8004190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800419c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d90f      	bls.n	80041d8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80041b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c8:	1ad2      	subs	r2, r2, r3
 80041ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	e00e      	b.n	80041f6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80041d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80041e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80041f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8295 	beq.w	800472a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d16d      	bne.n	80042ec <USB_EPStartXfer+0xe4c>
 8004210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
 800421c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004230:	4413      	add	r3, r2
 8004232:	66bb      	str	r3, [r7, #104]	; 0x68
 8004234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004244:	4413      	add	r3, r2
 8004246:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800424a:	667b      	str	r3, [r7, #100]	; 0x64
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d112      	bne.n	800427a <USB_EPStartXfer+0xdda>
 8004254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800425e:	b29a      	uxth	r2, r3
 8004260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004272:	b29a      	uxth	r2, r3
 8004274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	e063      	b.n	8004342 <USB_EPStartXfer+0xea2>
 800427a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800427e:	2b3e      	cmp	r3, #62	; 0x3e
 8004280:	d817      	bhi.n	80042b2 <USB_EPStartXfer+0xe12>
 8004282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800428c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <USB_EPStartXfer+0xe02>
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429c:	3301      	adds	r3, #1
 800429e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e047      	b.n	8004342 <USB_EPStartXfer+0xea2>
 80042b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80042bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <USB_EPStartXfer+0xe32>
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042cc:	3b01      	subs	r3, #1
 80042ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	b29b      	uxth	r3, r3
 80042dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e02a      	b.n	8004342 <USB_EPStartXfer+0xea2>
 80042ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d122      	bne.n	8004342 <USB_EPStartXfer+0xea2>
 80042fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	673b      	str	r3, [r7, #112]	; 0x70
 8004308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431c:	4413      	add	r3, r2
 800431e:	673b      	str	r3, [r7, #112]	; 0x70
 8004320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004330:	4413      	add	r3, r2
 8004332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800433c:	b29a      	uxth	r2, r3
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	891b      	ldrh	r3, [r3, #8]
 800434e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004362:	b29b      	uxth	r3, r3
 8004364:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004368:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800436c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004370:	6800      	ldr	r0, [r0, #0]
 8004372:	f001 f80b 	bl	800538c <USB_WritePMA>
 8004376:	e1d8      	b.n	800472a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800437c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d178      	bne.n	800447a <USB_EPStartXfer+0xfda>
 8004388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800438c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ac:	4413      	add	r3, r2
 80043ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	011a      	lsls	r2, r3, #4
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043c4:	4413      	add	r3, r2
 80043c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d116      	bne.n	8004404 <USB_EPStartXfer+0xf64>
 80043d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e8:	801a      	strh	r2, [r3, #0]
 80043ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e06b      	b.n	80044dc <USB_EPStartXfer+0x103c>
 8004404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004408:	2b3e      	cmp	r3, #62	; 0x3e
 800440a:	d818      	bhi.n	800443e <USB_EPStartXfer+0xf9e>
 800440c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <USB_EPStartXfer+0xf8c>
 8004422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004426:	3301      	adds	r3, #1
 8004428:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800442c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004430:	b29b      	uxth	r3, r3
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	b29a      	uxth	r2, r3
 8004436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e04e      	b.n	80044dc <USB_EPStartXfer+0x103c>
 800443e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <USB_EPStartXfer+0xfbe>
 8004454:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004458:	3b01      	subs	r3, #1
 800445a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800445e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004462:	b29b      	uxth	r3, r3
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004470:	b29a      	uxth	r2, r3
 8004472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	e030      	b.n	80044dc <USB_EPStartXfer+0x103c>
 800447a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d128      	bne.n	80044dc <USB_EPStartXfer+0x103c>
 800448a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800448e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ae:	4413      	add	r3, r2
 80044b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	011a      	lsls	r2, r3, #4
 80044c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044c6:	4413      	add	r3, r2
 80044c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80044dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	891b      	ldrh	r3, [r3, #8]
 80044e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6959      	ldr	r1, [r3, #20]
 80044f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004502:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004506:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	f000 ff3e 	bl	800538c <USB_WritePMA>
          ep->xfer_buff += len;
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004520:	441a      	add	r2, r3
 8004522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800452e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90f      	bls.n	800456a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800454a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	621a      	str	r2, [r3, #32]
 8004568:	e00e      	b.n	8004588 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800456a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800457a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80cc 	beq.w	800472a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d178      	bne.n	80046a2 <USB_EPStartXfer+0x1202>
 80045b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d4:	4413      	add	r3, r2
 80045d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	011a      	lsls	r2, r3, #4
 80045e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ec:	4413      	add	r3, r2
 80045ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <USB_EPStartXfer+0x118c>
 80045fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e064      	b.n	80046f6 <USB_EPStartXfer+0x1256>
 800462c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004630:	2b3e      	cmp	r3, #62	; 0x3e
 8004632:	d818      	bhi.n	8004666 <USB_EPStartXfer+0x11c6>
 8004634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800463e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <USB_EPStartXfer+0x11b4>
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	3301      	adds	r3, #1
 8004650:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	b29b      	uxth	r3, r3
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	b29a      	uxth	r2, r3
 800465e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e047      	b.n	80046f6 <USB_EPStartXfer+0x1256>
 8004666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <USB_EPStartXfer+0x11e6>
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	3b01      	subs	r3, #1
 8004682:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e029      	b.n	80046f6 <USB_EPStartXfer+0x1256>
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d121      	bne.n	80046f6 <USB_EPStartXfer+0x1256>
 80046b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046c8:	4413      	add	r3, r2
 80046ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	011a      	lsls	r2, r3, #4
 80046dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046e0:	4413      	add	r3, r2
 80046e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	895b      	ldrh	r3, [r3, #10]
 8004702:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6959      	ldr	r1, [r3, #20]
 8004712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004716:	b29b      	uxth	r3, r3
 8004718:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800471c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004720:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004724:	6800      	ldr	r0, [r0, #0]
 8004726:	f000 fe31 	bl	800538c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800474c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	8013      	strh	r3, [r2, #0]
 800475a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004762:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004766:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800476a:	8812      	ldrh	r2, [r2, #0]
 800476c:	f082 0210 	eor.w	r2, r2, #16
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004776:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800477a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800477e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	f082 0220 	eor.w	r2, r2, #32
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
 80047c2:	f000 bc9f 	b.w	8005104 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80047c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	7b1b      	ldrb	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 80ae 	bne.w	8004934 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80047d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d917      	bls.n	8004824 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80047f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004814:	1ad2      	subs	r2, r2, r3
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	619a      	str	r2, [r3, #24]
 8004822:	e00e      	b.n	8004842 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004866:	4413      	add	r3, r2
 8004868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800486c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800487e:	4413      	add	r3, r2
 8004880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <USB_EPStartXfer+0x141e>
 8004890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800489c:	b29a      	uxth	r2, r3
 800489e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	e3e8      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
 80048be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c2:	2b3e      	cmp	r3, #62	; 0x3e
 80048c4:	d818      	bhi.n	80048f8 <USB_EPStartXfer+0x1458>
 80048c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <USB_EPStartXfer+0x1446>
 80048dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048e0:	3301      	adds	r3, #1
 80048e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	e3cb      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
 80048f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <USB_EPStartXfer+0x1478>
 800490e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004912:	3b01      	subs	r3, #1
 8004914:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800491c:	b29b      	uxth	r3, r3
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	b29b      	uxth	r3, r3
 8004922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492a:	b29a      	uxth	r2, r3
 800492c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e3ad      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78db      	ldrb	r3, [r3, #3]
 8004940:	2b02      	cmp	r3, #2
 8004942:	f040 8200 	bne.w	8004d46 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 8091 	bne.w	8004a7a <USB_EPStartXfer+0x15da>
 8004958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800497c:	4413      	add	r3, r2
 800497e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	011a      	lsls	r2, r3, #4
 8004990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004994:	4413      	add	r3, r2
 8004996:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800499a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800499e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d116      	bne.n	80049dc <USB_EPStartXfer+0x153c>
 80049ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e083      	b.n	8004ae4 <USB_EPStartXfer+0x1644>
 80049dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ea:	d820      	bhi.n	8004a2e <USB_EPStartXfer+0x158e>
 80049ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <USB_EPStartXfer+0x157c>
 8004a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a16:	3301      	adds	r3, #1
 8004a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e05a      	b.n	8004ae4 <USB_EPStartXfer+0x1644>
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <USB_EPStartXfer+0x15be>
 8004a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	e034      	b.n	8004ae4 <USB_EPStartXfer+0x1644>
 8004a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d12c      	bne.n	8004ae4 <USB_EPStartXfer+0x1644>
 8004a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	011a      	lsls	r2, r3, #4
 8004ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 8091 	bne.w	8004c26 <USB_EPStartXfer+0x1786>
 8004b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b28:	4413      	add	r3, r2
 8004b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	011a      	lsls	r2, r3, #4
 8004b3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b40:	4413      	add	r3, r2
 8004b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <USB_EPStartXfer+0x16e8>
 8004b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	e07c      	b.n	8004c82 <USB_EPStartXfer+0x17e2>
 8004b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b3e      	cmp	r3, #62	; 0x3e
 8004b96:	d820      	bhi.n	8004bda <USB_EPStartXfer+0x173a>
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <USB_EPStartXfer+0x1728>
 8004bbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	029b      	lsls	r3, r3, #10
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e053      	b.n	8004c82 <USB_EPStartXfer+0x17e2>
 8004bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <USB_EPStartXfer+0x176a>
 8004c00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	029b      	lsls	r3, r3, #10
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	e02d      	b.n	8004c82 <USB_EPStartXfer+0x17e2>
 8004c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d125      	bne.n	8004c82 <USB_EPStartXfer+0x17e2>
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	011a      	lsls	r2, r3, #4
 8004c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c64:	4413      	add	r3, r2
 8004c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 81fe 	beq.w	8005090 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004cb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <USB_EPStartXfer+0x182c>
 8004cc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ccc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 81db 	bne.w	8005090 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004cda:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 81d4 	bne.w	8005090 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
 8004d44:	e1a4      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	78db      	ldrb	r3, [r3, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	f040 819a 	bne.w	800508c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d917      	bls.n	8004da4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8004d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	619a      	str	r2, [r3, #24]
 8004da2:	e00e      	b.n	8004dc2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8004da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d178      	bne.n	8004ec4 <USB_EPStartXfer+0x1a24>
 8004dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004df6:	4413      	add	r3, r2
 8004df8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	011a      	lsls	r2, r3, #4
 8004e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e0e:	4413      	add	r3, r2
 8004e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <USB_EPStartXfer+0x19ae>
 8004e20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e06b      	b.n	8004f26 <USB_EPStartXfer+0x1a86>
 8004e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e52:	2b3e      	cmp	r3, #62	; 0x3e
 8004e54:	d818      	bhi.n	8004e88 <USB_EPStartXfer+0x19e8>
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <USB_EPStartXfer+0x19d6>
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e70:	3301      	adds	r3, #1
 8004e72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e04e      	b.n	8004f26 <USB_EPStartXfer+0x1a86>
 8004e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <USB_EPStartXfer+0x1a08>
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e030      	b.n	8004f26 <USB_EPStartXfer+0x1a86>
 8004ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d128      	bne.n	8004f26 <USB_EPStartXfer+0x1a86>
 8004ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	4413      	add	r3, r2
 8004efa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	011a      	lsls	r2, r3, #4
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	4413      	add	r3, r2
 8004f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d178      	bne.n	8005036 <USB_EPStartXfer+0x1b96>
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f68:	4413      	add	r3, r2
 8004f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f80:	4413      	add	r3, r2
 8004f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <USB_EPStartXfer+0x1b20>
 8004f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e067      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
 8004fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc6:	d818      	bhi.n	8004ffa <USB_EPStartXfer+0x1b5a>
 8004fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <USB_EPStartXfer+0x1b48>
 8004fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	e04a      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <USB_EPStartXfer+0x1b7a>
 8005010:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005014:	3b01      	subs	r3, #1
 8005016:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800501a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	e02c      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d124      	bne.n	8005090 <USB_EPStartXfer+0x1bf0>
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005054:	b29b      	uxth	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	4413      	add	r3, r2
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	011a      	lsls	r2, r3, #4
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	4413      	add	r3, r2
 8005076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800507a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	b29a      	uxth	r2, r3
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e001      	b.n	8005090 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e03a      	b.n	8005106 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80050ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80050be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80050c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80050ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80050f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005100:	b29b      	uxth	r3, r3
 8005102:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	81bb      	strh	r3, [r7, #12]
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	f083 0310 	eor.w	r3, r3, #16
 8005140:	81bb      	strh	r3, [r7, #12]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	89bb      	ldrh	r3, [r7, #12]
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
 8005162:	e01f      	b.n	80051a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	81fb      	strh	r3, [r7, #14]
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005182:	81fb      	strh	r3, [r7, #14]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	7b1b      	ldrb	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 809d 	bne.w	80052fe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d04c      	beq.n	8005266 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	823b      	strh	r3, [r7, #16]
 80051da:	8a3b      	ldrh	r3, [r7, #16]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <USB_EPClearStall+0x6c>
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	81fb      	strh	r3, [r7, #14]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	78db      	ldrb	r3, [r3, #3]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d06c      	beq.n	80052fe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523a:	81bb      	strh	r3, [r7, #12]
 800523c:	89bb      	ldrh	r3, [r7, #12]
 800523e:	f083 0320 	eor.w	r3, r3, #32
 8005242:	81bb      	strh	r3, [r7, #12]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
 8005264:	e04b      	b.n	80052fe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	82fb      	strh	r3, [r7, #22]
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <USB_EPClearStall+0x106>
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	82bb      	strh	r3, [r7, #20]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8abb      	ldrh	r3, [r7, #20]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	827b      	strh	r3, [r7, #18]
 80052ce:	8a7b      	ldrh	r3, [r7, #18]
 80052d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052d4:	827b      	strh	r3, [r7, #18]
 80052d6:	8a7b      	ldrh	r3, [r7, #18]
 80052d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052dc:	827b      	strh	r3, [r7, #18]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8a7b      	ldrh	r3, [r7, #18]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005366:	b29b      	uxth	r3, r3
 8005368:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800538c:	b480      	push	{r7}
 800538e:	b08d      	sub	sp, #52	; 0x34
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	460b      	mov	r3, r1
 800539c:	80fb      	strh	r3, [r7, #6]
 800539e:	4613      	mov	r3, r2
 80053a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053a2:	88bb      	ldrh	r3, [r7, #4]
 80053a4:	3301      	adds	r3, #1
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	005a      	lsls	r2, r3, #1
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	e01e      	b.n	8005404 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	3301      	adds	r3, #1
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	3302      	adds	r3, #2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	3302      	adds	r3, #2
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	3301      	adds	r3, #1
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	3b01      	subs	r3, #1
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1dd      	bne.n	80053c6 <USB_WritePMA+0x3a>
  }
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	3734      	adds	r7, #52	; 0x34
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005416:	b480      	push	{r7}
 8005418:	b08b      	sub	sp, #44	; 0x2c
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	4611      	mov	r1, r2
 8005422:	461a      	mov	r2, r3
 8005424:	460b      	mov	r3, r1
 8005426:	80fb      	strh	r3, [r7, #6]
 8005428:	4613      	mov	r3, r2
 800542a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800542c:	88bb      	ldrh	r3, [r7, #4]
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	b29b      	uxth	r3, r3
 8005432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	005a      	lsls	r2, r3, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005448:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	e01b      	b.n	8005488 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	3302      	adds	r3, #2
 800545c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b2da      	uxtb	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	3302      	adds	r3, #2
 8005480:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	3b01      	subs	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e0      	bne.n	8005450 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800548e:	88bb      	ldrh	r3, [r7, #4]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	701a      	strb	r2, [r3, #0]
  }
}
 80054aa:	bf00      	nop
 80054ac:	372c      	adds	r7, #44	; 0x2c
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80054c4:	2302      	movs	r3, #2
 80054c6:	2203      	movs	r2, #3
 80054c8:	2181      	movs	r1, #129	; 0x81
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 fd2b 	bl	8006f26 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80054d6:	2302      	movs	r3, #2
 80054d8:	2203      	movs	r2, #3
 80054da:	2101      	movs	r1, #1
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fd22 	bl	8006f26 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80054ea:	2054      	movs	r0, #84	; 0x54
 80054ec:	f001 fe30 	bl	8007150 <USBD_static_malloc>
 80054f0:	4602      	mov	r2, r0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e012      	b.n	800552e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800550e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	2101      	movs	r1, #1
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fded 	bl	8007108 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005544:	2181      	movs	r1, #129	; 0x81
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fd13 	bl	8006f72 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005552:	2101      	movs	r1, #1
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 fd0c 	bl	8006f72 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557c:	4618      	mov	r0, r3
 800557e:	f001 fdf3 	bl	8007168 <USBD_static_free>
    pdev->pClassData = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d051      	beq.n	8005666 <USBD_CUSTOM_HID_Setup+0xd2>
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	f040 80da 	bne.w	800577c <USBD_CUSTOM_HID_Setup+0x1e8>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	3b02      	subs	r3, #2
 80055ce:	2b09      	cmp	r3, #9
 80055d0:	d841      	bhi.n	8005656 <USBD_CUSTOM_HID_Setup+0xc2>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <USBD_CUSTOM_HID_Setup+0x44>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	08005657 	.word	0x08005657
 80055e4:	08005657 	.word	0x08005657
 80055e8:	08005657 	.word	0x08005657
 80055ec:	08005657 	.word	0x08005657
 80055f0:	08005657 	.word	0x08005657
 80055f4:	08005641 	.word	0x08005641
 80055f8:	0800561f 	.word	0x0800561f
 80055fc:	08005601 	.word	0x08005601
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	885b      	ldrh	r3, [r3, #2]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800560c:	e02a      	b.n	8005664 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3340      	adds	r3, #64	; 0x40
 8005612:	2201      	movs	r2, #1
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 f979 	bl	800690e <USBD_CtlSendData>
          break;
 800561c:	e022      	b.n	8005664 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	885b      	ldrh	r3, [r3, #2]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	b29b      	uxth	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800562e:	e019      	b.n	8005664 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	3344      	adds	r3, #68	; 0x44
 8005634:	2201      	movs	r2, #1
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f968 	bl	800690e <USBD_CtlSendData>
          break;
 800563e:	e011      	b.n	8005664 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2201      	movs	r2, #1
 8005644:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	88db      	ldrh	r3, [r3, #6]
 800564c:	461a      	mov	r2, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 f98b 	bl	800696a <USBD_CtlPrepareRx>
          break;
 8005654:	e006      	b.n	8005664 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 f8ee 	bl	800683a <USBD_CtlError>
          ret = USBD_FAIL;
 800565e:	2302      	movs	r3, #2
 8005660:	75fb      	strb	r3, [r7, #23]
          break;
 8005662:	bf00      	nop
      }
      break;
 8005664:	e091      	b.n	800578a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	2b0b      	cmp	r3, #11
 800566c:	d87e      	bhi.n	800576c <USBD_CUSTOM_HID_Setup+0x1d8>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056a5 	.word	0x080056a5
 8005678:	0800576d 	.word	0x0800576d
 800567c:	0800576d 	.word	0x0800576d
 8005680:	0800576d 	.word	0x0800576d
 8005684:	0800576d 	.word	0x0800576d
 8005688:	0800576d 	.word	0x0800576d
 800568c:	080056cd 	.word	0x080056cd
 8005690:	0800576d 	.word	0x0800576d
 8005694:	0800576d 	.word	0x0800576d
 8005698:	0800576d 	.word	0x0800576d
 800569c:	0800571f 	.word	0x0800571f
 80056a0:	08005747 	.word	0x08005747
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d107      	bne.n	80056be <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80056ae:	f107 030e 	add.w	r3, r7, #14
 80056b2:	2202      	movs	r2, #2
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 f929 	bl	800690e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056bc:	e05d      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f8ba 	bl	800683a <USBD_CtlError>
            ret = USBD_FAIL;
 80056c6:	2302      	movs	r3, #2
 80056c8:	75fb      	strb	r3, [r7, #23]
          break;
 80056ca:	e056      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	885b      	ldrh	r3, [r3, #2]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b22      	cmp	r3, #34	; 0x22
 80056d6:	d10d      	bne.n	80056f4 <USBD_CUSTOM_HID_Setup+0x160>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	88db      	ldrh	r3, [r3, #6]
 80056dc:	f240 4291 	movw	r2, #1169	; 0x491
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bf28      	it	cs
 80056e4:	4613      	movcs	r3, r2
 80056e6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e00d      	b.n	8005710 <USBD_CUSTOM_HID_Setup+0x17c>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	885b      	ldrh	r3, [r3, #2]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b21      	cmp	r3, #33	; 0x21
 80056fe:	d107      	bne.n	8005710 <USBD_CUSTOM_HID_Setup+0x17c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005700:	4b24      	ldr	r3, [pc, #144]	; (8005794 <USBD_CUSTOM_HID_Setup+0x200>)
 8005702:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	88db      	ldrh	r3, [r3, #6]
 8005708:	2b09      	cmp	r3, #9
 800570a:	bf28      	it	cs
 800570c:	2309      	movcs	r3, #9
 800570e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8005710:	8bfb      	ldrh	r3, [r7, #30]
 8005712:	461a      	mov	r2, r3
 8005714:	69b9      	ldr	r1, [r7, #24]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 f8f9 	bl	800690e <USBD_CtlSendData>
          break;
 800571c:	e02d      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005724:	2b03      	cmp	r3, #3
 8005726:	d107      	bne.n	8005738 <USBD_CUSTOM_HID_Setup+0x1a4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3348      	adds	r3, #72	; 0x48
 800572c:	2201      	movs	r2, #1
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f8ec 	bl	800690e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005736:	e020      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 f87d 	bl	800683a <USBD_CtlError>
            ret = USBD_FAIL;
 8005740:	2302      	movs	r3, #2
 8005742:	75fb      	strb	r3, [r7, #23]
          break;
 8005744:	e019      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574c:	2b03      	cmp	r3, #3
 800574e:	d106      	bne.n	800575e <USBD_CUSTOM_HID_Setup+0x1ca>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	885b      	ldrh	r3, [r3, #2]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800575c:	e00d      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 f86a 	bl	800683a <USBD_CtlError>
            ret = USBD_FAIL;
 8005766:	2302      	movs	r3, #2
 8005768:	75fb      	strb	r3, [r7, #23]
          break;
 800576a:	e006      	b.n	800577a <USBD_CUSTOM_HID_Setup+0x1e6>

        default:
          USBD_CtlError(pdev, req);
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f001 f863 	bl	800683a <USBD_CtlError>
          ret = USBD_FAIL;
 8005774:	2302      	movs	r3, #2
 8005776:	75fb      	strb	r3, [r7, #23]
          break;
 8005778:	bf00      	nop
      }
      break;
 800577a:	e006      	b.n	800578a <USBD_CUSTOM_HID_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 f85b 	bl	800683a <USBD_CtlError>
      ret = USBD_FAIL;
 8005784:	2302      	movs	r3, #2
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	bf00      	nop
  }
  return ret;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	200000c8 	.word	0x200000c8

08005798 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2229      	movs	r2, #41	; 0x29
 80057a4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000044 	.word	0x20000044

080057b8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2229      	movs	r2, #41	; 0x29
 80057c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80057c6:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000070 	.word	0x20000070

080057d8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2229      	movs	r2, #41	; 0x29
 80057e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	2000009c 	.word	0x2000009c

080057f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	7810      	ldrb	r0, [r2, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	7852      	ldrb	r2, [r2, #1]
 8005840:	4611      	mov	r1, r2
 8005842:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	2101      	movs	r1, #1
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fc5c 	bl	8007108 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005868:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10c      	bne.n	800588c <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	7810      	ldrb	r0, [r2, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	7852      	ldrb	r2, [r2, #1]
 8005882:	4611      	mov	r1, r2
 8005884:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	220a      	movs	r2, #10
 80058a4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80058a6:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	200000d4 	.word	0x200000d4

080058b8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80058c2:	2302      	movs	r3, #2
 80058c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80058f8:	2302      	movs	r3, #2
 80058fa:	e01a      	b.n	8005932 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	79fa      	ldrb	r2, [r7, #7]
 8005928:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f001 fa90 	bl	8006e50 <USBD_LL_Init>

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e001      	b.n	8005960 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800595c:	2302      	movs	r3, #2
 800595e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fabb 	bl	8006ef0 <USBD_LL_Start>

  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059a4:	2302      	movs	r3, #2
 80059a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	4611      	mov	r1, r2
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	4611      	mov	r1, r2
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3

  return USBD_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fed7 	bl	80067c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d016      	beq.n	8005a66 <USBD_LL_SetupStage+0x6a>
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d81c      	bhi.n	8005a76 <USBD_LL_SetupStage+0x7a>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <USBD_LL_SetupStage+0x4a>
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d008      	beq.n	8005a56 <USBD_LL_SetupStage+0x5a>
 8005a44:	e017      	b.n	8005a76 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9ca 	bl	8005de8 <USBD_StdDevReq>
      break;
 8005a54:	e01a      	b.n	8005a8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa2c 	bl	8005ebc <USBD_StdItfReq>
      break;
 8005a64:	e012      	b.n	8005a8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa6c 	bl	8005f4c <USBD_StdEPReq>
      break;
 8005a74:	e00a      	b.n	8005a8c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 fa93 	bl	8006fb0 <USBD_LL_StallEP>
      break;
 8005a8a:	bf00      	nop
  }

  return USBD_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005aa4:	7afb      	ldrb	r3, [r7, #11]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d14b      	bne.n	8005b42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ab0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d134      	bne.n	8005b26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d919      	bls.n	8005afc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	1ad2      	subs	r2, r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d203      	bcs.n	8005aea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	e002      	b.n	8005af0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 ff56 	bl	80069a6 <USBD_CtlContinueRx>
 8005afa:	e038      	b.n	8005b6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d105      	bne.n	8005b1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 ff53 	bl	80069ca <USBD_CtlSendStatus>
 8005b24:	e023      	b.n	8005b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b2c:	2b05      	cmp	r3, #5
 8005b2e:	d11e      	bne.n	8005b6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fa38 	bl	8006fb0 <USBD_LL_StallEP>
 8005b40:	e015      	b.n	8005b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d108      	bne.n	8005b6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	7afa      	ldrb	r2, [r7, #11]
 8005b62:	4611      	mov	r1, r2
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	4798      	blx	r3
 8005b68:	e001      	b.n	8005b6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e000      	b.n	8005b70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	460b      	mov	r3, r1
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d17f      	bne.n	8005c8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d15c      	bne.n	8005c56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d915      	bls.n	8005bd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fec0 	bl	8006946 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2100      	movs	r1, #0
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 fa9b 	bl	8007108 <USBD_LL_PrepareReceive>
 8005bd2:	e04e      	b.n	8005c72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	6912      	ldr	r2, [r2, #16]
 8005bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be0:	fb01 f202 	mul.w	r2, r1, r2
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d11c      	bne.n	8005c24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d316      	bcc.n	8005c24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d20f      	bcs.n	8005c24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c04:	2200      	movs	r2, #0
 8005c06:	2100      	movs	r1, #0
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fe9c 	bl	8006946 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c16:	2300      	movs	r3, #0
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f001 fa73 	bl	8007108 <USBD_LL_PrepareReceive>
 8005c22:	e026      	b.n	8005c72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d105      	bne.n	8005c46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f001 f9b1 	bl	8006fb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fece 	bl	80069f0 <USBD_CtlReceiveStatus>
 8005c54:	e00d      	b.n	8005c72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d004      	beq.n	8005c6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f001 f99f 	bl	8006fb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d11d      	bne.n	8005cb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fe81 	bl	8005984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c8a:	e015      	b.n	8005cb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d108      	bne.n	8005cb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	7afa      	ldrb	r2, [r7, #11]
 8005cac:	4611      	mov	r1, r2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
 8005cb2:	e001      	b.n	8005cb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e000      	b.n	8005cba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cca:	2340      	movs	r3, #64	; 0x40
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 f928 	bl	8006f26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2240      	movs	r2, #64	; 0x40
 8005ce2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f91a 	bl	8006f26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	4611      	mov	r1, r2
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
  }

  return USBD_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d105      	bne.n	8005da8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d10b      	bne.n	8005dde <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d005      	beq.n	8005e0e <USBD_StdDevReq+0x26>
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d84f      	bhi.n	8005ea6 <USBD_StdDevReq+0xbe>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <USBD_StdDevReq+0x36>
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d14b      	bne.n	8005ea6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      break;
 8005e1c:	e048      	b.n	8005eb0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b09      	cmp	r3, #9
 8005e24:	d839      	bhi.n	8005e9a <USBD_StdDevReq+0xb2>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <USBD_StdDevReq+0x44>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e9b 	.word	0x08005e9b
 8005e38:	08005e87 	.word	0x08005e87
 8005e3c:	08005e9b 	.word	0x08005e9b
 8005e40:	08005e5f 	.word	0x08005e5f
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e9b 	.word	0x08005e9b
 8005e4c:	08005e73 	.word	0x08005e73
 8005e50:	08005e69 	.word	0x08005e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f9dc 	bl	8006214 <USBD_GetDescriptor>
          break;
 8005e5c:	e022      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb3f 	bl	80064e4 <USBD_SetAddress>
          break;
 8005e66:	e01d      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb7e 	bl	800656c <USBD_SetConfig>
          break;
 8005e70:	e018      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fc07 	bl	8006688 <USBD_GetConfig>
          break;
 8005e7a:	e013      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fc37 	bl	80066f2 <USBD_GetStatus>
          break;
 8005e84:	e00e      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fc65 	bl	8006758 <USBD_SetFeature>
          break;
 8005e8e:	e009      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fc74 	bl	8006780 <USBD_ClrFeature>
          break;
 8005e98:	e004      	b.n	8005ea4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fccc 	bl	800683a <USBD_CtlError>
          break;
 8005ea2:	bf00      	nop
      }
      break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fcc6 	bl	800683a <USBD_CtlError>
      break;
 8005eae:	bf00      	nop
  }

  return ret;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop

08005ebc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d005      	beq.n	8005ee2 <USBD_StdItfReq+0x26>
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d82e      	bhi.n	8005f38 <USBD_StdItfReq+0x7c>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <USBD_StdItfReq+0x26>
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d12a      	bne.n	8005f38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d81d      	bhi.n	8005f2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	889b      	ldrh	r3, [r3, #4]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d813      	bhi.n	8005f20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d110      	bne.n	8005f34 <USBD_StdItfReq+0x78>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fd56 	bl	80069ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f1e:	e009      	b.n	8005f34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fc89 	bl	800683a <USBD_CtlError>
          break;
 8005f28:	e004      	b.n	8005f34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fc84 	bl	800683a <USBD_CtlError>
          break;
 8005f32:	e000      	b.n	8005f36 <USBD_StdItfReq+0x7a>
          break;
 8005f34:	bf00      	nop
      }
      break;
 8005f36:	e004      	b.n	8005f42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fc7d 	bl	800683a <USBD_CtlError>
      break;
 8005f40:	bf00      	nop
  }

  return USBD_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	889b      	ldrh	r3, [r3, #4]
 8005f5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d007      	beq.n	8005f7c <USBD_StdEPReq+0x30>
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	f200 8146 	bhi.w	80061fe <USBD_StdEPReq+0x2b2>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <USBD_StdEPReq+0x40>
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	f040 8141 	bne.w	80061fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
      break;
 8005f8a:	e13d      	b.n	8006208 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d10a      	bne.n	8005fae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	e12d      	b.n	800620a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d007      	beq.n	8005fc6 <USBD_StdEPReq+0x7a>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f300 811b 	bgt.w	80061f2 <USBD_StdEPReq+0x2a6>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d072      	beq.n	80060a6 <USBD_StdEPReq+0x15a>
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d03a      	beq.n	800603a <USBD_StdEPReq+0xee>
 8005fc4:	e115      	b.n	80061f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d002      	beq.n	8005fd6 <USBD_StdEPReq+0x8a>
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d015      	beq.n	8006000 <USBD_StdEPReq+0xb4>
 8005fd4:	e02b      	b.n	800602e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <USBD_StdEPReq+0xaa>
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d009      	beq.n	8005ff6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 ffe2 	bl	8006fb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 ffde 	bl	8006fb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ff4:	e020      	b.n	8006038 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc1e 	bl	800683a <USBD_CtlError>
              break;
 8005ffe:	e01b      	b.n	8006038 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10e      	bne.n	8006026 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <USBD_StdEPReq+0xda>
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d008      	beq.n	8006026 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	88db      	ldrh	r3, [r3, #6]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 ffc5 	bl	8006fb0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fccf 	bl	80069ca <USBD_CtlSendStatus>

              break;
 800602c:	e004      	b.n	8006038 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fc02 	bl	800683a <USBD_CtlError>
              break;
 8006036:	bf00      	nop
          }
          break;
 8006038:	e0e0      	b.n	80061fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006040:	2b02      	cmp	r3, #2
 8006042:	d002      	beq.n	800604a <USBD_StdEPReq+0xfe>
 8006044:	2b03      	cmp	r3, #3
 8006046:	d015      	beq.n	8006074 <USBD_StdEPReq+0x128>
 8006048:	e026      	b.n	8006098 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <USBD_StdEPReq+0x11e>
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d009      	beq.n	800606a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 ffa8 	bl	8006fb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ffa4 	bl	8006fb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006068:	e01c      	b.n	80060a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fbe4 	bl	800683a <USBD_CtlError>
              break;
 8006072:	e017      	b.n	80060a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	885b      	ldrh	r3, [r3, #2]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d112      	bne.n	80060a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006082:	2b00      	cmp	r3, #0
 8006084:	d004      	beq.n	8006090 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 ffaf 	bl	8006fee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fc9a 	bl	80069ca <USBD_CtlSendStatus>
              }
              break;
 8006096:	e004      	b.n	80060a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fbcd 	bl	800683a <USBD_CtlError>
              break;
 80060a0:	e000      	b.n	80060a4 <USBD_StdEPReq+0x158>
              break;
 80060a2:	bf00      	nop
          }
          break;
 80060a4:	e0aa      	b.n	80061fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d002      	beq.n	80060b6 <USBD_StdEPReq+0x16a>
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d032      	beq.n	800611a <USBD_StdEPReq+0x1ce>
 80060b4:	e097      	b.n	80061e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <USBD_StdEPReq+0x180>
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d004      	beq.n	80060cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fbb8 	bl	800683a <USBD_CtlError>
                break;
 80060ca:	e091      	b.n	80061f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da0b      	bge.n	80060ec <USBD_StdEPReq+0x1a0>
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	3310      	adds	r3, #16
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	e00b      	b.n	8006104 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	3304      	adds	r3, #4
 8006104:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2202      	movs	r2, #2
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fbfb 	bl	800690e <USBD_CtlSendData>
              break;
 8006118:	e06a      	b.n	80061f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800611a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da11      	bge.n	8006146 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3318      	adds	r3, #24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d117      	bne.n	800616c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb7b 	bl	800683a <USBD_CtlError>
                  break;
 8006144:	e054      	b.n	80061f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	f003 020f 	and.w	r2, r3, #15
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fb68 	bl	800683a <USBD_CtlError>
                  break;
 800616a:	e041      	b.n	80061f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800616c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006170:	2b00      	cmp	r3, #0
 8006172:	da0b      	bge.n	800618c <USBD_StdEPReq+0x240>
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	3310      	adds	r3, #16
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	e00b      	b.n	80061a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	3304      	adds	r3, #4
 80061a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <USBD_StdEPReq+0x266>
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2b80      	cmp	r3, #128	; 0x80
 80061b0:	d103      	bne.n	80061ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e00e      	b.n	80061d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 ff34 	bl	800702c <USBD_LL_IsStallEP>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e002      	b.n	80061d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2202      	movs	r2, #2
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fb95 	bl	800690e <USBD_CtlSendData>
              break;
 80061e4:	e004      	b.n	80061f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb26 	bl	800683a <USBD_CtlError>
              break;
 80061ee:	bf00      	nop
          }
          break;
 80061f0:	e004      	b.n	80061fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb20 	bl	800683a <USBD_CtlError>
          break;
 80061fa:	bf00      	nop
      }
      break;
 80061fc:	e004      	b.n	8006208 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb1a 	bl	800683a <USBD_CtlError>
      break;
 8006206:	bf00      	nop
  }

  return ret;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	885b      	ldrh	r3, [r3, #2]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	2b06      	cmp	r3, #6
 8006236:	f200 8128 	bhi.w	800648a <USBD_GetDescriptor+0x276>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <USBD_GetDescriptor+0x2c>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006275 	.word	0x08006275
 8006248:	080062b5 	.word	0x080062b5
 800624c:	0800648b 	.word	0x0800648b
 8006250:	0800648b 	.word	0x0800648b
 8006254:	0800642b 	.word	0x0800642b
 8006258:	08006457 	.word	0x08006457
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
      break;
 8006272:	e112      	b.n	800649a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7c1b      	ldrb	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10d      	bne.n	8006298 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	f107 0208 	add.w	r2, r7, #8
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	2202      	movs	r2, #2
 8006294:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006296:	e100      	b.n	800649a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f107 0208 	add.w	r2, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	2202      	movs	r2, #2
 80062b0:	701a      	strb	r2, [r3, #0]
      break;
 80062b2:	e0f2      	b.n	800649a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	885b      	ldrh	r3, [r3, #2]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	f200 80ac 	bhi.w	8006418 <USBD_GetDescriptor+0x204>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_GetDescriptor+0xb4>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	08006315 	.word	0x08006315
 80062d0:	08006349 	.word	0x08006349
 80062d4:	0800637d 	.word	0x0800637d
 80062d8:	080063b1 	.word	0x080063b1
 80062dc:	080063e5 	.word	0x080063e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006302:	e091      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa97 	bl	800683a <USBD_CtlError>
            err++;
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	3301      	adds	r3, #1
 8006310:	72fb      	strb	r3, [r7, #11]
          break;
 8006312:	e089      	b.n	8006428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006336:	e077      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa7d 	bl	800683a <USBD_CtlError>
            err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
          break;
 8006346:	e06f      	b.n	8006428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636a:	e05d      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa63 	bl	800683a <USBD_CtlError>
            err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
          break;
 800637a:	e055      	b.n	8006428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639e:	e043      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa49 	bl	800683a <USBD_CtlError>
            err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
          break;
 80063ae:	e03b      	b.n	8006428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d2:	e029      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa2f 	bl	800683a <USBD_CtlError>
            err++;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	3301      	adds	r3, #1
 80063e0:	72fb      	strb	r3, [r7, #11]
          break;
 80063e2:	e021      	b.n	8006428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	7c12      	ldrb	r2, [r2, #16]
 80063fc:	f107 0108 	add.w	r1, r7, #8
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006406:	e00f      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa15 	bl	800683a <USBD_CtlError>
            err++;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	3301      	adds	r3, #1
 8006414:	72fb      	strb	r3, [r7, #11]
          break;
 8006416:	e007      	b.n	8006428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa0d 	bl	800683a <USBD_CtlError>
          err++;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	3301      	adds	r3, #1
 8006424:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006426:	e038      	b.n	800649a <USBD_GetDescriptor+0x286>
 8006428:	e037      	b.n	800649a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7c1b      	ldrb	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	f107 0208 	add.w	r2, r7, #8
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
 8006442:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006444:	e029      	b.n	800649a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9f6 	bl	800683a <USBD_CtlError>
        err++;
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	3301      	adds	r3, #1
 8006452:	72fb      	strb	r3, [r7, #11]
      break;
 8006454:	e021      	b.n	800649a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7c1b      	ldrb	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10d      	bne.n	800647a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	f107 0208 	add.w	r2, r7, #8
 800646a:	4610      	mov	r0, r2
 800646c:	4798      	blx	r3
 800646e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	2207      	movs	r2, #7
 8006476:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006478:	e00f      	b.n	800649a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9dc 	bl	800683a <USBD_CtlError>
        err++;
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	3301      	adds	r3, #1
 8006486:	72fb      	strb	r3, [r7, #11]
      break;
 8006488:	e007      	b.n	800649a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f9d4 	bl	800683a <USBD_CtlError>
      err++;
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	3301      	adds	r3, #1
 8006496:	72fb      	strb	r3, [r7, #11]
      break;
 8006498:	bf00      	nop
  }

  if (err != 0U)
 800649a:	7afb      	ldrb	r3, [r7, #11]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11c      	bne.n	80064da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80064a0:	893b      	ldrh	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d011      	beq.n	80064ca <USBD_GetDescriptor+0x2b6>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88da      	ldrh	r2, [r3, #6]
 80064b2:	893b      	ldrh	r3, [r7, #8]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bf28      	it	cs
 80064b8:	4613      	movcs	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064be:	893b      	ldrh	r3, [r7, #8]
 80064c0:	461a      	mov	r2, r3
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa22 	bl	800690e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	88db      	ldrh	r3, [r3, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa79 	bl	80069ca <USBD_CtlSendStatus>
 80064d8:	e000      	b.n	80064dc <USBD_GetDescriptor+0x2c8>
    return;
 80064da:	bf00      	nop
    }
  }
}
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop

080064e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	889b      	ldrh	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d130      	bne.n	8006558 <USBD_SetAddress+0x74>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	88db      	ldrh	r3, [r3, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d12c      	bne.n	8006558 <USBD_SetAddress+0x74>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	2b7f      	cmp	r3, #127	; 0x7f
 8006504:	d828      	bhi.n	8006558 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	885b      	ldrh	r3, [r3, #2]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006510:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006518:	2b03      	cmp	r3, #3
 800651a:	d104      	bne.n	8006526 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f98b 	bl	800683a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006524:	e01d      	b.n	8006562 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7bfa      	ldrb	r2, [r7, #15]
 800652a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fda6 	bl	8007084 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa46 	bl	80069ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654c:	e009      	b.n	8006562 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006556:	e004      	b.n	8006562 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f96d 	bl	800683a <USBD_CtlError>
  }
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	4b41      	ldr	r3, [pc, #260]	; (8006684 <USBD_SetConfig+0x118>)
 800657e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006580:	4b40      	ldr	r3, [pc, #256]	; (8006684 <USBD_SetConfig+0x118>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d904      	bls.n	8006592 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f955 	bl	800683a <USBD_CtlError>
 8006590:	e075      	b.n	800667e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	2b02      	cmp	r3, #2
 800659a:	d002      	beq.n	80065a2 <USBD_SetConfig+0x36>
 800659c:	2b03      	cmp	r3, #3
 800659e:	d023      	beq.n	80065e8 <USBD_SetConfig+0x7c>
 80065a0:	e062      	b.n	8006668 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80065a2:	4b38      	ldr	r3, [pc, #224]	; (8006684 <USBD_SetConfig+0x118>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01a      	beq.n	80065e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <USBD_SetConfig+0x118>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2203      	movs	r2, #3
 80065b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065bc:	4b31      	ldr	r3, [pc, #196]	; (8006684 <USBD_SetConfig+0x118>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff f9e8 	bl	8005998 <USBD_SetClassConfig>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d104      	bne.n	80065d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f932 	bl	800683a <USBD_CtlError>
            return;
 80065d6:	e052      	b.n	800667e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9f6 	bl	80069ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80065de:	e04e      	b.n	800667e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9f2 	bl	80069ca <USBD_CtlSendStatus>
        break;
 80065e6:	e04a      	b.n	800667e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80065e8:	4b26      	ldr	r3, [pc, #152]	; (8006684 <USBD_SetConfig+0x118>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d112      	bne.n	8006616 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <USBD_SetConfig+0x118>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006602:	4b20      	ldr	r3, [pc, #128]	; (8006684 <USBD_SetConfig+0x118>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff f9e4 	bl	80059d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9db 	bl	80069ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006614:	e033      	b.n	800667e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006616:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <USBD_SetConfig+0x118>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d01d      	beq.n	8006660 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff f9d2 	bl	80059d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <USBD_SetConfig+0x118>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <USBD_SetConfig+0x118>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff f9a8 	bl	8005998 <USBD_SetClassConfig>
 8006648:	4603      	mov	r3, r0
 800664a:	2b02      	cmp	r3, #2
 800664c:	d104      	bne.n	8006658 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8f2 	bl	800683a <USBD_CtlError>
            return;
 8006656:	e012      	b.n	800667e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f9b6 	bl	80069ca <USBD_CtlSendStatus>
        break;
 800665e:	e00e      	b.n	800667e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9b2 	bl	80069ca <USBD_CtlSendStatus>
        break;
 8006666:	e00a      	b.n	800667e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8e5 	bl	800683a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006670:	4b04      	ldr	r3, [pc, #16]	; (8006684 <USBD_SetConfig+0x118>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff f9ad 	bl	80059d6 <USBD_ClrClassConfig>
        break;
 800667c:	bf00      	nop
    }
  }
}
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000634 	.word	0x20000634

08006688 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	88db      	ldrh	r3, [r3, #6]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d004      	beq.n	80066a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8cc 	bl	800683a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066a2:	e022      	b.n	80066ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	dc02      	bgt.n	80066b4 <USBD_GetConfig+0x2c>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc03      	bgt.n	80066ba <USBD_GetConfig+0x32>
 80066b2:	e015      	b.n	80066e0 <USBD_GetConfig+0x58>
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d00b      	beq.n	80066d0 <USBD_GetConfig+0x48>
 80066b8:	e012      	b.n	80066e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3308      	adds	r3, #8
 80066c4:	2201      	movs	r2, #1
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f920 	bl	800690e <USBD_CtlSendData>
        break;
 80066ce:	e00c      	b.n	80066ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	2201      	movs	r2, #1
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f918 	bl	800690e <USBD_CtlSendData>
        break;
 80066de:	e004      	b.n	80066ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8a9 	bl	800683a <USBD_CtlError>
        break;
 80066e8:	bf00      	nop
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006702:	3b01      	subs	r3, #1
 8006704:	2b02      	cmp	r3, #2
 8006706:	d81e      	bhi.n	8006746 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	88db      	ldrh	r3, [r3, #6]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d004      	beq.n	800671a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f891 	bl	800683a <USBD_CtlError>
        break;
 8006718:	e01a      	b.n	8006750 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 0202 	orr.w	r2, r3, #2
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	330c      	adds	r3, #12
 800673a:	2202      	movs	r2, #2
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8e5 	bl	800690e <USBD_CtlSendData>
      break;
 8006744:	e004      	b.n	8006750 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f876 	bl	800683a <USBD_CtlError>
      break;
 800674e:	bf00      	nop
  }
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	885b      	ldrh	r3, [r3, #2]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d106      	bne.n	8006778 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f929 	bl	80069ca <USBD_CtlSendStatus>
  }
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	3b01      	subs	r3, #1
 8006792:	2b02      	cmp	r3, #2
 8006794:	d80b      	bhi.n	80067ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10c      	bne.n	80067b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f90f 	bl	80069ca <USBD_CtlSendStatus>
      }
      break;
 80067ac:	e004      	b.n	80067b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f842 	bl	800683a <USBD_CtlError>
      break;
 80067b6:	e000      	b.n	80067ba <USBD_ClrFeature+0x3a>
      break;
 80067b8:	bf00      	nop
  }
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785a      	ldrb	r2, [r3, #1]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3302      	adds	r3, #2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	3303      	adds	r3, #3
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	3304      	adds	r3, #4
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	3305      	adds	r3, #5
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	b29b      	uxth	r3, r3
 800680c:	4413      	add	r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	3306      	adds	r3, #6
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b29a      	uxth	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	3307      	adds	r3, #7
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	b29b      	uxth	r3, r3
 8006828:	4413      	add	r3, r2
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	80da      	strh	r2, [r3, #6]

}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fbb2 	bl	8006fb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fbae 	bl	8006fb0 <USBD_LL_StallEP>
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d032      	beq.n	80068d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f834 	bl	80068e0 <USBD_GetLen>
 8006878:	4603      	mov	r3, r0
 800687a:	3301      	adds	r3, #1
 800687c:	b29b      	uxth	r3, r3
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	75fa      	strb	r2, [r7, #23]
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4413      	add	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	7812      	ldrb	r2, [r2, #0]
 8006896:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	75fa      	strb	r2, [r7, #23]
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4413      	add	r3, r2
 80068a4:	2203      	movs	r2, #3
 80068a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80068a8:	e012      	b.n	80068d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	60fa      	str	r2, [r7, #12]
 80068b0:	7dfa      	ldrb	r2, [r7, #23]
 80068b2:	1c51      	adds	r1, r2, #1
 80068b4:	75f9      	strb	r1, [r7, #23]
 80068b6:	4611      	mov	r1, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	440a      	add	r2, r1
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	75fa      	strb	r2, [r7, #23]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4413      	add	r3, r2
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e8      	bne.n	80068aa <USBD_GetString+0x4e>
    }
  }
}
 80068d8:	bf00      	nop
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80068ec:	e005      	b.n	80068fa <USBD_GetLen+0x1a>
  {
    len++;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	3301      	adds	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f5      	bne.n	80068ee <USBD_GetLen+0xe>
  }

  return len;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2202      	movs	r2, #2
 8006920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fbc3 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	4613      	mov	r3, r2
 8006952:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	2100      	movs	r1, #0
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fbb1 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	4613      	mov	r3, r2
 8006976:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2203      	movs	r2, #3
 800697c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006988:	88fa      	ldrh	r2, [r7, #6]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	2100      	movs	r1, #0
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fbb6 	bl	8007108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	4613      	mov	r3, r2
 80069b2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fba4 	bl	8007108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2204      	movs	r2, #4
 80069d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069da:	2300      	movs	r3, #0
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb6e 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2205      	movs	r2, #5
 80069fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a00:	2300      	movs	r3, #0
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb7e 	bl	8007108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4912      	ldr	r1, [pc, #72]	; (8006a68 <MX_USB_DEVICE_Init+0x50>)
 8006a20:	4812      	ldr	r0, [pc, #72]	; (8006a6c <MX_USB_DEVICE_Init+0x54>)
 8006a22:	f7fe ff5f 	bl	80058e4 <USBD_Init>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a2c:	f7f9 fc26 	bl	800027c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006a30:	490f      	ldr	r1, [pc, #60]	; (8006a70 <MX_USB_DEVICE_Init+0x58>)
 8006a32:	480e      	ldr	r0, [pc, #56]	; (8006a6c <MX_USB_DEVICE_Init+0x54>)
 8006a34:	f7fe ff81 	bl	800593a <USBD_RegisterClass>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a3e:	f7f9 fc1d 	bl	800027c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006a42:	490c      	ldr	r1, [pc, #48]	; (8006a74 <MX_USB_DEVICE_Init+0x5c>)
 8006a44:	4809      	ldr	r0, [pc, #36]	; (8006a6c <MX_USB_DEVICE_Init+0x54>)
 8006a46:	f7fe ff37 	bl	80058b8 <USBD_CUSTOM_HID_RegisterInterface>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a50:	f7f9 fc14 	bl	800027c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a54:	4805      	ldr	r0, [pc, #20]	; (8006a6c <MX_USB_DEVICE_Init+0x54>)
 8006a56:	f7fe ff89 	bl	800596c <USBD_Start>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a60:	f7f9 fc0c 	bl	800027c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a64:	bf00      	nop
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000584 	.word	0x20000584
 8006a6c:	20000638 	.word	0x20000638
 8006a70:	2000000c 	.word	0x2000000c
 8006a74:	20000574 	.word	0x20000574

08006a78 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006a8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	71fb      	strb	r3, [r7, #7]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8006aa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	6039      	str	r1, [r7, #0]
 8006aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2212      	movs	r2, #18
 8006ac0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ac2:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	200005a0 	.word	0x200005a0

08006ad4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ae6:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	200005b4 	.word	0x200005b4

08006af8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	4907      	ldr	r1, [pc, #28]	; (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b0e:	4808      	ldr	r0, [pc, #32]	; (8006b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b10:	f7ff fea4 	bl	800685c <USBD_GetString>
 8006b14:	e004      	b.n	8006b20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b1a:	4805      	ldr	r0, [pc, #20]	; (8006b30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b1c:	f7ff fe9e 	bl	800685c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200008fc 	.word	0x200008fc
 8006b30:	08007268 	.word	0x08007268

08006b34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	4904      	ldr	r1, [pc, #16]	; (8006b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b44:	4804      	ldr	r0, [pc, #16]	; (8006b58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b46:	f7ff fe89 	bl	800685c <USBD_GetString>
  return USBD_StrDesc;
 8006b4a:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200008fc 	.word	0x200008fc
 8006b58:	08007288 	.word	0x08007288

08006b5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	221a      	movs	r2, #26
 8006b6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b6e:	f000 f843 	bl	8006bf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b72:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200005b8 	.word	0x200005b8

08006b80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	6039      	str	r1, [r7, #0]
 8006b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d105      	bne.n	8006b9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4907      	ldr	r1, [pc, #28]	; (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b96:	4808      	ldr	r0, [pc, #32]	; (8006bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b98:	f7ff fe60 	bl	800685c <USBD_GetString>
 8006b9c:	e004      	b.n	8006ba8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ba2:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ba4:	f7ff fe5a 	bl	800685c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ba8:	4b02      	ldr	r3, [pc, #8]	; (8006bb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200008fc 	.word	0x200008fc
 8006bb8:	0800729c 	.word	0x0800729c

08006bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bd4:	f7ff fe42 	bl	800685c <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006be0:	f7ff fe3c 	bl	800685c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	200008fc 	.word	0x200008fc
 8006bf4:	080072b0 	.word	0x080072b0

08006bf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <Get_SerialNum+0x44>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <Get_SerialNum+0x48>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <Get_SerialNum+0x4c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c1e:	2208      	movs	r2, #8
 8006c20:	4909      	ldr	r1, [pc, #36]	; (8006c48 <Get_SerialNum+0x50>)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f814 	bl	8006c50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c28:	2204      	movs	r2, #4
 8006c2a:	4908      	ldr	r1, [pc, #32]	; (8006c4c <Get_SerialNum+0x54>)
 8006c2c:	68b8      	ldr	r0, [r7, #8]
 8006c2e:	f000 f80f 	bl	8006c50 <IntToUnicode>
  }
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	1ffff7e8 	.word	0x1ffff7e8
 8006c40:	1ffff7ec 	.word	0x1ffff7ec
 8006c44:	1ffff7f0 	.word	0x1ffff7f0
 8006c48:	200005ba 	.word	0x200005ba
 8006c4c:	200005ca 	.word	0x200005ca

08006c50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e027      	b.n	8006cb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d80b      	bhi.n	8006c88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0f1b      	lsrs	r3, r3, #28
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	440b      	add	r3, r1
 8006c80:	3230      	adds	r2, #48	; 0x30
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e00a      	b.n	8006c9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0f1b      	lsrs	r3, r3, #28
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4619      	mov	r1, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	440b      	add	r3, r1
 8006c98:	3237      	adds	r2, #55	; 0x37
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	3301      	adds	r3, #1
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
 8006cb8:	7dfa      	ldrb	r2, [r7, #23]
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3d3      	bcc.n	8006c68 <IntToUnicode+0x18>
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <HAL_PCD_MspInit+0x44>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d113      	bne.n	8006d06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <HAL_PCD_MspInit+0x48>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4a0c      	ldr	r2, [pc, #48]	; (8006d14 <HAL_PCD_MspInit+0x48>)
 8006ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ce8:	61d3      	str	r3, [r2, #28]
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_PCD_MspInit+0x48>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2014      	movs	r0, #20
 8006cfc:	f7f9 fc8d 	bl	800061a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d00:	2014      	movs	r0, #20
 8006d02:	f7f9 fca6 	bl	8000652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40005c00 	.word	0x40005c00
 8006d14:	40021000 	.word	0x40021000

08006d18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fe fe64 	bl	80059fc <USBD_LL_SetupStage>
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	440b      	add	r3, r1
 8006d5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7fe fe96 	bl	8005a96 <USBD_LL_DataOutStage>
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	440b      	add	r3, r1
 8006d92:	333c      	adds	r3, #60	; 0x3c
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f7fe feed 	bl	8005b78 <USBD_LL_DataInStage>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fffd 	bl	8005db4 <USBD_LL_SOF>
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d001      	beq.n	8006dda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006dd6:	f7f9 fa51 	bl	800027c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe ffad 	bl	8005d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe ff66 	bl	8005cc2 <USBD_LL_Reset>
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe ffa7 	bl	8005d62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e1c:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <HAL_PCD_SuspendCallback+0x30>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	4a03      	ldr	r2, [pc, #12]	; (8006e30 <HAL_PCD_SuspendCallback+0x30>)
 8006e22:	f043 0306 	orr.w	r3, r3, #6
 8006e26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe ffa1 	bl	8005d8a <USBD_LL_Resume>
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e58:	4a23      	ldr	r2, [pc, #140]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e6a:	4a20      	ldr	r2, [pc, #128]	; (8006eec <USBD_LL_Init+0x9c>)
 8006e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e70:	2208      	movs	r2, #8
 8006e72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e76:	2202      	movs	r2, #2
 8006e78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e8c:	4816      	ldr	r0, [pc, #88]	; (8006ee8 <USBD_LL_Init+0x98>)
 8006e8e:	f7f9 fbfa 	bl	8000686 <HAL_PCD_Init>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006e98:	f7f9 f9f0 	bl	800027c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ea2:	2318      	movs	r3, #24
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	f7fb f857 	bl	8001f5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006eb2:	2358      	movs	r3, #88	; 0x58
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	f7fb f84f 	bl	8001f5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ec2:	2398      	movs	r3, #152	; 0x98
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2181      	movs	r1, #129	; 0x81
 8006ec8:	f7fb f847 	bl	8001f5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ed2:	23d8      	movs	r3, #216	; 0xd8
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	f7fb f83f 	bl	8001f5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000afc 	.word	0x20000afc
 8006eec:	40005c00 	.word	0x40005c00

08006ef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7f9 fcc8 	bl	800089c <HAL_PCD_Start>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f93c 	bl	8007190 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	461a      	mov	r2, r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	70fb      	strb	r3, [r7, #3]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70bb      	strb	r3, [r7, #2]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f4e:	78bb      	ldrb	r3, [r7, #2]
 8006f50:	883a      	ldrh	r2, [r7, #0]
 8006f52:	78f9      	ldrb	r1, [r7, #3]
 8006f54:	f7f9 fe40 	bl	8000bd8 <HAL_PCD_EP_Open>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f916 	bl	8007190 <USBD_Get_USB_Status>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fe87 	bl	8000ca4 <HAL_PCD_EP_Close>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f8f7 	bl	8007190 <USBD_Get_USB_Status>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7f9 ff30 	bl	8000e34 <HAL_PCD_EP_SetStall>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f8d8 	bl	8007190 <USBD_Get_USB_Status>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 ff71 	bl	8000ef4 <HAL_PCD_EP_ClrStall>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f8b9 	bl	8007190 <USBD_Get_USB_Status>
 800701e:	4603      	mov	r3, r0
 8007020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007022:	7bbb      	ldrb	r3, [r7, #14]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	da0c      	bge.n	8007062 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	440b      	add	r3, r1
 800705c:	3302      	adds	r3, #2
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	e00b      	b.n	800707a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	440b      	add	r3, r1
 8007074:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007078:	781b      	ldrb	r3, [r3, #0]
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7f9 fd73 	bl	8000b8e <HAL_PCD_SetAddress>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f86e 	bl	8007190 <USBD_Get_USB_Status>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	72fb      	strb	r3, [r7, #11]
 80070d2:	4613      	mov	r3, r2
 80070d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	7af9      	ldrb	r1, [r7, #11]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f7f9 fe60 	bl	8000dae <HAL_PCD_EP_Transmit>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f84b 	bl	8007190 <USBD_Get_USB_Status>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	460b      	mov	r3, r1
 8007116:	72fb      	strb	r3, [r7, #11]
 8007118:	4613      	mov	r3, r2
 800711a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800712a:	893b      	ldrh	r3, [r7, #8]
 800712c:	7af9      	ldrb	r1, [r7, #11]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	f7f9 fe00 	bl	8000d34 <HAL_PCD_EP_Receive>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f828 	bl	8007190 <USBD_Get_USB_Status>
 8007140:	4603      	mov	r3, r0
 8007142:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007144:	7dbb      	ldrb	r3, [r7, #22]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_static_malloc+0x14>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr
 8007164:	20000de8 	.word	0x20000de8

08007168 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d817      	bhi.n	80071d4 <USBD_Get_USB_Status+0x44>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_Get_USB_Status+0x1c>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071c3 	.word	0x080071c3
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071cf 	.word	0x080071cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
    break;
 80071c0:	e00b      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071c2:	2302      	movs	r3, #2
 80071c4:	73fb      	strb	r3, [r7, #15]
    break;
 80071c6:	e008      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
    break;
 80071cc:	e005      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071ce:	2302      	movs	r3, #2
 80071d0:	73fb      	strb	r3, [r7, #15]
    break;
 80071d2:	e002      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73fb      	strb	r3, [r7, #15]
    break;
 80071d8:	bf00      	nop
  }
  return usb_status;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop

080071e8 <__libc_init_array>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	2600      	movs	r6, #0
 80071ec:	4d0c      	ldr	r5, [pc, #48]	; (8007220 <__libc_init_array+0x38>)
 80071ee:	4c0d      	ldr	r4, [pc, #52]	; (8007224 <__libc_init_array+0x3c>)
 80071f0:	1b64      	subs	r4, r4, r5
 80071f2:	10a4      	asrs	r4, r4, #2
 80071f4:	42a6      	cmp	r6, r4
 80071f6:	d109      	bne.n	800720c <__libc_init_array+0x24>
 80071f8:	f000 f822 	bl	8007240 <_init>
 80071fc:	2600      	movs	r6, #0
 80071fe:	4d0a      	ldr	r5, [pc, #40]	; (8007228 <__libc_init_array+0x40>)
 8007200:	4c0a      	ldr	r4, [pc, #40]	; (800722c <__libc_init_array+0x44>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	42a6      	cmp	r6, r4
 8007208:	d105      	bne.n	8007216 <__libc_init_array+0x2e>
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007210:	4798      	blx	r3
 8007212:	3601      	adds	r6, #1
 8007214:	e7ee      	b.n	80071f4 <__libc_init_array+0xc>
 8007216:	f855 3b04 	ldr.w	r3, [r5], #4
 800721a:	4798      	blx	r3
 800721c:	3601      	adds	r6, #1
 800721e:	e7f2      	b.n	8007206 <__libc_init_array+0x1e>
 8007220:	080072d8 	.word	0x080072d8
 8007224:	080072d8 	.word	0x080072d8
 8007228:	080072d8 	.word	0x080072d8
 800722c:	080072dc 	.word	0x080072dc

08007230 <memset>:
 8007230:	4603      	mov	r3, r0
 8007232:	4402      	add	r2, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
